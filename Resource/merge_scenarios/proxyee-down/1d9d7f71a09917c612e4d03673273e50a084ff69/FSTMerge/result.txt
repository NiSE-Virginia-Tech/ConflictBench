Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/ui/src/main/java/lee/study/down/dispatch/HttpDownHandleCallback.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/ui/src/main/java/lee/study/down/dispatch/HttpDownHandleCallback.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/ui/src/main/java/lee/study/down/dispatch/HttpDownHandleCallback.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/ui/src/main/java/lee/study/down/dispatch/HttpDownHandleCallback.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/ui/src/main/java/lee/study/down/dispatch/HttpDownHandleCallback.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/ui/src/main/java/lee/study/down/dispatch/HttpDownHandleCallback.java
[NT -> left : Feature]
	[NT -> ui : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> lee : Folder]
						[NT -> study : Folder]
							[NT -> down : Folder]
								[NT -> dispatch : Folder]
									[NT -> HttpDownHandleCallback.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package lee.study.down.dispatch;" compose:Replacement merge: Default]
											[T -> io.netty.buffer.ByteBuf{ImportPackage} : ImportDeclaration "import io.netty.buffer.ByteBuf;" compose:Replacement merge: Default]
											[T -> io.netty.buffer.PooledByteBufAllocator{ImportPackage} : ImportDeclaration "import io.netty.buffer.PooledByteBufAllocator;" compose:Replacement merge: Default]
											[T -> io.netty.util.ReferenceCountUtil{ImportPackage} : ImportDeclaration "import io.netty.util.ReferenceCountUtil;" compose:Replacement merge: Default]
											[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
											[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
											[T -> java.security.AccessController{ImportPackage} : ImportDeclaration "import java.security.AccessController;" compose:Replacement merge: Default]
											[T -> java.security.PrivilegedAction{ImportPackage} : ImportDeclaration "import java.security.PrivilegedAction;" compose:Replacement merge: Default]
											[T -> java.util.HashMap{ImportPackage} : ImportDeclaration "import java.util.HashMap;" compose:Replacement merge: Default]
											[T -> lee.study.down.content.ContentManager{ImportPackage} : ImportDeclaration "import lee.study.down.content.ContentManager;" compose:Replacement merge: Default]
											[T -> lee.study.down.io.BdyZip{ImportPackage} : ImportDeclaration "import lee.study.down.io.BdyZip;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.ChunkInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.ChunkInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.HttpDownInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.HttpDownInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.TaskInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.TaskInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.mvc.form.NewTaskForm{ImportPackage} : ImportDeclaration "import lee.study.down.mvc.form.NewTaskForm;" compose:Replacement merge: Default]
											[T -> lee.study.down.mvc.form.WsForm{ImportPackage} : ImportDeclaration "import lee.study.down.mvc.form.WsForm;" compose:Replacement merge: Default]
											[T -> lee.study.down.mvc.ws.WsDataType{ImportPackage} : ImportDeclaration "import lee.study.down.mvc.ws.WsDataType;" compose:Replacement merge: Default]
											[T -> lee.study.down.util.FileUtil{ImportPackage} : ImportDeclaration "import lee.study.down.util.FileUtil;" compose:Replacement merge: Default]
											[NT -> HttpDownHandleCallback : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> HttpDownHandleCallback : Id "HttpDownHandleCallback" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements HttpDownCallback" compose:Replacement merge: SemanticConflict]
												[T -> onStart(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onStart(HttpDownInfo httpDownInfo) throws Exception {     //保存下载记录     ContentManager.DOWN.save();     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }" compose:Replacement merge: LineBased]
												[T -> onChunkStart(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onChunkStart(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }" compose:Replacement merge: LineBased]
												[T -> onProgress(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onProgress(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }" compose:Replacement merge: LineBased]
												[T -> onPause(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onPause(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }" compose:Replacement merge: LineBased]
												[T -> onContinue(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onContinue(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }" compose:Replacement merge: LineBased]
												[T -> onError(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo-Throwable-Throwable) : MethodDecl "@Override   public void onError(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo, Throwable cause) {     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }" compose:Replacement merge: LineBased]
												[T -> onChunkDone(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onChunkDone(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }" compose:Replacement merge: LineBased]
												[T -> onMerge(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onMerge(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }" compose:Replacement merge: LineBased]
												[T -> onDone(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onDone(HttpDownInfo httpDownInfo) throws Exception {     TaskInfo taskInfo = httpDownInfo.getTaskInfo();     //更改任务下载状态为已完成     ContentManager.DOWN.save();     //删除任务进度记录文件     synchronized (taskInfo) {       FileUtil.deleteIfExists(taskInfo.buildTaskRecordFilePath());     }     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());     NewTaskForm taskForm = NewTaskForm.parse(httpDownInfo);     if (taskForm.isUnzip()) {       if (BdyZip.isBdyZip(taskInfo.buildTaskFilePath())) {         WsForm wsForm = new WsForm(WsDataType.UNZIP_NEW, new HashMap<String, String>() {           {             put("filePath", taskInfo.buildTaskFilePath());             put("toPath", taskForm.getUnzipPath());           }         });         ContentManager.WS.sendMsg(wsForm);       }     }   }" compose:Replacement merge: LineBased]
												[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) throws IOException { //  System.setProperty("io.netty.noPreferDirect","true"); //    System.setProperty("io.netty.allocator.numDirectArenas","0");    /* while (true){       ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer(1024*1024*128);       byteBuf.release();     }*/     File file = new File("c:/test.txt");     try {       file.createNewFile();     } catch (IOException e) {       System.out.println(e.getStackTrace()[0].getMethodName());       e.printStackTrace();     }  //      System.out.println(byteBuf.getClass());   }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> ui : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> lee : Folder]
						[NT -> study : Folder]
							[NT -> down : Folder]
								[NT -> dispatch : Folder]
									[NT -> HttpDownHandleCallback.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package lee.study.down.dispatch;" compose:Replacement merge: Default]
											[T -> lee.study.down.content.ContentManager{ImportPackage} : ImportDeclaration "import lee.study.down.content.ContentManager;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.ChunkInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.ChunkInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.HttpDownInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.HttpDownInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.TaskInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.TaskInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.util.FileUtil{ImportPackage} : ImportDeclaration "import lee.study.down.util.FileUtil;" compose:Replacement merge: Default]
											[NT -> HttpDownHandleCallback : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> HttpDownHandleCallback : Id "HttpDownHandleCallback" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements HttpDownCallback" compose:Replacement merge: SemanticConflict]
												[T -> onStart(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onStart(HttpDownInfo httpDownInfo) throws Exception {     //保存下载记录     ContentManager.DOWN.save();     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onChunkStart(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onChunkStart(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }" compose:Replacement merge: LineBased]
												[T -> onProgress(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onProgress(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }" compose:Replacement merge: LineBased]
												[T -> onPause(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onPause(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onContinue(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onContinue(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onError(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo-Throwable-Throwable) : MethodDecl "@Override   public void onError(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo, Throwable cause) {     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onChunkDone(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onChunkDone(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onMerge(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onMerge(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onDone(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onDone(HttpDownInfo httpDownInfo) throws Exception {     TaskInfo taskInfo = httpDownInfo.getTaskInfo();     //更改任务下载状态为已完成     ContentManager.DOWN.save();     //删除任务进度记录文件     synchronized (taskInfo) {       FileUtil.deleteIfExists(taskInfo.buildTaskRecordFilePath());     }     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> ui : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> lee : Folder]
						[NT -> study : Folder]
							[NT -> down : Folder]
								[NT -> dispatch : Folder]
									[NT -> HttpDownHandleCallback.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package lee.study.down.dispatch;" compose:Replacement merge: Default]
											[T -> lee.study.down.content.ContentManager{ImportPackage} : ImportDeclaration "import lee.study.down.content.ContentManager;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.ChunkInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.ChunkInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.HttpDownInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.HttpDownInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.model.TaskInfo{ImportPackage} : ImportDeclaration "import lee.study.down.model.TaskInfo;" compose:Replacement merge: Default]
											[T -> lee.study.down.util.FileUtil{ImportPackage} : ImportDeclaration "import lee.study.down.util.FileUtil;" compose:Replacement merge: Default]
											[NT -> HttpDownHandleCallback : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> HttpDownHandleCallback : Id "HttpDownHandleCallback" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements HttpDownCallback" compose:Replacement merge: SemanticConflict]
												[T -> onStart(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onStart(HttpDownInfo httpDownInfo) throws Exception {     //保存下载记录     ContentManager.DOWN.save();     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onChunkStart(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onChunkStart(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }" compose:Replacement merge: LineBased]
												[T -> onProgress(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onProgress(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }" compose:Replacement merge: LineBased]
												[T -> onPause(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onPause(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onContinue(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onContinue(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onError(HttpDownInfo-HttpDownInfo-Throwable-Throwable) : MethodDecl "@Override   public void onError(HttpDownInfo httpDownInfo, Throwable cause) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onChunkError(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo-Throwable-Throwable) : MethodDecl "@Override   public void onChunkError(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo, Throwable cause) {     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onChunkDone(HttpDownInfo-HttpDownInfo-ChunkInfo-ChunkInfo) : MethodDecl "@Override   public void onChunkDone(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onMerge(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onMerge(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
												[T -> onDone(HttpDownInfo-HttpDownInfo) : MethodDecl "@Override   public void onDone(HttpDownInfo httpDownInfo) throws Exception {     TaskInfo taskInfo = httpDownInfo.getTaskInfo();     //更改任务下载状态为已完成     ContentManager.DOWN.save();     //删除任务进度记录文件     synchronized (taskInfo) {       FileUtil.deleteIfExists(taskInfo.buildTaskRecordFilePath());     }     ContentManager.WS.sendMsg();   }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> ui : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> lee : Folder]
						[NT -> study : Folder]
							[NT -> down : Folder]
								[NT -> dispatch : Folder]
									[NT -> HttpDownHandleCallback.java.merge : .java.merge-File]
										[T -> HttpDownHandleCallback.java : .java-Content "package lee.study.down.dispatch;  import io.netty.buffer.ByteBuf; import io.netty.buffer.PooledByteBufAllocator; import io.netty.util.ReferenceCountUtil; import java.io.File; import java.io.IOException; import java.security.AccessController; import java.security.PrivilegedAction; import java.util.HashMap; import lee.study.down.content.ContentManager; import lee.study.down.io.BdyZip; import lee.study.down.model.ChunkInfo; import lee.study.down.model.HttpDownInfo; import lee.study.down.model.TaskInfo; import lee.study.down.mvc.form.NewTaskForm; import lee.study.down.mvc.form.WsForm; import lee.study.down.mvc.ws.WsDataType; import lee.study.down.util.FileUtil;  public class HttpDownHandleCallback implements HttpDownCallback {    @Override   public void onStart(HttpDownInfo httpDownInfo) throws Exception {     //保存下载记录     ContentManager.DOWN.save();     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }    @Override   public void onChunkStart(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }    @Override   public void onProgress(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }    @Override   public void onPause(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }    @Override   public void onContinue(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }    @Override   public void onError(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo, Throwable cause) {     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }    @Override   public void onChunkDone(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }    @Override   public void onMerge(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());   }    @Override   public void onDone(HttpDownInfo httpDownInfo) throws Exception {     TaskInfo taskInfo = httpDownInfo.getTaskInfo();     //更改任务下载状态为已完成     ContentManager.DOWN.save();     //删除任务进度记录文件     synchronized (taskInfo) {       FileUtil.deleteIfExists(taskInfo.buildTaskRecordFilePath());     }     ContentManager.WS.sendMsg(ContentManager.DOWN.buildWsForm());     NewTaskForm taskForm = NewTaskForm.parse(httpDownInfo);     if (taskForm.isUnzip()) {       if (BdyZip.isBdyZip(taskInfo.buildTaskFilePath())) {         WsForm wsForm = new WsForm(WsDataType.UNZIP_NEW, new HashMap<String, String>() {           {             put("filePath", taskInfo.buildTaskFilePath());             put("toPath", taskForm.getUnzipPath());           }         });         ContentManager.WS.sendMsg(wsForm);       }     }   }    public static void main(String[] args) throws IOException { //  System.setProperty("io.netty.noPreferDirect","true"); //    System.setProperty("io.netty.allocator.numDirectArenas","0");    /* while (true){       ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer(1024*1024*128);       byteBuf.release();     }*/     File file = new File("c:/test.txt");     try {       file.createNewFile();     } catch (IOException e) {       System.out.println(e.getStackTrace()[0].getMethodName());       e.printStackTrace();     }  //      System.out.println(byteBuf.getClass());   } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> ui : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> lee : Folder]
						[NT -> study : Folder]
							[NT -> down : Folder]
								[NT -> dispatch : Folder]
									[NT -> HttpDownHandleCallback.java.merge : .java.merge-File]
										[T -> HttpDownHandleCallback.java : .java-Content "package lee.study.down.dispatch;  import lee.study.down.content.ContentManager; import lee.study.down.model.ChunkInfo; import lee.study.down.model.HttpDownInfo; import lee.study.down.model.TaskInfo; import lee.study.down.util.FileUtil;  public class HttpDownHandleCallback implements HttpDownCallback {    @Override   public void onStart(HttpDownInfo httpDownInfo) throws Exception {     //保存下载记录     ContentManager.DOWN.save();     ContentManager.WS.sendMsg();   }    @Override   public void onChunkStart(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }    @Override   public void onProgress(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }    @Override   public void onPause(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }    @Override   public void onContinue(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }    @Override   public void onError(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo, Throwable cause) {     ContentManager.WS.sendMsg();   }    @Override   public void onChunkDone(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }    @Override   public void onMerge(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }    @Override   public void onDone(HttpDownInfo httpDownInfo) throws Exception {     TaskInfo taskInfo = httpDownInfo.getTaskInfo();     //更改任务下载状态为已完成     ContentManager.DOWN.save();     //删除任务进度记录文件     synchronized (taskInfo) {       FileUtil.deleteIfExists(taskInfo.buildTaskRecordFilePath());     }     ContentManager.WS.sendMsg();   } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> ui : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> lee : Folder]
						[NT -> study : Folder]
							[NT -> down : Folder]
								[NT -> dispatch : Folder]
									[NT -> HttpDownHandleCallback.java.merge : .java.merge-File]
										[T -> HttpDownHandleCallback.java : .java-Content "package lee.study.down.dispatch;  import lee.study.down.content.ContentManager; import lee.study.down.model.ChunkInfo; import lee.study.down.model.HttpDownInfo; import lee.study.down.model.TaskInfo; import lee.study.down.util.FileUtil;  public class HttpDownHandleCallback implements HttpDownCallback {    @Override   public void onStart(HttpDownInfo httpDownInfo) throws Exception {     //保存下载记录     ContentManager.DOWN.save();     ContentManager.WS.sendMsg();   }    @Override   public void onChunkStart(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }    @Override   public void onProgress(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) throws Exception {    }    @Override   public void onPause(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }    @Override   public void onContinue(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.WS.sendMsg();   }    @Override   public void onError(HttpDownInfo httpDownInfo, Throwable cause) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }    @Override   public void onChunkError(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo, Throwable cause) {     ContentManager.WS.sendMsg();   }    @Override   public void onChunkDone(HttpDownInfo httpDownInfo, ChunkInfo chunkInfo) {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }    @Override   public void onMerge(HttpDownInfo httpDownInfo) throws Exception {     ContentManager.DOWN.saveTask(httpDownInfo.getTaskInfo().getId());     ContentManager.WS.sendMsg();   }    @Override   public void onDone(HttpDownInfo httpDownInfo) throws Exception {     TaskInfo taskInfo = httpDownInfo.getTaskInfo();     //更改任务下载状态为已完成     ContentManager.DOWN.save();     //删除任务进度记录文件     synchronized (taskInfo) {       FileUtil.deleteIfExists(taskInfo.buildTaskRecordFilePath());     }     ContentManager.WS.sendMsg();   } } " compose:StringConcatenation merge: LineBased]
