Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/bytetcc-core/src/main/java/org/bytesoft/bytetcc/TransactionCoordinator.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/bytetcc-core/src/main/java/org/bytesoft/bytetcc/TransactionCoordinator.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/bytetcc-core/src/main/java/org/bytesoft/bytetcc/TransactionCoordinator.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/bytetcc-core/src/main/java/org/bytesoft/bytetcc/TransactionCoordinator.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/bytetcc-core/src/main/java/org/bytesoft/bytetcc/TransactionCoordinator.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/bytetcc-core/src/main/java/org/bytesoft/bytetcc/TransactionCoordinator.java
[NT -> left : Feature]
	[NT -> bytetcc-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> bytesoft : Folder]
							[NT -> bytetcc : Folder]
								[NT -> TransactionCoordinator.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package org.bytesoft.bytetcc;" compose:Replacement merge: Default]
										[T -> javax.transaction.HeuristicMixedException{ImportPackage} : ImportDeclaration "import javax.transaction.HeuristicMixedException;" compose:Replacement merge: Default]
										[T -> javax.transaction.HeuristicRollbackException{ImportPackage} : ImportDeclaration "import javax.transaction.HeuristicRollbackException;" compose:Replacement merge: Default]
										[T -> javax.transaction.RollbackException{ImportPackage} : ImportDeclaration "import javax.transaction.RollbackException;" compose:Replacement merge: Default]
										[T -> javax.transaction.SystemException{ImportPackage} : ImportDeclaration "import javax.transaction.SystemException;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.XAException{ImportPackage} : ImportDeclaration "import javax.transaction.xa.XAException;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.XAResource{ImportPackage} : ImportDeclaration "import javax.transaction.xa.XAResource;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.Xid{ImportPackage} : ImportDeclaration "import javax.transaction.xa.Xid;" compose:Replacement merge: Default]
										[T -> org.apache.log4j.Logger{ImportPackage} : ImportDeclaration "import org.apache.log4j.Logger;" compose:Replacement merge: Default]
										[T -> org.bytesoft.bytejta.supports.wire.RemoteCoordinator{ImportPackage} : ImportDeclaration "import org.bytesoft.bytejta.supports.wire.RemoteCoordinator;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.CompensableBeanFactory{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.CompensableBeanFactory;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.CompensableTransaction{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.CompensableTransaction;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.aware.CompensableBeanFactoryAware{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.aware.CompensableBeanFactoryAware;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.Transaction{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.Transaction;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionContext{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionContext;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionManager{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionManager;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionRepository{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionRepository;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.internal.TransactionException{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.internal.TransactionException;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.xa.TransactionXid{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.xa.TransactionXid;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.xa.XidFactory{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.xa.XidFactory;" compose:Replacement merge: Default]
										[NT -> TransactionCoordinator : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> TransactionCoordinator : Id "TransactionCoordinator" compose:Replacement merge: Default]
											[T -> ImplList : ImplementsList "implements RemoteCoordinator, CompensableBeanFactoryAware" compose:Replacement merge: SemanticConflict]
											[T -> logger : FieldDecl "static final Logger logger = Logger.getLogger(TransactionCoordinator.class.getSimpleName());" compose:Replacement merge: SemanticConflict]
											[T -> beanFactory : FieldDecl "private CompensableBeanFactory beanFactory;" compose:Replacement merge: SemanticConflict]
											[T -> getIdentifier({FormalParametersInternal}) : MethodDecl "public String getIdentifier() {   throw new IllegalStateException();  }" compose:Replacement merge: LineBased]
											[T -> getTransactionQuietly({FormalParametersInternal}) : MethodDecl "public Transaction getTransactionQuietly() {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }" compose:Replacement merge: LineBased]
											[T -> start(TransactionContext-TransactionContext-int-int) : MethodDecl "public Transaction start(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   if (transactionManager.getTransactionQuietly() != null) {    throw new TransactionException(XAException.XAER_PROTO);   }    TransactionXid globalXid = transactionContext.getXid();   Transaction transaction = transactionRepository.getTransaction(globalXid);   if (transaction == null) {    transaction = new CompensableTransactionImpl(transactionContext);    ((CompensableTransactionImpl) transaction).setBeanFactory(this.beanFactory);    transactionRepository.putTransaction(globalXid, transaction);   }   transactionManager.associateThread(transaction);   return transaction;  }" compose:Replacement merge: LineBased]
											[T -> end(TransactionContext-TransactionContext-int-int) : MethodDecl "public Transaction end(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }" compose:Replacement merge: LineBased]
											[T -> start(Xid-Xid-int-int) : MethodDecl "public void start(Xid xid, int flags) throws XAException {  }" compose:Replacement merge: LineBased]
											[T -> end(Xid-Xid-int-int) : MethodDecl "public void end(Xid xid, int flags) throws XAException {  }" compose:Replacement merge: LineBased]
											[T -> commit(Xid-Xid-boolean-boolean) : MethodDecl "public void commit(Xid xid, boolean onePhase) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.commit();    transactionRepository.removeErrorTransaction(globalXid);    transactionRepository.removeTransaction(globalXid);   } catch (SecurityException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (HeuristicMixedException ex) {    throw new XAException(XAException.XA_HEURMIX);   } catch (HeuristicRollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }" compose:Replacement merge: LineBased]
											[T -> forget(Xid-Xid) : MethodDecl "public void forget(Xid xid) throws XAException {  }" compose:Replacement merge: LineBased]
											[T -> getTransactionTimeout({FormalParametersInternal}) : MethodDecl "public int getTransactionTimeout() throws XAException {   return 0;  }" compose:Replacement merge: LineBased]
											[T -> isSameRM(XAResource-XAResource) : MethodDecl "public boolean isSameRM(XAResource xares) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }" compose:Replacement merge: LineBased]
											[T -> prepare(Xid-Xid) : MethodDecl "public int prepare(Xid xid) throws XAException {   return XAResource.XA_RDONLY;  }" compose:Replacement merge: LineBased]
											[T -> recover(int-int) : MethodDecl "public Xid[] recover(int flag) throws XAException {   return new Xid[0];  }" compose:Replacement merge: LineBased]
											[T -> rollback(Xid-Xid) : MethodDecl "public void rollback(Xid xid) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.rollback();    transactionRepository.removeErrorTransaction(globalXid);    transactionRepository.removeTransaction(globalXid);   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }" compose:Replacement merge: LineBased]
											[T -> setTransactionTimeout(int-int) : MethodDecl "public boolean setTransactionTimeout(int seconds) throws XAException {   return false;  }" compose:Replacement merge: LineBased]
											[T -> setBeanFactory(CompensableBeanFactory-CompensableBeanFactory) : MethodDecl "public void setBeanFactory(CompensableBeanFactory tbf) {   this.beanFactory = tbf;  }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> bytetcc-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> bytesoft : Folder]
							[NT -> bytetcc : Folder]
								[NT -> TransactionCoordinator.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package org.bytesoft.bytetcc;" compose:Replacement merge: Default]
										[T -> javax.transaction.HeuristicMixedException{ImportPackage} : ImportDeclaration "import javax.transaction.HeuristicMixedException;" compose:Replacement merge: Default]
										[T -> javax.transaction.HeuristicRollbackException{ImportPackage} : ImportDeclaration "import javax.transaction.HeuristicRollbackException;" compose:Replacement merge: Default]
										[T -> javax.transaction.RollbackException{ImportPackage} : ImportDeclaration "import javax.transaction.RollbackException;" compose:Replacement merge: Default]
										[T -> javax.transaction.SystemException{ImportPackage} : ImportDeclaration "import javax.transaction.SystemException;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.XAException{ImportPackage} : ImportDeclaration "import javax.transaction.xa.XAException;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.XAResource{ImportPackage} : ImportDeclaration "import javax.transaction.xa.XAResource;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.Xid{ImportPackage} : ImportDeclaration "import javax.transaction.xa.Xid;" compose:Replacement merge: Default]
										[T -> org.apache.log4j.Logger{ImportPackage} : ImportDeclaration "import org.apache.log4j.Logger;" compose:Replacement merge: Default]
										[T -> org.bytesoft.bytejta.supports.wire.RemoteCoordinator{ImportPackage} : ImportDeclaration "import org.bytesoft.bytejta.supports.wire.RemoteCoordinator;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.CompensableBeanFactory{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.CompensableBeanFactory;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.CompensableTransaction{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.CompensableTransaction;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.aware.CompensableBeanFactoryAware{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.aware.CompensableBeanFactoryAware;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.Transaction{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.Transaction;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionContext{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionContext;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionManager{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionManager;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionRepository{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionRepository;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.internal.TransactionException{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.internal.TransactionException;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.xa.TransactionXid{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.xa.TransactionXid;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.xa.XidFactory{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.xa.XidFactory;" compose:Replacement merge: Default]
										[NT -> TransactionCoordinator : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> TransactionCoordinator : Id "TransactionCoordinator" compose:Replacement merge: Default]
											[T -> ImplList : ImplementsList "implements RemoteCoordinator, CompensableBeanFactoryAware" compose:Replacement merge: SemanticConflict]
											[T -> logger : FieldDecl "static final Logger logger = Logger.getLogger(TransactionCoordinator.class.getSimpleName());" compose:Replacement merge: SemanticConflict]
											[T -> beanFactory : FieldDecl "private CompensableBeanFactory beanFactory;" compose:Replacement merge: SemanticConflict]
											[T -> getIdentifier({FormalParametersInternal}) : MethodDecl "public String getIdentifier() {   throw new IllegalStateException();  }" compose:Replacement merge: LineBased]
											[T -> getTransactionQuietly({FormalParametersInternal}) : MethodDecl "public Transaction getTransactionQuietly() {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }" compose:Replacement merge: LineBased]
											[T -> start(TransactionContext-TransactionContext-int-int) : MethodDecl "public Transaction start(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   if (transactionManager.getTransactionQuietly() != null) {    throw new TransactionException(XAException.XAER_PROTO);   }    TransactionXid globalXid = transactionContext.getXid();   Transaction transaction = transactionRepository.getTransaction(globalXid);   if (transaction == null) {    transaction = new CompensableTransactionImpl(transactionContext);    ((CompensableTransactionImpl) transaction).setBeanFactory(this.beanFactory);    transactionRepository.putTransaction(globalXid, transaction);   }   transactionManager.associateThread(transaction);   return transaction;  }" compose:Replacement merge: LineBased]
											[T -> end(TransactionContext-TransactionContext-int-int) : MethodDecl "public Transaction end(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }" compose:Replacement merge: LineBased]
											[T -> start(Xid-Xid-int-int) : MethodDecl "public void start(Xid xid, int flags) throws XAException {  }" compose:Replacement merge: LineBased]
											[T -> end(Xid-Xid-int-int) : MethodDecl "public void end(Xid xid, int flags) throws XAException {  }" compose:Replacement merge: LineBased]
											[T -> commit(Xid-Xid-boolean-boolean) : MethodDecl "public void commit(Xid xid, boolean onePhase) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA); // TODO   }   try {    transaction.commit();   } catch (SecurityException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (IllegalStateException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (RollbackException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (HeuristicMixedException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (HeuristicRollbackException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (SystemException e) {    // TODO Auto-generated catch block    e.printStackTrace();   }  }" compose:Replacement merge: LineBased]
											[T -> forget(Xid-Xid) : MethodDecl "public void forget(Xid xid) throws XAException {  }" compose:Replacement merge: LineBased]
											[T -> getTransactionTimeout({FormalParametersInternal}) : MethodDecl "public int getTransactionTimeout() throws XAException {   return 0;  }" compose:Replacement merge: LineBased]
											[T -> isSameRM(XAResource-XAResource) : MethodDecl "public boolean isSameRM(XAResource xares) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }" compose:Replacement merge: LineBased]
											[T -> prepare(Xid-Xid) : MethodDecl "public int prepare(Xid xid) throws XAException {   return XAResource.XA_RDONLY;  }" compose:Replacement merge: LineBased]
											[T -> recover(int-int) : MethodDecl "public Xid[] recover(int flag) throws XAException {   return new Xid[0];  }" compose:Replacement merge: LineBased]
											[T -> rollback(Xid-Xid) : MethodDecl "public void rollback(Xid xid) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA); // TODO   }   try {    transaction.rollback();   } catch (IllegalStateException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (SystemException e) {    // TODO Auto-generated catch block    e.printStackTrace();   }  }" compose:Replacement merge: LineBased]
											[T -> setTransactionTimeout(int-int) : MethodDecl "public boolean setTransactionTimeout(int seconds) throws XAException {   return false;  }" compose:Replacement merge: LineBased]
											[T -> setBeanFactory(CompensableBeanFactory-CompensableBeanFactory) : MethodDecl "public void setBeanFactory(CompensableBeanFactory tbf) {   this.beanFactory = tbf;  }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> bytetcc-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> bytesoft : Folder]
							[NT -> bytetcc : Folder]
								[NT -> TransactionCoordinator.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package org.bytesoft.bytetcc;" compose:Replacement merge: Default]
										[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
										[T -> javax.transaction.HeuristicMixedException{ImportPackage} : ImportDeclaration "import javax.transaction.HeuristicMixedException;" compose:Replacement merge: Default]
										[T -> javax.transaction.HeuristicRollbackException{ImportPackage} : ImportDeclaration "import javax.transaction.HeuristicRollbackException;" compose:Replacement merge: Default]
										[T -> javax.transaction.RollbackException{ImportPackage} : ImportDeclaration "import javax.transaction.RollbackException;" compose:Replacement merge: Default]
										[T -> javax.transaction.SystemException{ImportPackage} : ImportDeclaration "import javax.transaction.SystemException;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.XAException{ImportPackage} : ImportDeclaration "import javax.transaction.xa.XAException;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.XAResource{ImportPackage} : ImportDeclaration "import javax.transaction.xa.XAResource;" compose:Replacement merge: Default]
										[T -> javax.transaction.xa.Xid{ImportPackage} : ImportDeclaration "import javax.transaction.xa.Xid;" compose:Replacement merge: Default]
										[T -> org.apache.log4j.Logger{ImportPackage} : ImportDeclaration "import org.apache.log4j.Logger;" compose:Replacement merge: Default]
										[T -> org.bytesoft.bytejta.supports.wire.RemoteCoordinator{ImportPackage} : ImportDeclaration "import org.bytesoft.bytejta.supports.wire.RemoteCoordinator;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.CompensableBeanFactory{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.CompensableBeanFactory;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.CompensableTransaction{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.CompensableTransaction;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.archive.TransactionArchive{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.archive.TransactionArchive;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.aware.CompensableBeanFactoryAware{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.aware.CompensableBeanFactoryAware;" compose:Replacement merge: Default]
										[T -> org.bytesoft.compensable.logger.CompensableLogger{ImportPackage} : ImportDeclaration "import org.bytesoft.compensable.logger.CompensableLogger;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.Transaction{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.Transaction;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionContext{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionContext;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionManager{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionManager;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.TransactionRepository{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.TransactionRepository;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.internal.TransactionException{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.internal.TransactionException;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.xa.TransactionXid{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.xa.TransactionXid;" compose:Replacement merge: Default]
										[T -> org.bytesoft.transaction.xa.XidFactory{ImportPackage} : ImportDeclaration "import org.bytesoft.transaction.xa.XidFactory;" compose:Replacement merge: Default]
										[NT -> TransactionCoordinator : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> TransactionCoordinator : Id "TransactionCoordinator" compose:Replacement merge: Default]
											[T -> ImplList : ImplementsList "implements RemoteCoordinator, CompensableBeanFactoryAware" compose:Replacement merge: SemanticConflict]
											[T -> logger : FieldDecl "static final Logger logger = Logger.getLogger(TransactionCoordinator.class.getSimpleName());" compose:Replacement merge: SemanticConflict]
											[T -> beanFactory : FieldDecl "private CompensableBeanFactory beanFactory;" compose:Replacement merge: SemanticConflict]
											[T -> getIdentifier({FormalParametersInternal}) : MethodDecl "public String getIdentifier() {   throw new IllegalStateException();  }" compose:Replacement merge: LineBased]
											[T -> getTransactionQuietly({FormalParametersInternal}) : MethodDecl "public Transaction getTransactionQuietly() {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }" compose:Replacement merge: LineBased]
											[T -> start(TransactionContext-TransactionContext-int-int) : MethodDecl "public Transaction start(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   if (transactionManager.getTransactionQuietly() != null) {    throw new TransactionException(XAException.XAER_PROTO);   }    TransactionXid globalXid = transactionContext.getXid();   Transaction transaction = transactionRepository.getTransaction(globalXid);   if (transaction == null) {    transaction = new CompensableTransactionImpl(transactionContext);    ((CompensableTransactionImpl) transaction).setBeanFactory(this.beanFactory);    transactionRepository.putTransaction(globalXid, transaction);   }   transactionManager.associateThread(transaction);   return transaction;  }" compose:Replacement merge: LineBased]
											[T -> end(TransactionContext-TransactionContext-int-int) : MethodDecl "public Transaction end(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }" compose:Replacement merge: LineBased]
											[T -> start(Xid-Xid-int-int) : MethodDecl "public void start(Xid xid, int flags) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }" compose:Replacement merge: LineBased]
											[T -> end(Xid-Xid-int-int) : MethodDecl "public void end(Xid xid, int flags) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }" compose:Replacement merge: LineBased]
											[T -> commit(Xid-Xid-boolean-boolean) : MethodDecl "public void commit(Xid xid, boolean onePhase) throws XAException {   if (xid == null) {    throw new XAException(XAException.XAER_INVAL);   } else if (onePhase == false) {    throw new XAException(XAException.XAER_RMERR);   }   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.commit();   } catch (SecurityException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (HeuristicMixedException ex) {    throw new XAException(XAException.XA_HEURMIX);   } catch (HeuristicRollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }" compose:Replacement merge: LineBased]
											[T -> forget(Xid-Xid) : MethodDecl "public void forget(Xid xid) throws XAException {   if (xid == null) {    throw new XAException(XAException.XAER_INVAL);   }   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   CompensableLogger transactionLogger = this.beanFactory.getCompensableLogger();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository     .removeErrorTransaction(globalXid);   if (transaction != null) {    TransactionArchive archive = transaction.getTransactionArchive();    transactionLogger.deleteTransaction(archive);   }  }" compose:Replacement merge: LineBased]
											[T -> getTransactionTimeout({FormalParametersInternal}) : MethodDecl "public int getTransactionTimeout() throws XAException {   return 0;  }" compose:Replacement merge: LineBased]
											[T -> isSameRM(XAResource-XAResource) : MethodDecl "public boolean isSameRM(XAResource xares) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }" compose:Replacement merge: LineBased]
											[T -> prepare(Xid-Xid) : MethodDecl "public int prepare(Xid xid) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }" compose:Replacement merge: LineBased]
											[T -> recover(int-int) : MethodDecl "public Xid[] recover(int flag) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   List<Transaction> transactionList = transactionRepository.getErrorTransactionList();   Xid[] xidArray = new Xid[transactionList == null ? 0 : transactionList.size()];   for (int i = 0; i < xidArray.length; i++) {    Transaction transaction = transactionList.get(i);    TransactionContext transactionContext = transaction.getTransactionContext();    xidArray[i] = transactionContext.getXid();   }   return xidArray;  }" compose:Replacement merge: LineBased]
											[T -> rollback(Xid-Xid) : MethodDecl "public void rollback(Xid xid) throws XAException {   if (xid == null) {    throw new XAException(XAException.XAER_INVAL);   }   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.rollback();   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }" compose:Replacement merge: LineBased]
											[T -> setTransactionTimeout(int-int) : MethodDecl "public boolean setTransactionTimeout(int seconds) throws XAException {   return false;  }" compose:Replacement merge: LineBased]
											[T -> setBeanFactory(CompensableBeanFactory-CompensableBeanFactory) : MethodDecl "public void setBeanFactory(CompensableBeanFactory tbf) {   this.beanFactory = tbf;  }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> bytetcc-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> bytesoft : Folder]
							[NT -> bytetcc : Folder]
								[NT -> TransactionCoordinator.java.merge : .java.merge-File]
									[T -> TransactionCoordinator.java : .java-Content "/**  * Copyright 2014-2016 yangming.liu<bytefox@126.com>.  *  * This copyrighted material is made available to anyone wishing to use, modify,  * copy, or redistribute it subject to the terms and conditions of the GNU  * Lesser General Public License, as published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this distribution; if not, see <http://www.gnu.org/licenses/>.  */ package org.bytesoft.bytetcc;  import javax.transaction.HeuristicMixedException; import javax.transaction.HeuristicRollbackException; import javax.transaction.RollbackException; import javax.transaction.SystemException; import javax.transaction.xa.XAException; import javax.transaction.xa.XAResource; import javax.transaction.xa.Xid;  import org.apache.log4j.Logger; import org.bytesoft.bytejta.supports.wire.RemoteCoordinator; import org.bytesoft.compensable.CompensableBeanFactory; import org.bytesoft.compensable.CompensableTransaction; import org.bytesoft.compensable.aware.CompensableBeanFactoryAware; import org.bytesoft.transaction.Transaction; import org.bytesoft.transaction.TransactionContext; import org.bytesoft.transaction.TransactionManager; import org.bytesoft.transaction.TransactionRepository; import org.bytesoft.transaction.internal.TransactionException; import org.bytesoft.transaction.xa.TransactionXid; import org.bytesoft.transaction.xa.XidFactory;  public class TransactionCoordinator implements RemoteCoordinator, CompensableBeanFactoryAware {  static final Logger logger = Logger.getLogger(TransactionCoordinator.class.getSimpleName());   private CompensableBeanFactory beanFactory;   public String getIdentifier() {   throw new IllegalStateException();  }   public Transaction getTransactionQuietly() {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }   public Transaction start(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   if (transactionManager.getTransactionQuietly() != null) {    throw new TransactionException(XAException.XAER_PROTO);   }    TransactionXid globalXid = transactionContext.getXid();   Transaction transaction = transactionRepository.getTransaction(globalXid);   if (transaction == null) {    transaction = new CompensableTransactionImpl(transactionContext);    ((CompensableTransactionImpl) transaction).setBeanFactory(this.beanFactory);    transactionRepository.putTransaction(globalXid, transaction);   }   transactionManager.associateThread(transaction);   return transaction;  }   public Transaction end(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }   public void start(Xid xid, int flags) throws XAException {  }   public void end(Xid xid, int flags) throws XAException {  }   public void commit(Xid xid, boolean onePhase) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.commit();    transactionRepository.removeErrorTransaction(globalXid);    transactionRepository.removeTransaction(globalXid);   } catch (SecurityException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (HeuristicMixedException ex) {    throw new XAException(XAException.XA_HEURMIX);   } catch (HeuristicRollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }   public void forget(Xid xid) throws XAException {  }   public int getTransactionTimeout() throws XAException {   return 0;  }   public boolean isSameRM(XAResource xares) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }   public int prepare(Xid xid) throws XAException {   return XAResource.XA_RDONLY;  }   public Xid[] recover(int flag) throws XAException {   return new Xid[0];  }   public void rollback(Xid xid) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.rollback();    transactionRepository.removeErrorTransaction(globalXid);    transactionRepository.removeTransaction(globalXid);   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }   public boolean setTransactionTimeout(int seconds) throws XAException {   return false;  }   public void setBeanFactory(CompensableBeanFactory tbf) {   this.beanFactory = tbf;  }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> bytetcc-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> bytesoft : Folder]
							[NT -> bytetcc : Folder]
								[NT -> TransactionCoordinator.java.merge : .java.merge-File]
									[T -> TransactionCoordinator.java : .java-Content "/**  * Copyright 2014-2016 yangming.liu<bytefox@126.com>.  *  * This copyrighted material is made available to anyone wishing to use, modify,  * copy, or redistribute it subject to the terms and conditions of the GNU  * Lesser General Public License, as published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this distribution; if not, see <http://www.gnu.org/licenses/>.  */ package org.bytesoft.bytetcc;  import javax.transaction.HeuristicMixedException; import javax.transaction.HeuristicRollbackException; import javax.transaction.RollbackException; import javax.transaction.SystemException; import javax.transaction.xa.XAException; import javax.transaction.xa.XAResource; import javax.transaction.xa.Xid;  import org.apache.log4j.Logger; import org.bytesoft.bytejta.supports.wire.RemoteCoordinator; import org.bytesoft.compensable.CompensableBeanFactory; import org.bytesoft.compensable.CompensableTransaction; import org.bytesoft.compensable.aware.CompensableBeanFactoryAware; import org.bytesoft.transaction.Transaction; import org.bytesoft.transaction.TransactionContext; import org.bytesoft.transaction.TransactionManager; import org.bytesoft.transaction.TransactionRepository; import org.bytesoft.transaction.internal.TransactionException; import org.bytesoft.transaction.xa.TransactionXid; import org.bytesoft.transaction.xa.XidFactory;  public class TransactionCoordinator implements RemoteCoordinator, CompensableBeanFactoryAware {  static final Logger logger = Logger.getLogger(TransactionCoordinator.class.getSimpleName());   private CompensableBeanFactory beanFactory;   public String getIdentifier() {   throw new IllegalStateException();  }   public Transaction getTransactionQuietly() {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }   public Transaction start(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   if (transactionManager.getTransactionQuietly() != null) {    throw new TransactionException(XAException.XAER_PROTO);   }    TransactionXid globalXid = transactionContext.getXid();   Transaction transaction = transactionRepository.getTransaction(globalXid);   if (transaction == null) {    transaction = new CompensableTransactionImpl(transactionContext);    ((CompensableTransactionImpl) transaction).setBeanFactory(this.beanFactory);    transactionRepository.putTransaction(globalXid, transaction);   }   transactionManager.associateThread(transaction);   return transaction;  }   public Transaction end(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }   public void start(Xid xid, int flags) throws XAException {  }   public void end(Xid xid, int flags) throws XAException {  }   public void commit(Xid xid, boolean onePhase) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA); // TODO   }   try {    transaction.commit();   } catch (SecurityException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (IllegalStateException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (RollbackException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (HeuristicMixedException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (HeuristicRollbackException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (SystemException e) {    // TODO Auto-generated catch block    e.printStackTrace();   }  }   public void forget(Xid xid) throws XAException {  }   public int getTransactionTimeout() throws XAException {   return 0;  }   public boolean isSameRM(XAResource xares) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }   public int prepare(Xid xid) throws XAException {   return XAResource.XA_RDONLY;  }   public Xid[] recover(int flag) throws XAException {   return new Xid[0];  }   public void rollback(Xid xid) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA); // TODO   }   try {    transaction.rollback();   } catch (IllegalStateException e) {    // TODO Auto-generated catch block    e.printStackTrace();   } catch (SystemException e) {    // TODO Auto-generated catch block    e.printStackTrace();   }  }   public boolean setTransactionTimeout(int seconds) throws XAException {   return false;  }   public void setBeanFactory(CompensableBeanFactory tbf) {   this.beanFactory = tbf;  }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> bytetcc-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> bytesoft : Folder]
							[NT -> bytetcc : Folder]
								[NT -> TransactionCoordinator.java.merge : .java.merge-File]
									[T -> TransactionCoordinator.java : .java-Content "/**  * Copyright 2014-2016 yangming.liu<bytefox@126.com>.  *  * This copyrighted material is made available to anyone wishing to use, modify,  * copy, or redistribute it subject to the terms and conditions of the GNU  * Lesser General Public License, as published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this distribution; if not, see <http://www.gnu.org/licenses/>.  */ package org.bytesoft.bytetcc;  import java.util.List;  import javax.transaction.HeuristicMixedException; import javax.transaction.HeuristicRollbackException; import javax.transaction.RollbackException; import javax.transaction.SystemException; import javax.transaction.xa.XAException; import javax.transaction.xa.XAResource; import javax.transaction.xa.Xid;  import org.apache.log4j.Logger; import org.bytesoft.bytejta.supports.wire.RemoteCoordinator; import org.bytesoft.compensable.CompensableBeanFactory; import org.bytesoft.compensable.CompensableTransaction; import org.bytesoft.compensable.archive.TransactionArchive; import org.bytesoft.compensable.aware.CompensableBeanFactoryAware; import org.bytesoft.compensable.logger.CompensableLogger; import org.bytesoft.transaction.Transaction; import org.bytesoft.transaction.TransactionContext; import org.bytesoft.transaction.TransactionManager; import org.bytesoft.transaction.TransactionRepository; import org.bytesoft.transaction.internal.TransactionException; import org.bytesoft.transaction.xa.TransactionXid; import org.bytesoft.transaction.xa.XidFactory;  public class TransactionCoordinator implements RemoteCoordinator, CompensableBeanFactoryAware {  static final Logger logger = Logger.getLogger(TransactionCoordinator.class.getSimpleName());   private CompensableBeanFactory beanFactory;   public String getIdentifier() {   throw new IllegalStateException();  }   public Transaction getTransactionQuietly() {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }   public Transaction start(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   if (transactionManager.getTransactionQuietly() != null) {    throw new TransactionException(XAException.XAER_PROTO);   }    TransactionXid globalXid = transactionContext.getXid();   Transaction transaction = transactionRepository.getTransaction(globalXid);   if (transaction == null) {    transaction = new CompensableTransactionImpl(transactionContext);    ((CompensableTransactionImpl) transaction).setBeanFactory(this.beanFactory);    transactionRepository.putTransaction(globalXid, transaction);   }   transactionManager.associateThread(transaction);   return transaction;  }   public Transaction end(TransactionContext transactionContext, int flags) throws TransactionException {   TransactionManager transactionManager = this.beanFactory.getTransactionManager();   return transactionManager.getTransactionQuietly();  }   public void start(Xid xid, int flags) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }   public void end(Xid xid, int flags) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }   public void commit(Xid xid, boolean onePhase) throws XAException {   if (xid == null) {    throw new XAException(XAException.XAER_INVAL);   } else if (onePhase == false) {    throw new XAException(XAException.XAER_RMERR);   }   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.commit();   } catch (SecurityException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (HeuristicMixedException ex) {    throw new XAException(XAException.XA_HEURMIX);   } catch (HeuristicRollbackException ex) {    throw new XAException(XAException.XA_HEURRB);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }   public void forget(Xid xid) throws XAException {   if (xid == null) {    throw new XAException(XAException.XAER_INVAL);   }   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   CompensableLogger transactionLogger = this.beanFactory.getCompensableLogger();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository     .removeErrorTransaction(globalXid);   if (transaction != null) {    TransactionArchive archive = transaction.getTransactionArchive();    transactionLogger.deleteTransaction(archive);   }  }   public int getTransactionTimeout() throws XAException {   return 0;  }   public boolean isSameRM(XAResource xares) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }   public int prepare(Xid xid) throws XAException {   throw new XAException(XAException.XAER_RMERR);  }   public Xid[] recover(int flag) throws XAException {   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   List<Transaction> transactionList = transactionRepository.getErrorTransactionList();   Xid[] xidArray = new Xid[transactionList == null ? 0 : transactionList.size()];   for (int i = 0; i < xidArray.length; i++) {    Transaction transaction = transactionList.get(i);    TransactionContext transactionContext = transaction.getTransactionContext();    xidArray[i] = transactionContext.getXid();   }   return xidArray;  }   public void rollback(Xid xid) throws XAException {   if (xid == null) {    throw new XAException(XAException.XAER_INVAL);   }   TransactionRepository transactionRepository = this.beanFactory.getTransactionRepository();   XidFactory xidFactory = this.beanFactory.getCompensableXidFactory();   TransactionXid globalXid = xidFactory.createGlobalXid(xid.getGlobalTransactionId());   CompensableTransaction transaction = (CompensableTransaction) transactionRepository.getTransaction(globalXid);   if (transaction == null) {    throw new XAException(XAException.XAER_NOTA);   }   try {    transaction.rollback();   } catch (IllegalStateException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (SystemException ex) {    throw new XAException(XAException.XAER_RMERR);   } catch (RuntimeException ex) {    throw new XAException(XAException.XAER_RMERR);   }  }   public boolean setTransactionTimeout(int seconds) throws XAException {   return false;  }   public void setBeanFactory(CompensableBeanFactory tbf) {   this.beanFactory = tbf;  }  } " compose:StringConcatenation merge: LineBased]
