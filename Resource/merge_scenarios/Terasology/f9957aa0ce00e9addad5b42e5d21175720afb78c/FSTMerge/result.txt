Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/engine/src/main/java/org/terasology/world/generator/plugin/TempWorldGeneratorPluginLibrary.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/engine/src/main/java/org/terasology/world/generator/plugin/TempWorldGeneratorPluginLibrary.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/engine/src/main/java/org/terasology/world/generator/plugin/TempWorldGeneratorPluginLibrary.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/engine/src/main/java/org/terasology/world/generator/plugin/TempWorldGeneratorPluginLibrary.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/engine/src/main/java/org/terasology/world/generator/plugin/TempWorldGeneratorPluginLibrary.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/engine/src/main/java/org/terasology/world/generator/plugin/TempWorldGeneratorPluginLibrary.java
[NT -> left : Feature]
	[NT -> engine : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> terasology : Folder]
							[NT -> world : Folder]
								[NT -> generator : Folder]
									[NT -> plugin : Folder]
										[NT -> TempWorldGeneratorPluginLibrary.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.terasology.world.generator.plugin;" compose:Replacement merge: Default]
												[T -> org.terasology.module.ModuleEnvironment{ImportPackage} : ImportDeclaration "import org.terasology.module.ModuleEnvironment;" compose:Replacement merge: Default]
												[T -> org.terasology.reflection.copy.CopyStrategyLibrary{ImportPackage} : ImportDeclaration "import org.terasology.reflection.copy.CopyStrategyLibrary;" compose:Replacement merge: Default]
												[T -> org.terasology.reflection.reflect.ReflectFactory{ImportPackage} : ImportDeclaration "import org.terasology.reflection.reflect.ReflectFactory;" compose:Replacement merge: Default]
												[T -> org.terasology.registry.CoreRegistry{ImportPackage} : ImportDeclaration "import org.terasology.registry.CoreRegistry;" compose:Replacement merge: Default]
												[NT -> TempWorldGeneratorPluginLibrary : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> TempWorldGeneratorPluginLibrary : Id "TempWorldGeneratorPluginLibrary" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends DefaultWorldGeneratorPluginLibrary" compose:Replacement merge: Default]
													[T -> TempWorldGeneratorPluginLibrary(ModuleEnvironment-ModuleEnvironment) : ConstructorDecl "public TempWorldGeneratorPluginLibrary(ModuleEnvironment environment) {         super(environment, CoreRegistry.get(ReflectFactory.class), CoreRegistry.get(CopyStrategyLibrary.class));     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> engine : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> terasology : Folder]
							[NT -> world : Folder]
								[NT -> generator : Folder]
									[NT -> plugin : Folder]
										[NT -> TempWorldGeneratorPluginLibrary.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.terasology.world.generator.plugin;" compose:Replacement merge: Default]
												[T -> java.util.Set{ImportPackage} : ImportDeclaration "import java.util.Set;" compose:Replacement merge: Default]
												[T -> org.terasology.asset.AssetManager{ImportPackage} : ImportDeclaration "import org.terasology.asset.AssetManager;" compose:Replacement merge: Default]
												[T -> org.terasology.config.Config{ImportPackage} : ImportDeclaration "import org.terasology.config.Config;" compose:Replacement merge: Default]
												[T -> org.terasology.engine.module.ModuleManager{ImportPackage} : ImportDeclaration "import org.terasology.engine.module.ModuleManager;" compose:Replacement merge: Default]
												[T -> org.terasology.module.DependencyInfo{ImportPackage} : ImportDeclaration "import org.terasology.module.DependencyInfo;" compose:Replacement merge: Default]
												[T -> org.terasology.module.Module{ImportPackage} : ImportDeclaration "import org.terasology.module.Module;" compose:Replacement merge: Default]
												[T -> org.terasology.module.ModuleEnvironment{ImportPackage} : ImportDeclaration "import org.terasology.module.ModuleEnvironment;" compose:Replacement merge: Default]
												[T -> org.terasology.naming.Name{ImportPackage} : ImportDeclaration "import org.terasology.naming.Name;" compose:Replacement merge: Default]
												[T -> org.terasology.reflection.copy.CopyStrategyLibrary{ImportPackage} : ImportDeclaration "import org.terasology.reflection.copy.CopyStrategyLibrary;" compose:Replacement merge: Default]
												[T -> org.terasology.reflection.reflect.ReflectFactory{ImportPackage} : ImportDeclaration "import org.terasology.reflection.reflect.ReflectFactory;" compose:Replacement merge: Default]
												[T -> org.terasology.registry.CoreRegistry{ImportPackage} : ImportDeclaration "import org.terasology.registry.CoreRegistry;" compose:Replacement merge: Default]
												[T -> com.google.common.collect.Sets{ImportPackage} : ImportDeclaration "import com.google.common.collect.Sets;" compose:Replacement merge: Default]
												[NT -> TempWorldGeneratorPluginLibrary : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> TempWorldGeneratorPluginLibrary : Id "TempWorldGeneratorPluginLibrary" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends DefaultWorldGeneratorPluginLibrary" compose:Replacement merge: Default]
													[T -> TempWorldGeneratorPluginLibrary({FormalParametersInternal}) : ConstructorDecl "public TempWorldGeneratorPluginLibrary() {         super(getEnv(), CoreRegistry.get(ReflectFactory.class), CoreRegistry.get(CopyStrategyLibrary.class));     }" compose:Replacement merge: LineBased]
													[T -> getEnv({FormalParametersInternal}) : MethodDecl "private static ModuleEnvironment getEnv() {         ModuleManager moduleManager = CoreRegistry.get(ModuleManager.class);         AssetManager assetManager = CoreRegistry.get(AssetManager.class);         Config config = CoreRegistry.get(Config.class);          Set<Module> selectedModules = Sets.newHashSet();         for (Name moduleName : config.getDefaultModSelection().listModules()) {             Module module = moduleManager.getRegistry().getLatestModuleVersion(moduleName);             if (module != null) {                 selectedModules.add(module);                 for (DependencyInfo dependencyInfo : module.getMetadata().getDependencies()) {                     selectedModules.add(moduleManager.getRegistry().getLatestModuleVersion(dependencyInfo.getId()));                 }             }         }         ModuleEnvironment environment = moduleManager.loadEnvironment(selectedModules, false);         assetManager.setEnvironment(environment);         return environment;     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> engine : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> terasology : Folder]
							[NT -> world : Folder]
								[NT -> generator : Folder]
									[NT -> plugin : Folder]
										[NT -> TempWorldGeneratorPluginLibrary.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.terasology.world.generator.plugin;" compose:Replacement merge: Default]
												[T -> com.google.common.collect.Sets{ImportPackage} : ImportDeclaration "import com.google.common.collect.Sets;" compose:Replacement merge: Default]
												[T -> org.terasology.asset.AssetManager{ImportPackage} : ImportDeclaration "import org.terasology.asset.AssetManager;" compose:Replacement merge: Default]
												[T -> org.terasology.config.Config{ImportPackage} : ImportDeclaration "import org.terasology.config.Config;" compose:Replacement merge: Default]
												[T -> org.terasology.context.Context{ImportPackage} : ImportDeclaration "import org.terasology.context.Context;" compose:Replacement merge: Default]
												[T -> org.terasology.engine.module.ModuleManager{ImportPackage} : ImportDeclaration "import org.terasology.engine.module.ModuleManager;" compose:Replacement merge: Default]
												[T -> org.terasology.module.DependencyInfo{ImportPackage} : ImportDeclaration "import org.terasology.module.DependencyInfo;" compose:Replacement merge: Default]
												[T -> org.terasology.module.Module{ImportPackage} : ImportDeclaration "import org.terasology.module.Module;" compose:Replacement merge: Default]
												[T -> org.terasology.module.ModuleEnvironment{ImportPackage} : ImportDeclaration "import org.terasology.module.ModuleEnvironment;" compose:Replacement merge: Default]
												[T -> org.terasology.naming.Name{ImportPackage} : ImportDeclaration "import org.terasology.naming.Name;" compose:Replacement merge: Default]
												[T -> java.util.Set{ImportPackage} : ImportDeclaration "import java.util.Set;" compose:Replacement merge: Default]
												[NT -> TempWorldGeneratorPluginLibrary : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> TempWorldGeneratorPluginLibrary : Id "TempWorldGeneratorPluginLibrary" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends DefaultWorldGeneratorPluginLibrary" compose:Replacement merge: Default]
													[T -> TempWorldGeneratorPluginLibrary(Context-Context) : ConstructorDecl "public TempWorldGeneratorPluginLibrary(Context context) {         super(getEnv(context), context);     }" compose:Replacement merge: LineBased]
													[T -> getEnv(Context-Context) : MethodDecl "private static ModuleEnvironment getEnv(Context context) {         ModuleManager moduleManager = context.get(ModuleManager.class);         AssetManager assetManager = context.get(AssetManager.class);         Config config = context.get(Config.class);          Set<Module> selectedModules = Sets.newHashSet();         for (Name moduleName : config.getDefaultModSelection().listModules()) {             Module module = moduleManager.getRegistry().getLatestModuleVersion(moduleName);             if (module != null) {                 selectedModules.add(module);                 for (DependencyInfo dependencyInfo : module.getMetadata().getDependencies()) {                     selectedModules.add(moduleManager.getRegistry().getLatestModuleVersion(dependencyInfo.getId()));                 }             }         }         ModuleEnvironment environment = moduleManager.loadEnvironment(selectedModules, false);         assetManager.setEnvironment(environment);         return environment;     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> engine : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> terasology : Folder]
							[NT -> world : Folder]
								[NT -> generator : Folder]
									[NT -> plugin : Folder]
										[NT -> TempWorldGeneratorPluginLibrary.java.merge : .java.merge-File]
											[T -> TempWorldGeneratorPluginLibrary.java : .java-Content "/*  * Copyright 2014 MovingBlocks  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.terasology.world.generator.plugin;  import org.terasology.module.ModuleEnvironment; import org.terasology.reflection.copy.CopyStrategyLibrary; import org.terasology.reflection.reflect.ReflectFactory; import org.terasology.registry.CoreRegistry;  /**  * A fake environment so that plugins can be loaded for configuration.  * @author Immortius  */ public class TempWorldGeneratorPluginLibrary extends DefaultWorldGeneratorPluginLibrary {      public TempWorldGeneratorPluginLibrary(ModuleEnvironment environment) {         super(environment, CoreRegistry.get(ReflectFactory.class), CoreRegistry.get(CopyStrategyLibrary.class));     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> engine : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> terasology : Folder]
							[NT -> world : Folder]
								[NT -> generator : Folder]
									[NT -> plugin : Folder]
										[NT -> TempWorldGeneratorPluginLibrary.java.merge : .java.merge-File]
											[T -> TempWorldGeneratorPluginLibrary.java : .java-Content "/*  * Copyright 2014 MovingBlocks  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.terasology.world.generator.plugin;  import java.util.Set;  import org.terasology.asset.AssetManager; import org.terasology.config.Config; import org.terasology.engine.module.ModuleManager; import org.terasology.module.DependencyInfo; import org.terasology.module.Module; import org.terasology.module.ModuleEnvironment; import org.terasology.naming.Name; import org.terasology.reflection.copy.CopyStrategyLibrary; import org.terasology.reflection.reflect.ReflectFactory; import org.terasology.registry.CoreRegistry;  import com.google.common.collect.Sets;  /**  * A fake environment so that plugins can be loaded for configuration.  * @author Immortius  */ public class TempWorldGeneratorPluginLibrary extends DefaultWorldGeneratorPluginLibrary {      public TempWorldGeneratorPluginLibrary() {         super(getEnv(), CoreRegistry.get(ReflectFactory.class), CoreRegistry.get(CopyStrategyLibrary.class));     }      private static ModuleEnvironment getEnv() {         ModuleManager moduleManager = CoreRegistry.get(ModuleManager.class);         AssetManager assetManager = CoreRegistry.get(AssetManager.class);         Config config = CoreRegistry.get(Config.class);          Set<Module> selectedModules = Sets.newHashSet();         for (Name moduleName : config.getDefaultModSelection().listModules()) {             Module module = moduleManager.getRegistry().getLatestModuleVersion(moduleName);             if (module != null) {                 selectedModules.add(module);                 for (DependencyInfo dependencyInfo : module.getMetadata().getDependencies()) {                     selectedModules.add(moduleManager.getRegistry().getLatestModuleVersion(dependencyInfo.getId()));                 }             }         }         ModuleEnvironment environment = moduleManager.loadEnvironment(selectedModules, false);         assetManager.setEnvironment(environment);         return environment;     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> engine : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> terasology : Folder]
							[NT -> world : Folder]
								[NT -> generator : Folder]
									[NT -> plugin : Folder]
										[NT -> TempWorldGeneratorPluginLibrary.java.merge : .java.merge-File]
											[T -> TempWorldGeneratorPluginLibrary.java : .java-Content "/*  * Copyright 2014 MovingBlocks  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.terasology.world.generator.plugin;  import com.google.common.collect.Sets; import org.terasology.asset.AssetManager; import org.terasology.config.Config; import org.terasology.context.Context; import org.terasology.engine.module.ModuleManager; import org.terasology.module.DependencyInfo; import org.terasology.module.Module; import org.terasology.module.ModuleEnvironment; import org.terasology.naming.Name;  import java.util.Set;  /**  * A fake environment so that plugins can be loaded for configuration.  * @author Immortius  */ public class TempWorldGeneratorPluginLibrary extends DefaultWorldGeneratorPluginLibrary {      public TempWorldGeneratorPluginLibrary(Context context) {         super(getEnv(context), context);     }      private static ModuleEnvironment getEnv(Context context) {         ModuleManager moduleManager = context.get(ModuleManager.class);         AssetManager assetManager = context.get(AssetManager.class);         Config config = context.get(Config.class);          Set<Module> selectedModules = Sets.newHashSet();         for (Name moduleName : config.getDefaultModSelection().listModules()) {             Module module = moduleManager.getRegistry().getLatestModuleVersion(moduleName);             if (module != null) {                 selectedModules.add(module);                 for (DependencyInfo dependencyInfo : module.getMetadata().getDependencies()) {                     selectedModules.add(moduleManager.getRegistry().getLatestModuleVersion(dependencyInfo.getId()));                 }             }         }         ModuleEnvironment environment = moduleManager.loadEnvironment(selectedModules, false);         assetManager.setEnvironment(environment);         return environment;     } } " compose:StringConcatenation merge: LineBased]
