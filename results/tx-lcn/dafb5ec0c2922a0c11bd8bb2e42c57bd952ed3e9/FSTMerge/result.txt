Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/tx-spi-message-netty/src/main/java/com/codingapi/tx/spi/message/netty/impl/NettyRpcClientInitializer.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/tx-spi-message-netty/src/main/java/com/codingapi/tx/spi/message/netty/impl/NettyRpcClientInitializer.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/tx-spi-message-netty/src/main/java/com/codingapi/tx/spi/message/netty/impl/NettyRpcClientInitializer.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/tx-spi-message-netty/src/main/java/com/codingapi/tx/spi/message/netty/impl/NettyRpcClientInitializer.java
[NT -> left : Feature]
	[NT -> tx-spi-message-netty : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> codingapi : Folder]
							[NT -> tx : Folder]
								[NT -> spi : Folder]
									[NT -> message : Folder]
										[NT -> netty : Folder]
											[NT -> impl : Folder]
												[NT -> NettyRpcClientInitializer.java : Java-File]
													[NT -> - : CompilationUnit]
														[T -> - : PackageDeclaration "package com.codingapi.tx.spi.message.netty.impl;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.RpcClientInitializer{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.RpcClientInitializer;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.dto.TxManagerHost{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.dto.TxManagerHost;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.RpcConfig{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.RpcConfig;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.netty.SocketManager{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.netty.SocketManager;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.netty.em.NettyType{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.netty.em.NettyType;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.netty.handler.NettyRpcClientHandlerInitHandler{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.netty.handler.NettyRpcClientHandlerInitHandler;" compose:Replacement merge: Default]
														[T -> io.netty.bootstrap.Bootstrap{ImportPackage} : ImportDeclaration "import io.netty.bootstrap.Bootstrap;" compose:Replacement merge: Default]
														[T -> io.netty.channel.ChannelFuture{ImportPackage} : ImportDeclaration "import io.netty.channel.ChannelFuture;" compose:Replacement merge: Default]
														[T -> io.netty.channel.ChannelOption{ImportPackage} : ImportDeclaration "import io.netty.channel.ChannelOption;" compose:Replacement merge: Default]
														[T -> io.netty.channel.EventLoopGroup{ImportPackage} : ImportDeclaration "import io.netty.channel.EventLoopGroup;" compose:Replacement merge: Default]
														[T -> io.netty.channel.nio.NioEventLoopGroup{ImportPackage} : ImportDeclaration "import io.netty.channel.nio.NioEventLoopGroup;" compose:Replacement merge: Default]
														[T -> io.netty.channel.socket.nio.NioSocketChannel{ImportPackage} : ImportDeclaration "import io.netty.channel.socket.nio.NioSocketChannel;" compose:Replacement merge: Default]
														[T -> lombok.extern.slf4j.Slf4j{ImportPackage} : ImportDeclaration "import lombok.extern.slf4j.Slf4j;" compose:Replacement merge: Default]
														[T -> org.springframework.beans.factory.DisposableBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.DisposableBean;" compose:Replacement merge: Default]
														[T -> org.springframework.beans.factory.annotation.Autowired{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.annotation.Autowired;" compose:Replacement merge: Default]
														[T -> org.springframework.stereotype.Service{ImportPackage} : ImportDeclaration "import org.springframework.stereotype.Service;" compose:Replacement merge: Default]
														[T -> java.net.InetSocketAddress{ImportPackage} : ImportDeclaration "import java.net.InetSocketAddress;" compose:Replacement merge: Default]
														[T -> java.net.SocketAddress{ImportPackage} : ImportDeclaration "import java.net.SocketAddress;" compose:Replacement merge: Default]
														[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
														[T -> java.util.concurrent.TimeUnit{ImportPackage} : ImportDeclaration "import java.util.concurrent.TimeUnit;" compose:Replacement merge: Default]
														[NT -> NettyRpcClientInitializer : ClassDeclaration]
															[T -> - : Modifiers "@Service @Slf4j public" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> NettyRpcClientInitializer : Id "NettyRpcClientInitializer" compose:Replacement merge: Default]
															[T -> ImplList : ImplementsList "implements RpcClientInitializer, DisposableBean" compose:Replacement merge: SemanticConflict]
															[T -> nettyRpcClientHandlerInitHandler : FieldDecl "@Autowired     private NettyRpcClientHandlerInitHandler nettyRpcClientHandlerInitHandler;" compose:Replacement merge: SemanticConflict]
															[T -> rpcConfig : FieldDecl "@Autowired     private RpcConfig rpcConfig;" compose:Replacement merge: SemanticConflict]
															[T -> workerGroup : FieldDecl "private EventLoopGroup workerGroup;" compose:Replacement merge: SemanticConflict]
															[T -> init(List<TxManagerHost>-List<TxManagerHost>) : MethodDecl "@Override     public void init(List<TxManagerHost> hosts) {         NettyContext.type = NettyType.client;         NettyContext.params = hosts;         workerGroup = new NioEventLoopGroup();         for (TxManagerHost host : hosts) {             connect(new InetSocketAddress(host.getHost(), host.getPort()));         }     }" compose:Replacement merge: LineBased]
															[T -> connect(SocketAddress-SocketAddress) : MethodDecl "@Override     public synchronized void connect(SocketAddress socketAddress) {         int reconnect = rpcConfig.getReconnectCount();         while (true) {             if (SocketManager.getInstance().noConnect(socketAddress) && reconnect >= 0) {                 try {                     log.info("try reconnect {} [{}]", socketAddress, rpcConfig.getReconnectCount() - reconnect + 1);                     Bootstrap b = new Bootstrap();                     b.group(workerGroup);                     b.channel(NioSocketChannel.class);                     b.option(ChannelOption.SO_KEEPALIVE, true);                     b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);                     b.handler(nettyRpcClientHandlerInitHandler);                     ChannelFuture channelFuture = b.connect(socketAddress).syncUninterruptibly();                     log.info("client -> {}, state:{}", socketAddress, channelFuture.isSuccess());                     break;                 } catch (Exception ignored) {                     reconnect--;                     try {                         TimeUnit.SECONDS.sleep(rpcConfig.getAttrDelayTime());                     } catch (InterruptedException e) {                         break;                     }                 }             }         }     }" compose:Replacement merge: LineBased]
															[T -> destroy({FormalParametersInternal}) : MethodDecl "@Override     public void destroy() {         workerGroup.shutdownGracefully();         log.info("client was down.");     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> tx-spi-message-netty : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> codingapi : Folder]
							[NT -> tx : Folder]
								[NT -> spi : Folder]
									[NT -> message : Folder]
										[NT -> netty : Folder]
											[NT -> impl : Folder]
												[NT -> NettyRpcClientInitializer.java : Java-File]
													[NT -> - : CompilationUnit]
														[T -> - : PackageDeclaration "package com.codingapi.tx.spi.message.netty.impl;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.RpcClientInitializer{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.RpcClientInitializer;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.dto.TxManagerHost{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.dto.TxManagerHost;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.netty.SocketManager{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.netty.SocketManager;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.netty.em.NettyType{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.netty.em.NettyType;" compose:Replacement merge: Default]
														[T -> com.codingapi.tx.spi.message.netty.handler.NettyRpcClientHandlerInitHandler{ImportPackage} : ImportDeclaration "import com.codingapi.tx.spi.message.netty.handler.NettyRpcClientHandlerInitHandler;" compose:Replacement merge: Default]
														[T -> io.netty.bootstrap.Bootstrap{ImportPackage} : ImportDeclaration "import io.netty.bootstrap.Bootstrap;" compose:Replacement merge: Default]
														[T -> io.netty.channel.ChannelFuture{ImportPackage} : ImportDeclaration "import io.netty.channel.ChannelFuture;" compose:Replacement merge: Default]
														[T -> io.netty.channel.ChannelOption{ImportPackage} : ImportDeclaration "import io.netty.channel.ChannelOption;" compose:Replacement merge: Default]
														[T -> io.netty.channel.EventLoopGroup{ImportPackage} : ImportDeclaration "import io.netty.channel.EventLoopGroup;" compose:Replacement merge: Default]
														[T -> io.netty.channel.nio.NioEventLoopGroup{ImportPackage} : ImportDeclaration "import io.netty.channel.nio.NioEventLoopGroup;" compose:Replacement merge: Default]
														[T -> io.netty.channel.socket.nio.NioSocketChannel{ImportPackage} : ImportDeclaration "import io.netty.channel.socket.nio.NioSocketChannel;" compose:Replacement merge: Default]
														[T -> lombok.extern.slf4j.Slf4j{ImportPackage} : ImportDeclaration "import lombok.extern.slf4j.Slf4j;" compose:Replacement merge: Default]
														[T -> org.springframework.beans.factory.DisposableBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.DisposableBean;" compose:Replacement merge: Default]
														[T -> org.springframework.beans.factory.annotation.Autowired{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.annotation.Autowired;" compose:Replacement merge: Default]
														[T -> org.springframework.stereotype.Service{ImportPackage} : ImportDeclaration "import org.springframework.stereotype.Service;" compose:Replacement merge: Default]
														[T -> java.net.ConnectException{ImportPackage} : ImportDeclaration "import java.net.ConnectException;" compose:Replacement merge: Default]
														[T -> java.net.InetSocketAddress{ImportPackage} : ImportDeclaration "import java.net.InetSocketAddress;" compose:Replacement merge: Default]
														[T -> java.net.SocketAddress{ImportPackage} : ImportDeclaration "import java.net.SocketAddress;" compose:Replacement merge: Default]
														[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
														[NT -> NettyRpcClientInitializer : ClassDeclaration]
															[T -> - : Modifiers "@Service @Slf4j public" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> NettyRpcClientInitializer : Id "NettyRpcClientInitializer" compose:Replacement merge: Default]
															[T -> ImplList : ImplementsList "implements RpcClientInitializer, DisposableBean" compose:Replacement merge: SemanticConflict]
															[T -> nettyRpcClientHandlerInitHandler : FieldDecl "@Autowired     private NettyRpcClientHandlerInitHandler nettyRpcClientHandlerInitHandler;" compose:Replacement merge: SemanticConflict]
															[T -> workerGroup : FieldDecl "private EventLoopGroup workerGroup;" compose:Replacement merge: SemanticConflict]
															[T -> init(List<TxManagerHost>-List<TxManagerHost>) : MethodDecl "@Override     public void init(List<TxManagerHost> hosts) {         NettyContext.type = NettyType.client;         NettyContext.params = hosts;         workerGroup = new NioEventLoopGroup();         for(TxManagerHost host:hosts){             connect(new InetSocketAddress(host.getHost(),host.getPort()));         }     }" compose:Replacement merge: LineBased]
															[T -> connect(SocketAddress-SocketAddress) : MethodDecl "@Override     public synchronized void connect(SocketAddress socketAddress){         if(SocketManager.getInstance().noConnect(socketAddress)) {             try {                 log.info(" try connect {} ",socketAddress);                 Bootstrap b = new Bootstrap();                 b.group(workerGroup);                 b.channel(NioSocketChannel.class);                 b.option(ChannelOption.SO_KEEPALIVE, true);                 b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);                 b.handler(nettyRpcClientHandlerInitHandler);                 ChannelFuture channelFuture = b.connect(socketAddress).syncUninterruptibly();                 log.info("client -> {} , state:{}", socketAddress, channelFuture.isSuccess());             } catch (Exception e) {                  if (e instanceof ConnectException) {                     try {                         Thread.sleep(1000 * 15);                     } catch (InterruptedException e1) {                         e1.printStackTrace();                     }                     log.warn("current manager size:{}", SocketManager.getInstance().currentSize());                     connect(socketAddress);                 }             }         }     }" compose:Replacement merge: LineBased]
															[T -> destroy({FormalParametersInternal}) : MethodDecl "@Override     public void destroy() throws Exception {         workerGroup.shutdownGracefully();         log.info("client was down.");     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> tx-spi-message-netty : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> codingapi : Folder]
							[NT -> tx : Folder]
								[NT -> spi : Folder]
									[NT -> message : Folder]
										[NT -> netty : Folder]
											[NT -> impl : Folder]
												[NT -> NettyRpcClientInitializer.java.merge : .java.merge-File]
													[T -> NettyRpcClientInitializer.java : .java-Content "package com.codingapi.tx.spi.message.netty.impl;  import com.codingapi.tx.spi.message.RpcClientInitializer; import com.codingapi.tx.spi.message.dto.TxManagerHost; import com.codingapi.tx.spi.message.RpcConfig; import com.codingapi.tx.spi.message.netty.SocketManager; import com.codingapi.tx.spi.message.netty.em.NettyType; import com.codingapi.tx.spi.message.netty.handler.NettyRpcClientHandlerInitHandler; import io.netty.bootstrap.Bootstrap; import io.netty.channel.ChannelFuture; import io.netty.channel.ChannelOption; import io.netty.channel.EventLoopGroup; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.nio.NioSocketChannel; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service;  import java.net.InetSocketAddress; import java.net.SocketAddress; import java.util.List; import java.util.concurrent.TimeUnit;  /**  * Description:  * Company: CodingApi  * Date: 2018/12/10  *  * @author ujued  */ @Service @Slf4j public class NettyRpcClientInitializer implements RpcClientInitializer, DisposableBean {       @Autowired     private NettyRpcClientHandlerInitHandler nettyRpcClientHandlerInitHandler;      @Autowired     private RpcConfig rpcConfig;      private EventLoopGroup workerGroup;       @Override     public void init(List<TxManagerHost> hosts) {         NettyContext.type = NettyType.client;         NettyContext.params = hosts;         workerGroup = new NioEventLoopGroup();         for (TxManagerHost host : hosts) {             connect(new InetSocketAddress(host.getHost(), host.getPort()));         }     }       @Override     public synchronized void connect(SocketAddress socketAddress) {         int reconnect = rpcConfig.getReconnectCount();         while (true) {             if (SocketManager.getInstance().noConnect(socketAddress) && reconnect >= 0) {                 try {                     log.info("try reconnect {} [{}]", socketAddress, rpcConfig.getReconnectCount() - reconnect + 1);                     Bootstrap b = new Bootstrap();                     b.group(workerGroup);                     b.channel(NioSocketChannel.class);                     b.option(ChannelOption.SO_KEEPALIVE, true);                     b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);                     b.handler(nettyRpcClientHandlerInitHandler);                     ChannelFuture channelFuture = b.connect(socketAddress).syncUninterruptibly();                     log.info("client -> {}, state:{}", socketAddress, channelFuture.isSuccess());                     break;                 } catch (Exception ignored) {                     reconnect--;                     try {                         TimeUnit.SECONDS.sleep(rpcConfig.getAttrDelayTime());                     } catch (InterruptedException e) {                         break;                     }                 }             }         }     }       @Override     public void destroy() {         workerGroup.shutdownGracefully();         log.info("client was down.");     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> tx-spi-message-netty : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> codingapi : Folder]
							[NT -> tx : Folder]
								[NT -> spi : Folder]
									[NT -> message : Folder]
										[NT -> netty : Folder]
											[NT -> impl : Folder]
												[NT -> NettyRpcClientInitializer.java.merge : .java.merge-File]
													[T -> NettyRpcClientInitializer.java : .java-Content "package com.codingapi.tx.spi.message.netty.impl;  import com.codingapi.tx.spi.message.RpcClientInitializer; import com.codingapi.tx.spi.message.dto.TxManagerHost; import com.codingapi.tx.spi.message.netty.SocketManager; import com.codingapi.tx.spi.message.netty.em.NettyType; import com.codingapi.tx.spi.message.netty.handler.NettyRpcClientHandlerInitHandler; import io.netty.bootstrap.Bootstrap; import io.netty.channel.ChannelFuture; import io.netty.channel.ChannelOption; import io.netty.channel.EventLoopGroup; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.nio.NioSocketChannel; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service;  import java.net.ConnectException; import java.net.InetSocketAddress; import java.net.SocketAddress; import java.util.List;  /**  * Description:  * Company: CodingApi  * Date: 2018/12/10  *  * @author ujued  */ @Service @Slf4j public class NettyRpcClientInitializer implements RpcClientInitializer, DisposableBean {       @Autowired     private NettyRpcClientHandlerInitHandler nettyRpcClientHandlerInitHandler;      private EventLoopGroup workerGroup;       @Override     public void init(List<TxManagerHost> hosts) {         NettyContext.type = NettyType.client;         NettyContext.params = hosts;         workerGroup = new NioEventLoopGroup();         for(TxManagerHost host:hosts){             connect(new InetSocketAddress(host.getHost(),host.getPort()));         }     }       @Override     public synchronized void connect(SocketAddress socketAddress){         if(SocketManager.getInstance().noConnect(socketAddress)) {             try {                 log.info(" try connect {} ",socketAddress);                 Bootstrap b = new Bootstrap();                 b.group(workerGroup);                 b.channel(NioSocketChannel.class);                 b.option(ChannelOption.SO_KEEPALIVE, true);                 b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);                 b.handler(nettyRpcClientHandlerInitHandler);                 ChannelFuture channelFuture = b.connect(socketAddress).syncUninterruptibly();                 log.info("client -> {} , state:{}", socketAddress, channelFuture.isSuccess());             } catch (Exception e) {                  if (e instanceof ConnectException) {                     try {                         Thread.sleep(1000 * 15);                     } catch (InterruptedException e1) {                         e1.printStackTrace();                     }                     log.warn("current manager size:{}", SocketManager.getInstance().currentSize());                     connect(socketAddress);                 }             }         }     }       @Override     public void destroy() throws Exception {         workerGroup.shutdownGracefully();         log.info("client was down.");     } } " compose:StringConcatenation merge: LineBased]
