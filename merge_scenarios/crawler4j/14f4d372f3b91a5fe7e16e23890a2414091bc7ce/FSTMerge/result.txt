Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/crawler4j/left/crawler4j/src/test/java/edu/uci/ics/crawler4j/tests/fetcher/PageFetcherHtmlTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/crawler4j/left/crawler4j/src/test/java/edu/uci/ics/crawler4j/tests/fetcher/PageFetcherHtmlTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/crawler4j/base/crawler4j/src/test/java/edu/uci/ics/crawler4j/tests/fetcher/PageFetcherHtmlTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/crawler4j/base/crawler4j/src/test/java/edu/uci/ics/crawler4j/tests/fetcher/PageFetcherHtmlTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/crawler4j/right/crawler4j/src/test/java/edu/uci/ics/crawler4j/tests/fetcher/PageFetcherHtmlTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/crawler4j/right/crawler4j/src/test/java/edu/uci/ics/crawler4j/tests/fetcher/PageFetcherHtmlTest.java
[NT -> left : Feature]
	[NT -> crawler4j : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> edu : Folder]
						[NT -> uci : Folder]
							[NT -> ics : Folder]
								[NT -> crawler4j : Folder]
									[NT -> tests : Folder]
										[NT -> fetcher : Folder]
											[NT -> PageFetcherHtmlTest.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package edu.uci.ics.crawler4j.tests.fetcher;" compose:Replacement merge: Default]
													[T -> org.junit.Rule{ImportPackage} : ImportDeclaration "import org.junit.Rule;" compose:Replacement merge: Default]
													[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.client.WireMock{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.client.WireMock;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.core.WireMockConfiguration{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.core.WireMockConfiguration;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.junit.WireMockRule{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.junit.WireMockRule;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.CrawlConfig{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.CrawlConfig;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.Page{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.Page;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.fetcher.PageFetcher{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.fetcher.PageFetcher;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.url.WebURL{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.url.WebURL;" compose:Replacement merge: Default]
													[NT -> PageFetcherHtmlTest : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> PageFetcherHtmlTest : Id "PageFetcherHtmlTest" compose:Replacement merge: Default]
														[T -> wireMockRule : FieldDecl "@Rule     public WireMockRule wireMockRule = new WireMockRule(new WireMockConfiguration().dynamicPort());" compose:Replacement merge: SemanticConflict]
														[T -> testCustomPageFetcher({FormalParametersInternal}) : MethodDecl "@Test     public void testCustomPageFetcher() throws Exception {          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")                                                      .withHeader("Content-Length", "47")                                                      .withBody("<html><body><h1>this is " +                                                                "html</h1></body></html>")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "application/pdf")                                                      .withBody(new byte[] {1, 2, 3, 4})));          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type",                                                                  "application/pdf")));          CrawlConfig cfg = new CrawlConfig();         WebURL url = new WebURL();          url.setURL("http://localhost:" + wireMockRule.port() + "/some/index.html");         PageFetcher pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 47);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/index.html")));         WireMock.verify(1, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/index.html")));          url.setURL("http://localhost:" + wireMockRule.port() + "/some/invoice.pdf");         pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 4);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));         WireMock.verify(0, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> crawler4j : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> edu : Folder]
						[NT -> uci : Folder]
							[NT -> ics : Folder]
								[NT -> crawler4j : Folder]
									[NT -> tests : Folder]
										[NT -> fetcher : Folder]
											[NT -> PageFetcherHtmlTest.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package edu.uci.ics.crawler4j.tests.fetcher;" compose:Replacement merge: Default]
													[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
													[T -> org.junit.Rule{ImportPackage} : ImportDeclaration "import org.junit.Rule;" compose:Replacement merge: Default]
													[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.client.WireMock{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.client.WireMock;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.core.WireMockConfiguration{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.core.WireMockConfiguration;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.junit.WireMockRule{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.junit.WireMockRule;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.CrawlConfig{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.CrawlConfig;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.Page{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.Page;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.exceptions.PageBiggerThanMaxSizeException{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.exceptions.PageBiggerThanMaxSizeException;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.fetcher.PageFetcher{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.fetcher.PageFetcher;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.url.WebURL{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.url.WebURL;" compose:Replacement merge: Default]
													[NT -> PageFetcherHtmlTest : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> PageFetcherHtmlTest : Id "PageFetcherHtmlTest" compose:Replacement merge: Default]
														[T -> wireMockRule : FieldDecl "@Rule     public WireMockRule wireMockRule = new WireMockRule(new WireMockConfiguration().dynamicPort());" compose:Replacement merge: SemanticConflict]
														[T -> testCustomPageFetcher({FormalParametersInternal}) : MethodDecl "@Test     public void testCustomPageFetcher()         throws InterruptedException, PageBiggerThanMaxSizeException, IOException {          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")                                                      .withHeader("Content-Length", "47")                                                      .withBody("<html><body><h1>this is " +                                                                "html</h1></body></html>")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "application/pdf")                                                      .withBody(new byte[] {1, 2, 3, 4})));          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type",                                                                  "application/pdf")));          CrawlConfig cfg = new CrawlConfig();         WebURL url = new WebURL();          url.setURL("http://localhost:" + wireMockRule.port() + "/some/index.html");         PageFetcher pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 47);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/index.html")));         WireMock.verify(1, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/index.html")));          url.setURL("http://localhost:" + wireMockRule.port() + "/some/invoice.pdf");         pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 4);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));         WireMock.verify(0, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> crawler4j : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> edu : Folder]
						[NT -> uci : Folder]
							[NT -> ics : Folder]
								[NT -> crawler4j : Folder]
									[NT -> tests : Folder]
										[NT -> fetcher : Folder]
											[NT -> PageFetcherHtmlTest.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package edu.uci.ics.crawler4j.tests.fetcher;" compose:Replacement merge: Default]
													[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
													[T -> org.junit.Rule{ImportPackage} : ImportDeclaration "import org.junit.Rule;" compose:Replacement merge: Default]
													[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.client.WireMock{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.client.WireMock;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.core.WireMockConfiguration{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.core.WireMockConfiguration;" compose:Replacement merge: Default]
													[T -> com.github.tomakehurst.wiremock.junit.WireMockRule{ImportPackage} : ImportDeclaration "import com.github.tomakehurst.wiremock.junit.WireMockRule;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.CrawlConfig{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.CrawlConfig;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.Page{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.Page;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.crawler.exceptions.PageBiggerThanMaxSizeException{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.crawler.exceptions.PageBiggerThanMaxSizeException;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.fetcher.PageFetcher{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.fetcher.PageFetcher;" compose:Replacement merge: Default]
													[T -> edu.uci.ics.crawler4j.url.WebURL{ImportPackage} : ImportDeclaration "import edu.uci.ics.crawler4j.url.WebURL;" compose:Replacement merge: Default]
													[NT -> PageFetcherHtmlTest : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> PageFetcherHtmlTest : Id "PageFetcherHtmlTest" compose:Replacement merge: Default]
														[T -> wireMockRule : FieldDecl "@Rule     public WireMockRule wireMockRule = new WireMockRule(new WireMockConfiguration().dynamicPort());" compose:Replacement merge: SemanticConflict]
														[T -> testCustomPageFetcher({FormalParametersInternal}) : MethodDecl "@Test     public void testCustomPageFetcher()         throws InterruptedException, PageBiggerThanMaxSizeException, IOException {          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")                                                      .withHeader("Content-Length", "47")                                                      .withBody("<html><body><h1>this is " +                                                                "html</h1></body></html>")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "application/pdf")                                                      .withBody(new byte[] {1, 2, 3, 4})));          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type",                                                                  "application/pdf")));          CrawlConfig cfg = new CrawlConfig();         WebURL url = new WebURL();          url.setURL("http://localhost:" + wireMockRule.port() + "/some/index.html");         PageFetcher pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 47);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/index.html")));         WireMock.verify(1, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/index.html")));          url.setURL("http://localhost:" + wireMockRule.port() + "/some/invoice.pdf");         pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 4);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));         WireMock.verify(0, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> crawler4j : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> edu : Folder]
						[NT -> uci : Folder]
							[NT -> ics : Folder]
								[NT -> crawler4j : Folder]
									[NT -> tests : Folder]
										[NT -> fetcher : Folder]
											[NT -> PageFetcherHtmlTest.java.merge : .java.merge-File]
												[T -> PageFetcherHtmlTest.java : .java-Content "package edu.uci.ics.crawler4j.tests.fetcher;  import org.junit.Rule; import org.junit.Test; import com.github.tomakehurst.wiremock.client.WireMock; import com.github.tomakehurst.wiremock.core.WireMockConfiguration; import com.github.tomakehurst.wiremock.junit.WireMockRule; import edu.uci.ics.crawler4j.crawler.CrawlConfig; import edu.uci.ics.crawler4j.crawler.Page; import edu.uci.ics.crawler4j.fetcher.PageFetcher; import edu.uci.ics.crawler4j.url.WebURL;  public class PageFetcherHtmlTest {      @Rule     public WireMockRule wireMockRule = new WireMockRule(new WireMockConfiguration().dynamicPort());      @Test     public void testCustomPageFetcher() throws Exception {          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")                                                      .withHeader("Content-Length", "47")                                                      .withBody("<html><body><h1>this is " +                                                                "html</h1></body></html>")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "application/pdf")                                                      .withBody(new byte[] {1, 2, 3, 4})));          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type",                                                                  "application/pdf")));          CrawlConfig cfg = new CrawlConfig();         WebURL url = new WebURL();          url.setURL("http://localhost:" + wireMockRule.port() + "/some/index.html");         PageFetcher pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 47);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/index.html")));         WireMock.verify(1, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/index.html")));          url.setURL("http://localhost:" + wireMockRule.port() + "/some/invoice.pdf");         pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 4);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));         WireMock.verify(0, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> crawler4j : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> edu : Folder]
						[NT -> uci : Folder]
							[NT -> ics : Folder]
								[NT -> crawler4j : Folder]
									[NT -> tests : Folder]
										[NT -> fetcher : Folder]
											[NT -> PageFetcherHtmlTest.java.merge : .java.merge-File]
												[T -> PageFetcherHtmlTest.java : .java-Content "package edu.uci.ics.crawler4j.tests.fetcher;  import java.io.IOException; import org.junit.Rule; import org.junit.Test; import com.github.tomakehurst.wiremock.client.WireMock; import com.github.tomakehurst.wiremock.core.WireMockConfiguration; import com.github.tomakehurst.wiremock.junit.WireMockRule; import edu.uci.ics.crawler4j.crawler.CrawlConfig; import edu.uci.ics.crawler4j.crawler.Page; import edu.uci.ics.crawler4j.crawler.exceptions.PageBiggerThanMaxSizeException; import edu.uci.ics.crawler4j.fetcher.PageFetcher; import edu.uci.ics.crawler4j.url.WebURL;  public class PageFetcherHtmlTest {      @Rule     public WireMockRule wireMockRule = new WireMockRule(new WireMockConfiguration().dynamicPort());      @Test     public void testCustomPageFetcher()         throws InterruptedException, PageBiggerThanMaxSizeException, IOException {          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")                                                      .withHeader("Content-Length", "47")                                                      .withBody("<html><body><h1>this is " +                                                                "html</h1></body></html>")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "application/pdf")                                                      .withBody(new byte[] {1, 2, 3, 4})));          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type",                                                                  "application/pdf")));          CrawlConfig cfg = new CrawlConfig();         WebURL url = new WebURL();          url.setURL("http://localhost:" + wireMockRule.port() + "/some/index.html");         PageFetcher pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 47);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/index.html")));         WireMock.verify(1, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/index.html")));          url.setURL("http://localhost:" + wireMockRule.port() + "/some/invoice.pdf");         pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 4);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));         WireMock.verify(0, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> crawler4j : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> edu : Folder]
						[NT -> uci : Folder]
							[NT -> ics : Folder]
								[NT -> crawler4j : Folder]
									[NT -> tests : Folder]
										[NT -> fetcher : Folder]
											[NT -> PageFetcherHtmlTest.java.merge : .java.merge-File]
												[T -> PageFetcherHtmlTest.java : .java-Content "package edu.uci.ics.crawler4j.tests.fetcher;  import java.io.IOException;  import org.junit.Rule; import org.junit.Test;  import com.github.tomakehurst.wiremock.client.WireMock; import com.github.tomakehurst.wiremock.core.WireMockConfiguration; import com.github.tomakehurst.wiremock.junit.WireMockRule;  import edu.uci.ics.crawler4j.crawler.CrawlConfig; import edu.uci.ics.crawler4j.crawler.Page; import edu.uci.ics.crawler4j.crawler.exceptions.PageBiggerThanMaxSizeException; import edu.uci.ics.crawler4j.fetcher.PageFetcher; import edu.uci.ics.crawler4j.url.WebURL;  public class PageFetcherHtmlTest {      @Rule     public WireMockRule wireMockRule = new WireMockRule(new WireMockConfiguration().dynamicPort());      @Test     public void testCustomPageFetcher()         throws InterruptedException, PageBiggerThanMaxSizeException, IOException {          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/index.html"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "text/html")                                                      .withHeader("Content-Length", "47")                                                      .withBody("<html><body><h1>this is " +                                                                "html</h1></body></html>")));          WireMock.stubFor(WireMock.get(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type", "application/pdf")                                                      .withBody(new byte[] {1, 2, 3, 4})));          WireMock.stubFor(WireMock.head(WireMock.urlEqualTo("/some/invoice.pdf"))                                  .willReturn(WireMock.aResponse()                                                      .withStatus(200)                                                      .withHeader("Content-Type",                                                                  "application/pdf")));          CrawlConfig cfg = new CrawlConfig();         WebURL url = new WebURL();          url.setURL("http://localhost:" + wireMockRule.port() + "/some/index.html");         PageFetcher pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 47);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/index.html")));         WireMock.verify(1, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/index.html")));          url.setURL("http://localhost:" + wireMockRule.port() + "/some/invoice.pdf");         pf = new PageFetcherHtmlOnly(cfg);         pf.fetchPage(url).fetchContent(new Page(url), 4);          WireMock.verify(1, WireMock.headRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));         WireMock.verify(0, WireMock.getRequestedFor(WireMock.urlEqualTo("/some/invoice.pdf")));     } } " compose:StringConcatenation merge: LineBased]
