Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/lts-example/src/main/java/com/lts/example/api/TaskTrackerTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/lts-example/src/main/java/com/lts/example/api/TaskTrackerTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/lts-example/src/main/java/com/lts/example/api/TaskTrackerTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/lts-example/src/main/java/com/lts/example/api/TaskTrackerTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/lts-example/src/main/java/com/lts/example/api/TaskTrackerTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/lts-example/src/main/java/com/lts/example/api/TaskTrackerTest.java
[NT -> left : Feature]
	[NT -> lts-example : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> lts : Folder]
							[NT -> example : Folder]
								[NT -> api : Folder]
									[NT -> TaskTrackerTest.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.lts.example.api;" compose:Replacement merge: Default]
											[T -> com.lts.core.spi.SpiKey{ImportPackage} : ImportDeclaration "import com.lts.core.spi.SpiKey;" compose:Replacement merge: Default]
											[T -> com.lts.example.support.MasterChangeListenerImpl{ImportPackage} : ImportDeclaration "import com.lts.example.support.MasterChangeListenerImpl;" compose:Replacement merge: Default]
											[T -> com.lts.example.support.TestJobRunner{ImportPackage} : ImportDeclaration "import com.lts.example.support.TestJobRunner;" compose:Replacement merge: Default]
											[T -> com.lts.tasktracker.TaskTracker{ImportPackage} : ImportDeclaration "import com.lts.tasktracker.TaskTracker;" compose:Replacement merge: Default]
											[NT -> TaskTrackerTest : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> TaskTrackerTest : Id "TaskTrackerTest" compose:Replacement merge: Default]
												[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) {          final TaskTracker taskTracker = new TaskTracker();         // 任务执行类，实现JobRunner 接口         taskTracker.setJobRunnerClass(TestJobRunner.class);         taskTracker.setRegistryAddress("zookeeper://127.0.0.1:2181"); //         taskTracker.setRegistryAddress("redis://127.0.0.1:6379");         taskTracker.setNodeGroup("test_trade_TaskTracker"); // 同一个TaskTracker集群这个名字相同         taskTracker.setClusterName("test_cluster");         taskTracker.setWorkThreads(10);         // 反馈任务给JobTracker失败，存储本地文件路径         // taskTracker.setDataPath(Constants.USER_HOME);         // master 节点变化监听器，当有集群中只需要一个节点执行某个事情的时候，可以监听这个事件         taskTracker.addMasterChangeListener(new MasterChangeListenerImpl()); //        taskTracker.addConfig(Constants.JOB_PULL_FREQUENCY, "1"); //设置TaskTracker Pull Job的频率，精度要求高的，可以设置为1         // 业务日志级别         // taskTracker.setBizLoggerLevel(Level.INFO);         // 可选址  leveldb(默认), rocksdb, berkeleydb         // taskTracker.addConfig("job.fail.store", "leveldb");         taskTracker.addConfig("lts.monitor.url", "http://localhost:9090/"); //         taskTracker.addConfig("lts.remoting", "mina"); //        taskTracker.addConfig("lts.remoting.serializable.default", "fastjson");         taskTracker.addConfig(SpiKey.LTS_JSON, "ltsjson");         taskTracker.start();          Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {             @Override             public void run() {                 taskTracker.stop();             }         }));     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> lts-example : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> lts : Folder]
							[NT -> example : Folder]
								[NT -> api : Folder]
									[NT -> TaskTrackerTest.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.lts.example.api;" compose:Replacement merge: Default]
											[T -> com.lts.core.spi.SpiKey{ImportPackage} : ImportDeclaration "import com.lts.core.spi.SpiKey;" compose:Replacement merge: Default]
											[T -> com.lts.example.support.MasterChangeListenerImpl{ImportPackage} : ImportDeclaration "import com.lts.example.support.MasterChangeListenerImpl;" compose:Replacement merge: Default]
											[T -> com.lts.example.support.TestJobRunner{ImportPackage} : ImportDeclaration "import com.lts.example.support.TestJobRunner;" compose:Replacement merge: Default]
											[T -> com.lts.tasktracker.TaskTracker{ImportPackage} : ImportDeclaration "import com.lts.tasktracker.TaskTracker;" compose:Replacement merge: Default]
											[NT -> TaskTrackerTest : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> TaskTrackerTest : Id "TaskTrackerTest" compose:Replacement merge: Default]
												[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) {          final TaskTracker taskTracker = new TaskTracker();         // 任务执行类，实现JobRunner 接口         taskTracker.setJobRunnerClass(TestJobRunner.class);         taskTracker.setRegistryAddress("zookeeper://127.0.0.1:2181"); //         taskTracker.setRegistryAddress("redis://127.0.0.1:6379");         taskTracker.setNodeGroup("test_trade_TaskTracker"); // 同一个TaskTracker集群这个名字相同         taskTracker.setClusterName("test_cluster");         taskTracker.setWorkThreads(10);         // 反馈任务给JobTracker失败，存储本地文件路径         // taskTracker.setDataPath(Constants.USER_HOME);         // master 节点变化监听器，当有集群中只需要一个节点执行某个事情的时候，可以监听这个事件         taskTracker.addMasterChangeListener(new MasterChangeListenerImpl()); //        taskTracker.addConfig(Constants.JOB_PULL_FREQUENCY, "1"); //设置TaskTracker Pull Job的频率，精度要求高的，可以设置为1         // 业务日志级别         // taskTracker.setBizLoggerLevel(Level.INFO);         // 可选址  leveldb(默认), rocksdb, berkeleydb         // taskTracker.addConfig("job.fail.store", "leveldb");         taskTracker.addConfig("lts.monitor.url", "http://localhost:8081/"); //         taskTracker.addConfig("lts.remoting", "mina"); //        taskTracker.addConfig("lts.remoting.serializable.default", "fastjson");         taskTracker.addConfig(SpiKey.LTS_JSON, "ltsjson");         taskTracker.start();          Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {             @Override             public void run() {                 taskTracker.stop();             }         }));     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> lts-example : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> lts : Folder]
							[NT -> example : Folder]
								[NT -> api : Folder]
									[NT -> TaskTrackerTest.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.lts.example.api;" compose:Replacement merge: Default]
											[T -> com.lts.example.support.MasterChangeListenerImpl{ImportPackage} : ImportDeclaration "import com.lts.example.support.MasterChangeListenerImpl;" compose:Replacement merge: Default]
											[T -> com.lts.example.support.TestJobRunner{ImportPackage} : ImportDeclaration "import com.lts.example.support.TestJobRunner;" compose:Replacement merge: Default]
											[T -> com.lts.tasktracker.TaskTracker{ImportPackage} : ImportDeclaration "import com.lts.tasktracker.TaskTracker;" compose:Replacement merge: Default]
											[NT -> TaskTrackerTest : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> TaskTrackerTest : Id "TaskTrackerTest" compose:Replacement merge: Default]
												[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) {          final TaskTracker taskTracker = new TaskTracker();         // 任务执行类，实现JobRunner 接口         taskTracker.setJobRunnerClass(TestJobRunner.class);         taskTracker.setRegistryAddress("zookeeper://127.0.0.1:2181"); //         taskTracker.setRegistryAddress("redis://127.0.0.1:6379");         taskTracker.setNodeGroup("test_trade_TaskTracker"); // 同一个TaskTracker集群这个名字相同         taskTracker.setClusterName("test_cluster");         taskTracker.setWorkThreads(10);         // 反馈任务给JobTracker失败，存储本地文件路径         // taskTracker.setDataPath(Constants.USER_HOME);         // master 节点变化监听器，当有集群中只需要一个节点执行某个事情的时候，可以监听这个事件         taskTracker.addMasterChangeListener(new MasterChangeListenerImpl()); //        taskTracker.addConfig(Constants.JOB_PULL_FREQUENCY, "1"); //设置TaskTracker Pull Job的频率，精度要求高的，可以设置为1         // 业务日志级别         // taskTracker.setBizLoggerLevel(Level.INFO);         // 可选址  leveldb(默认), rocksdb, berkeleydb         // taskTracker.addConfig("job.fail.store", "leveldb");         taskTracker.addConfig("lts.monitor.url", "http://localhost:8081/");         taskTracker.addConfig("lts.remoting", "netty"); //        taskTracker.addConfig("zk.client", "curator");  //        taskTracker.addConfig("lts.remoting.serializable.default", "fastjson"); //        taskTracker.addConfig(SpiKey.LTS_JSON, "ltsjson");         taskTracker.start();          Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {             @Override             public void run() {                 taskTracker.stop();             }         }));     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> lts-example : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> lts : Folder]
							[NT -> example : Folder]
								[NT -> api : Folder]
									[NT -> TaskTrackerTest.java.merge : .java.merge-File]
										[T -> TaskTrackerTest.java : .java-Content "package com.lts.example.api;  import com.lts.core.spi.SpiKey; import com.lts.example.support.MasterChangeListenerImpl; import com.lts.example.support.TestJobRunner; import com.lts.tasktracker.TaskTracker;   /**  * @author Robert HG (254963746@qq.com) on 8/19/14.  */ public class TaskTrackerTest {      public static void main(String[] args) {          final TaskTracker taskTracker = new TaskTracker();         // 任务执行类，实现JobRunner 接口         taskTracker.setJobRunnerClass(TestJobRunner.class);         taskTracker.setRegistryAddress("zookeeper://127.0.0.1:2181"); //         taskTracker.setRegistryAddress("redis://127.0.0.1:6379");         taskTracker.setNodeGroup("test_trade_TaskTracker"); // 同一个TaskTracker集群这个名字相同         taskTracker.setClusterName("test_cluster");         taskTracker.setWorkThreads(10);         // 反馈任务给JobTracker失败，存储本地文件路径         // taskTracker.setDataPath(Constants.USER_HOME);         // master 节点变化监听器，当有集群中只需要一个节点执行某个事情的时候，可以监听这个事件         taskTracker.addMasterChangeListener(new MasterChangeListenerImpl()); //        taskTracker.addConfig(Constants.JOB_PULL_FREQUENCY, "1"); //设置TaskTracker Pull Job的频率，精度要求高的，可以设置为1         // 业务日志级别         // taskTracker.setBizLoggerLevel(Level.INFO);         // 可选址  leveldb(默认), rocksdb, berkeleydb         // taskTracker.addConfig("job.fail.store", "leveldb");         taskTracker.addConfig("lts.monitor.url", "http://localhost:9090/"); //         taskTracker.addConfig("lts.remoting", "mina"); //        taskTracker.addConfig("lts.remoting.serializable.default", "fastjson");         taskTracker.addConfig(SpiKey.LTS_JSON, "ltsjson");         taskTracker.start();          Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {             @Override             public void run() {                 taskTracker.stop();             }         }));     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> lts-example : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> lts : Folder]
							[NT -> example : Folder]
								[NT -> api : Folder]
									[NT -> TaskTrackerTest.java.merge : .java.merge-File]
										[T -> TaskTrackerTest.java : .java-Content "package com.lts.example.api;  import com.lts.core.spi.SpiKey; import com.lts.example.support.MasterChangeListenerImpl; import com.lts.example.support.TestJobRunner; import com.lts.tasktracker.TaskTracker;   /**  * @author Robert HG (254963746@qq.com) on 8/19/14.  */ public class TaskTrackerTest {      public static void main(String[] args) {          final TaskTracker taskTracker = new TaskTracker();         // 任务执行类，实现JobRunner 接口         taskTracker.setJobRunnerClass(TestJobRunner.class);         taskTracker.setRegistryAddress("zookeeper://127.0.0.1:2181"); //         taskTracker.setRegistryAddress("redis://127.0.0.1:6379");         taskTracker.setNodeGroup("test_trade_TaskTracker"); // 同一个TaskTracker集群这个名字相同         taskTracker.setClusterName("test_cluster");         taskTracker.setWorkThreads(10);         // 反馈任务给JobTracker失败，存储本地文件路径         // taskTracker.setDataPath(Constants.USER_HOME);         // master 节点变化监听器，当有集群中只需要一个节点执行某个事情的时候，可以监听这个事件         taskTracker.addMasterChangeListener(new MasterChangeListenerImpl()); //        taskTracker.addConfig(Constants.JOB_PULL_FREQUENCY, "1"); //设置TaskTracker Pull Job的频率，精度要求高的，可以设置为1         // 业务日志级别         // taskTracker.setBizLoggerLevel(Level.INFO);         // 可选址  leveldb(默认), rocksdb, berkeleydb         // taskTracker.addConfig("job.fail.store", "leveldb");         taskTracker.addConfig("lts.monitor.url", "http://localhost:8081/"); //         taskTracker.addConfig("lts.remoting", "mina"); //        taskTracker.addConfig("lts.remoting.serializable.default", "fastjson");         taskTracker.addConfig(SpiKey.LTS_JSON, "ltsjson");         taskTracker.start();          Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {             @Override             public void run() {                 taskTracker.stop();             }         }));     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> lts-example : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> lts : Folder]
							[NT -> example : Folder]
								[NT -> api : Folder]
									[NT -> TaskTrackerTest.java.merge : .java.merge-File]
										[T -> TaskTrackerTest.java : .java-Content "package com.lts.example.api;  import com.lts.example.support.MasterChangeListenerImpl; import com.lts.example.support.TestJobRunner; import com.lts.tasktracker.TaskTracker;   /**  * @author Robert HG (254963746@qq.com) on 8/19/14.  */ public class TaskTrackerTest {      public static void main(String[] args) {          final TaskTracker taskTracker = new TaskTracker();         // 任务执行类，实现JobRunner 接口         taskTracker.setJobRunnerClass(TestJobRunner.class);         taskTracker.setRegistryAddress("zookeeper://127.0.0.1:2181"); //         taskTracker.setRegistryAddress("redis://127.0.0.1:6379");         taskTracker.setNodeGroup("test_trade_TaskTracker"); // 同一个TaskTracker集群这个名字相同         taskTracker.setClusterName("test_cluster");         taskTracker.setWorkThreads(10);         // 反馈任务给JobTracker失败，存储本地文件路径         // taskTracker.setDataPath(Constants.USER_HOME);         // master 节点变化监听器，当有集群中只需要一个节点执行某个事情的时候，可以监听这个事件         taskTracker.addMasterChangeListener(new MasterChangeListenerImpl()); //        taskTracker.addConfig(Constants.JOB_PULL_FREQUENCY, "1"); //设置TaskTracker Pull Job的频率，精度要求高的，可以设置为1         // 业务日志级别         // taskTracker.setBizLoggerLevel(Level.INFO);         // 可选址  leveldb(默认), rocksdb, berkeleydb         // taskTracker.addConfig("job.fail.store", "leveldb");         taskTracker.addConfig("lts.monitor.url", "http://localhost:8081/");         taskTracker.addConfig("lts.remoting", "netty"); //        taskTracker.addConfig("zk.client", "curator");  //        taskTracker.addConfig("lts.remoting.serializable.default", "fastjson"); //        taskTracker.addConfig(SpiKey.LTS_JSON, "ltsjson");         taskTracker.start();          Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {             @Override             public void run() {                 taskTracker.stop();             }         }));     } } " compose:StringConcatenation merge: LineBased]
