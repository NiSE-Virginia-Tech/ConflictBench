Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/com/spotify/docker/Utils.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/com/spotify/docker/Utils.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/com/spotify/docker/Utils.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/com/spotify/docker/Utils.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/com/spotify/docker/Utils.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/com/spotify/docker/Utils.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> spotify : Folder]
						[NT -> docker : Folder]
							[NT -> Utils.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.spotify.docker;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.AnsiProgressHandler{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.AnsiProgressHandler;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.DockerClient{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.DockerClient;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.DockerException{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.DockerException;" compose:Replacement merge: Default]
									[T -> org.apache.maven.plugin.MojoExecutionException{ImportPackage} : ImportDeclaration "import org.apache.maven.plugin.MojoExecutionException;" compose:Replacement merge: Default]
									[T -> org.apache.maven.plugin.logging.Log{ImportPackage} : ImportDeclaration "import org.apache.maven.plugin.logging.Log;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> com.google.common.base.Strings.isNullOrEmpty{ImportPackage} : ImportDeclaration "import static com.google.common.base.Strings.isNullOrEmpty;" compose:Replacement merge: Default]
									[NT -> Utils : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> Utils : Id "Utils" compose:Replacement merge: Default]
										[T -> parseImageName(String-String) : MethodDecl "public static String[] parseImageName(String imageName) throws MojoExecutionException {     if (isNullOrEmpty(imageName)) {       throw new MojoExecutionException("You must specify an \"imageName\" in your "                                        + "docker-maven-client's plugin configuration");     }     final int lastSlashIndex = imageName.lastIndexOf('/');     final int lastColonIndex = imageName.lastIndexOf(':');      // assume name doesn't contain tag by default     String repo = imageName;     String tag = null;      // the name contains a tag if lastColonIndex > lastSlashIndex     if (lastColonIndex > lastSlashIndex) {       repo = imageName.substring(0, lastColonIndex);       tag = imageName.substring(lastColonIndex + 1);       // handle case where tag is empty string (e.g. 'repo:')       if (tag.isEmpty()) {         tag = null;       }     }      return new String[] { repo, tag };   }" compose:Replacement merge: LineBased]
										[T -> pushImage(DockerClient-DockerClient-String-String-Log-Log) : MethodDecl "public static void pushImage(DockerClient docker, String imageName, Log log)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       log.info("Pushing " + imageName);       docker.push(imageName, new AnsiProgressHandler());   }" compose:Replacement merge: LineBased]
										[T -> pushImageTag(DockerClient-DockerClient-String-String-List<String>-List<String>-Log-Log) : MethodDecl "public static void pushImageTag(DockerClient docker, String imageName,                                 List<String> imageTags, Log log)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       // tags should not be empty if you have specified the option to push tags       if (imageTags.isEmpty()) {         throw new MojoExecutionException("You have used option \"pushImageTag\" but have"                                          + " not specified an \"imageTag\" in your"                                          + " docker-maven-client's plugin configuration");       }       for (final String imageTag : imageTags) {        final String imageNameWithTag = imageName + ":" + imageTag;        log.info("Pushing " + imageName + ":" + imageTag);        docker.push(imageNameWithTag, new AnsiProgressHandler());       }   }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> spotify : Folder]
						[NT -> docker : Folder]
							[NT -> Utils.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.spotify.docker;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.AnsiProgressHandler{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.AnsiProgressHandler;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.DockerClient{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.DockerClient;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.DockerException{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.DockerException;" compose:Replacement merge: Default]
									[T -> org.apache.maven.plugin.MojoExecutionException{ImportPackage} : ImportDeclaration "import org.apache.maven.plugin.MojoExecutionException;" compose:Replacement merge: Default]
									[T -> org.apache.maven.plugin.logging.Log{ImportPackage} : ImportDeclaration "import org.apache.maven.plugin.logging.Log;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> com.google.common.base.Strings.isNullOrEmpty{ImportPackage} : ImportDeclaration "import static com.google.common.base.Strings.isNullOrEmpty;" compose:Replacement merge: Default]
									[NT -> Utils : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> Utils : Id "Utils" compose:Replacement merge: Default]
										[T -> parseImageName(String-String) : MethodDecl "public static String[] parseImageName(String imageName) throws MojoExecutionException {     if (isNullOrEmpty(imageName)) {       throw new MojoExecutionException("You must specify an \"imageName\" in your "                                        + "docker-maven-client's plugin configuration");     }     final int lastSlashIndex = imageName.lastIndexOf('/');     final int lastColonIndex = imageName.lastIndexOf(':');      // assume name doesn't contain tag by default     String repo = imageName;     String tag = null;      // the name contains a tag if lastColonIndex > lastSlashIndex     if (lastColonIndex > lastSlashIndex) {       repo = imageName.substring(0, lastColonIndex);       tag = imageName.substring(lastColonIndex + 1);       // handle case where tag is empty string (e.g. 'repo:')       if (tag.isEmpty()) {         tag = null;       }     }      return new String[] { repo, tag };   }" compose:Replacement merge: LineBased]
										[T -> pushImage(DockerClient-DockerClient-String-String-Log-Log) : MethodDecl "public static void pushImage(DockerClient docker, String imageName, Log log)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       log.info("Pushing " + imageName);       docker.push(imageName, new AnsiProgressHandler());   }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> spotify : Folder]
						[NT -> docker : Folder]
							[NT -> Utils.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.spotify.docker;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.AnsiProgressHandler{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.AnsiProgressHandler;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.DockerClient{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.DockerClient;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.DockerException{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.DockerException;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.ProgressHandler{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.ProgressHandler;" compose:Replacement merge: Default]
									[T -> com.spotify.docker.client.messages.ProgressMessage{ImportPackage} : ImportDeclaration "import com.spotify.docker.client.messages.ProgressMessage;" compose:Replacement merge: Default]
									[T -> org.apache.maven.plugin.MojoExecutionException{ImportPackage} : ImportDeclaration "import org.apache.maven.plugin.MojoExecutionException;" compose:Replacement merge: Default]
									[T -> org.apache.maven.plugin.logging.Log{ImportPackage} : ImportDeclaration "import org.apache.maven.plugin.logging.Log;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.nio.file.Files{ImportPackage} : ImportDeclaration "import java.nio.file.Files;" compose:Replacement merge: Default]
									[T -> java.nio.file.Path{ImportPackage} : ImportDeclaration "import java.nio.file.Path;" compose:Replacement merge: Default]
									[T -> java.nio.file.Paths{ImportPackage} : ImportDeclaration "import java.nio.file.Paths;" compose:Replacement merge: Default]
									[T -> com.google.common.base.Strings.isNullOrEmpty{ImportPackage} : ImportDeclaration "import static com.google.common.base.Strings.isNullOrEmpty;" compose:Replacement merge: Default]
									[NT -> Utils : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> Utils : Id "Utils" compose:Replacement merge: Default]
										[T -> parseImageName(String-String) : MethodDecl "public static String[] parseImageName(String imageName) throws MojoExecutionException {     if (isNullOrEmpty(imageName)) {       throw new MojoExecutionException("You must specify an \"imageName\" in your "                                        + "docker-maven-client's plugin configuration");     }     final int lastSlashIndex = imageName.lastIndexOf('/');     final int lastColonIndex = imageName.lastIndexOf(':');      // assume name doesn't contain tag by default     String repo = imageName;     String tag = null;      // the name contains a tag if lastColonIndex > lastSlashIndex     if (lastColonIndex > lastSlashIndex) {       repo = imageName.substring(0, lastColonIndex);       tag = imageName.substring(lastColonIndex + 1);       // handle case where tag is empty string (e.g. 'repo:')       if (tag.isEmpty()) {         tag = null;       }     }      return new String[] { repo, tag };   }" compose:Replacement merge: LineBased]
										[T -> pushImage(DockerClient-DockerClient-String-String-Log-Log-DockerBuildInformation-DockerBuildInformation) : MethodDecl "public static void pushImage(DockerClient docker, String imageName, Log log,                                final DockerBuildInformation buildInfo)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       log.info("Pushing " + imageName);      final AnsiProgressHandler ansiProgressHandler = new AnsiProgressHandler();     final DigestExtractingProgressHandler handler = new DigestExtractingProgressHandler(         ansiProgressHandler);      docker.push(imageName, handler);      if (buildInfo != null) {       final String imageNameWithoutTag = parseImageName(imageName)[0];       buildInfo.setDigest(imageNameWithoutTag + "@" + handler.digest());     }   }" compose:Replacement merge: LineBased]
										[T -> writeImageInfoFile(DockerBuildInformation-DockerBuildInformation-String-String) : MethodDecl "public static void writeImageInfoFile(final DockerBuildInformation buildInfo,                                         final String tagInfoFile) throws IOException {     final Path imageInfoPath = Paths.get(tagInfoFile);     if (imageInfoPath.getParent() != null) {       Files.createDirectories(imageInfoPath.getParent());     }     Files.write(imageInfoPath, buildInfo.toJsonBytes());   }" compose:Replacement merge: LineBased]
										[NT -> DigestExtractingProgressHandler : InnerClassDecl]
											[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> DigestExtractingProgressHandler : Id "DigestExtractingProgressHandler" compose:Replacement merge: Default]
											[T -> ImplList : ImplementsList "implements ProgressHandler" compose:Replacement merge: SemanticConflict]
											[T -> delegate : FieldDecl "private final ProgressHandler delegate;" compose:Replacement merge: SemanticConflict]
											[T -> digest : FieldDecl "private String digest;" compose:Replacement merge: SemanticConflict]
											[T -> DigestExtractingProgressHandler(ProgressHandler-ProgressHandler) : ConstructorDecl "DigestExtractingProgressHandler(final ProgressHandler delegate) {       this.delegate = delegate;     }" compose:Replacement merge: LineBased]
											[T -> progress(ProgressMessage-ProgressMessage) : MethodDecl "@Override     public void progress(final ProgressMessage message) throws DockerException {       if (message.digest() != null) {         digest = message.digest();       }        delegate.progress(message);     }" compose:Replacement merge: LineBased]
											[T -> digest({FormalParametersInternal}) : MethodDecl "public String digest() {       return digest;     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> spotify : Folder]
						[NT -> docker : Folder]
							[NT -> Utils.java.merge : .java.merge-File]
								[T -> Utils.java : .java-Content "/*  * Copyright (c) 2014 Spotify AB.  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package com.spotify.docker;  import com.spotify.docker.client.AnsiProgressHandler; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException;  import org.apache.maven.plugin.MojoExecutionException; import org.apache.maven.plugin.logging.Log;  import java.io.IOException; import java.util.List;  import static com.google.common.base.Strings.isNullOrEmpty;  public class Utils {    public static String[] parseImageName(String imageName) throws MojoExecutionException {     if (isNullOrEmpty(imageName)) {       throw new MojoExecutionException("You must specify an \"imageName\" in your "                                        + "docker-maven-client's plugin configuration");     }     final int lastSlashIndex = imageName.lastIndexOf('/');     final int lastColonIndex = imageName.lastIndexOf(':');      // assume name doesn't contain tag by default     String repo = imageName;     String tag = null;      // the name contains a tag if lastColonIndex > lastSlashIndex     if (lastColonIndex > lastSlashIndex) {       repo = imageName.substring(0, lastColonIndex);       tag = imageName.substring(lastColonIndex + 1);       // handle case where tag is empty string (e.g. 'repo:')       if (tag.isEmpty()) {         tag = null;       }     }      return new String[] { repo, tag };   }    public static void pushImage(DockerClient docker, String imageName, Log log)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       log.info("Pushing " + imageName);       docker.push(imageName, new AnsiProgressHandler());   }    // push just the tags listed in the pom rather than all images using imageName   public static void pushImageTag(DockerClient docker, String imageName,                                 List<String> imageTags, Log log)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       // tags should not be empty if you have specified the option to push tags       if (imageTags.isEmpty()) {         throw new MojoExecutionException("You have used option \"pushImageTag\" but have"                                          + " not specified an \"imageTag\" in your"                                          + " docker-maven-client's plugin configuration");       }       for (final String imageTag : imageTags) {        final String imageNameWithTag = imageName + ":" + imageTag;        log.info("Pushing " + imageName + ":" + imageTag);        docker.push(imageNameWithTag, new AnsiProgressHandler());       }   } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> spotify : Folder]
						[NT -> docker : Folder]
							[NT -> Utils.java.merge : .java.merge-File]
								[T -> Utils.java : .java-Content "/*  * Copyright (c) 2014 Spotify AB.  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package com.spotify.docker;  import com.spotify.docker.client.AnsiProgressHandler; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException;  import org.apache.maven.plugin.MojoExecutionException; import org.apache.maven.plugin.logging.Log;  import java.io.IOException;  import static com.google.common.base.Strings.isNullOrEmpty;  public class Utils {    public static String[] parseImageName(String imageName) throws MojoExecutionException {     if (isNullOrEmpty(imageName)) {       throw new MojoExecutionException("You must specify an \"imageName\" in your "                                        + "docker-maven-client's plugin configuration");     }     final int lastSlashIndex = imageName.lastIndexOf('/');     final int lastColonIndex = imageName.lastIndexOf(':');      // assume name doesn't contain tag by default     String repo = imageName;     String tag = null;      // the name contains a tag if lastColonIndex > lastSlashIndex     if (lastColonIndex > lastSlashIndex) {       repo = imageName.substring(0, lastColonIndex);       tag = imageName.substring(lastColonIndex + 1);       // handle case where tag is empty string (e.g. 'repo:')       if (tag.isEmpty()) {         tag = null;       }     }      return new String[] { repo, tag };   }    public static void pushImage(DockerClient docker, String imageName, Log log)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       log.info("Pushing " + imageName);       docker.push(imageName, new AnsiProgressHandler());   }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> spotify : Folder]
						[NT -> docker : Folder]
							[NT -> Utils.java.merge : .java.merge-File]
								[T -> Utils.java : .java-Content "/*  * Copyright (c) 2014 Spotify AB.  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package com.spotify.docker;  import com.spotify.docker.client.AnsiProgressHandler; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException; import com.spotify.docker.client.ProgressHandler; import com.spotify.docker.client.messages.ProgressMessage;  import org.apache.maven.plugin.MojoExecutionException; import org.apache.maven.plugin.logging.Log;  import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths;  import static com.google.common.base.Strings.isNullOrEmpty;  public class Utils {    public static String[] parseImageName(String imageName) throws MojoExecutionException {     if (isNullOrEmpty(imageName)) {       throw new MojoExecutionException("You must specify an \"imageName\" in your "                                        + "docker-maven-client's plugin configuration");     }     final int lastSlashIndex = imageName.lastIndexOf('/');     final int lastColonIndex = imageName.lastIndexOf(':');      // assume name doesn't contain tag by default     String repo = imageName;     String tag = null;      // the name contains a tag if lastColonIndex > lastSlashIndex     if (lastColonIndex > lastSlashIndex) {       repo = imageName.substring(0, lastColonIndex);       tag = imageName.substring(lastColonIndex + 1);       // handle case where tag is empty string (e.g. 'repo:')       if (tag.isEmpty()) {         tag = null;       }     }      return new String[] { repo, tag };   }    public static void pushImage(DockerClient docker, String imageName, Log log,                                final DockerBuildInformation buildInfo)       throws MojoExecutionException, DockerException, IOException, InterruptedException {       log.info("Pushing " + imageName);      final AnsiProgressHandler ansiProgressHandler = new AnsiProgressHandler();     final DigestExtractingProgressHandler handler = new DigestExtractingProgressHandler(         ansiProgressHandler);      docker.push(imageName, handler);      if (buildInfo != null) {       final String imageNameWithoutTag = parseImageName(imageName)[0];       buildInfo.setDigest(imageNameWithoutTag + "@" + handler.digest());     }   }    public static void writeImageInfoFile(final DockerBuildInformation buildInfo,                                         final String tagInfoFile) throws IOException {     final Path imageInfoPath = Paths.get(tagInfoFile);     if (imageInfoPath.getParent() != null) {       Files.createDirectories(imageInfoPath.getParent());     }     Files.write(imageInfoPath, buildInfo.toJsonBytes());   }    private static class DigestExtractingProgressHandler implements ProgressHandler {      private final ProgressHandler delegate;     private String digest;      DigestExtractingProgressHandler(final ProgressHandler delegate) {       this.delegate = delegate;     }      @Override     public void progress(final ProgressMessage message) throws DockerException {       if (message.digest() != null) {         digest = message.digest();       }        delegate.progress(message);     }      public String digest() {       return digest;     }   } } " compose:StringConcatenation merge: LineBased]
