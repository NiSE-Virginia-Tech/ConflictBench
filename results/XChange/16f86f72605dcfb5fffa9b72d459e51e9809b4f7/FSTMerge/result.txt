Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/xchange-binance/src/main/java/org/knowm/xchange/binance/service/BinanceBaseService.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/xchange-binance/src/main/java/org/knowm/xchange/binance/service/BinanceBaseService.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/xchange-binance/src/main/java/org/knowm/xchange/binance/service/BinanceBaseService.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/xchange-binance/src/main/java/org/knowm/xchange/binance/service/BinanceBaseService.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/xchange-binance/src/main/java/org/knowm/xchange/binance/service/BinanceBaseService.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/xchange-binance/src/main/java/org/knowm/xchange/binance/service/BinanceBaseService.java
[NT -> left : Feature]
	[NT -> xchange-binance : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> knowm : Folder]
							[NT -> xchange : Folder]
								[NT -> binance : Folder]
									[NT -> service : Folder]
										[NT -> BinanceBaseService.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.knowm.xchange.binance.service;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.Exchange{ImportPackage} : ImportDeclaration "import org.knowm.xchange.Exchange;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.binance.BinanceAuthenticated{ImportPackage} : ImportDeclaration "import org.knowm.xchange.binance.BinanceAuthenticated;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.binance.dto.meta.exchangeinfo.BinanceExchangeInfo{ImportPackage} : ImportDeclaration "import org.knowm.xchange.binance.dto.meta.exchangeinfo.BinanceExchangeInfo;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.service.BaseExchangeService{ImportPackage} : ImportDeclaration "import org.knowm.xchange.service.BaseExchangeService;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.service.BaseService{ImportPackage} : ImportDeclaration "import org.knowm.xchange.service.BaseService;" compose:Replacement merge: Default]
												[T -> si.mazi.rescu.ParamsDigest{ImportPackage} : ImportDeclaration "import si.mazi.rescu.ParamsDigest;" compose:Replacement merge: Default]
												[T -> si.mazi.rescu.RestProxyFactory{ImportPackage} : ImportDeclaration "import si.mazi.rescu.RestProxyFactory;" compose:Replacement merge: Default]
												[NT -> BinanceBaseService : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> BinanceBaseService : Id "BinanceBaseService" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends BaseExchangeService" compose:Replacement merge: Default]
													[T -> ImplList : ImplementsList "implements BaseService" compose:Replacement merge: SemanticConflict]
													[T -> apiKey : FieldDecl "protected final String apiKey;" compose:Replacement merge: SemanticConflict]
													[T -> binance : FieldDecl "protected final BinanceAuthenticated binance;" compose:Replacement merge: SemanticConflict]
													[T -> signatureCreator : FieldDecl "protected final ParamsDigest signatureCreator;" compose:Replacement merge: SemanticConflict]
													[T -> BinanceBaseService(Exchange-Exchange) : ConstructorDecl "protected BinanceBaseService(Exchange exchange) {     super(exchange);     this.binance = RestProxyFactory.createProxy(BinanceAuthenticated.class, exchange.getExchangeSpecification().getSslUri(), getClientConfig());     this.apiKey = exchange.getExchangeSpecification().getApiKey();     this.signatureCreator = BinanceHmacDigest.createInstance(exchange.getExchangeSpecification().getSecretKey());   }" compose:Replacement merge: LineBased]
													[T -> getTimestamp({FormalParametersInternal}) : MethodDecl "public long getTimestamp() throws IOException {     return binance.time().getServerTime().getTime();   }" compose:Replacement merge: LineBased]
													[T -> getExchangeInfo({FormalParametersInternal}) : MethodDecl "public BinanceExchangeInfo getExchangeInfo() throws IOException {     return binance.exchangeInfo();   }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> xchange-binance : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> knowm : Folder]
							[NT -> xchange : Folder]
								[NT -> binance : Folder]
									[NT -> service : Folder]
										[NT -> BinanceBaseService.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.knowm.xchange.binance.service;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.Exchange{ImportPackage} : ImportDeclaration "import org.knowm.xchange.Exchange;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.binance.BinanceAuthenticated{ImportPackage} : ImportDeclaration "import org.knowm.xchange.binance.BinanceAuthenticated;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.service.BaseExchangeService{ImportPackage} : ImportDeclaration "import org.knowm.xchange.service.BaseExchangeService;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.service.BaseService{ImportPackage} : ImportDeclaration "import org.knowm.xchange.service.BaseService;" compose:Replacement merge: Default]
												[T -> si.mazi.rescu.ParamsDigest{ImportPackage} : ImportDeclaration "import si.mazi.rescu.ParamsDigest;" compose:Replacement merge: Default]
												[T -> si.mazi.rescu.RestProxyFactory{ImportPackage} : ImportDeclaration "import si.mazi.rescu.RestProxyFactory;" compose:Replacement merge: Default]
												[NT -> BinanceBaseService : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> BinanceBaseService : Id "BinanceBaseService" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends BaseExchangeService" compose:Replacement merge: Default]
													[T -> ImplList : ImplementsList "implements BaseService" compose:Replacement merge: SemanticConflict]
													[T -> apiKey : FieldDecl "protected final String apiKey;" compose:Replacement merge: SemanticConflict]
													[T -> binance : FieldDecl "protected final BinanceAuthenticated binance;" compose:Replacement merge: SemanticConflict]
													[T -> signatureCreator : FieldDecl "protected final ParamsDigest signatureCreator;" compose:Replacement merge: SemanticConflict]
													[T -> BinanceBaseService(Exchange-Exchange) : ConstructorDecl "protected BinanceBaseService(Exchange exchange) {     super(exchange);     this.binance = RestProxyFactory.createProxy(BinanceAuthenticated.class, exchange.getExchangeSpecification().getSslUri(), getClientConfig());     this.apiKey = exchange.getExchangeSpecification().getApiKey();     this.signatureCreator = BinanceHmacDigest.createInstance(exchange.getExchangeSpecification().getSecretKey());   }" compose:Replacement merge: LineBased]
													[T -> getTimestamp({FormalParametersInternal}) : MethodDecl "public long getTimestamp() throws IOException {     return binance.time().getServerTime().getTime();   }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> xchange-binance : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> knowm : Folder]
							[NT -> xchange : Folder]
								[NT -> binance : Folder]
									[NT -> service : Folder]
										[NT -> BinanceBaseService.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.knowm.xchange.binance.service;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.Exchange{ImportPackage} : ImportDeclaration "import org.knowm.xchange.Exchange;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.binance.BinanceAuthenticated{ImportPackage} : ImportDeclaration "import org.knowm.xchange.binance.BinanceAuthenticated;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.binance.BinanceExchange{ImportPackage} : ImportDeclaration "import org.knowm.xchange.binance.BinanceExchange;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.service.BaseExchangeService{ImportPackage} : ImportDeclaration "import org.knowm.xchange.service.BaseExchangeService;" compose:Replacement merge: Default]
												[T -> org.knowm.xchange.service.BaseService{ImportPackage} : ImportDeclaration "import org.knowm.xchange.service.BaseService;" compose:Replacement merge: Default]
												[T -> si.mazi.rescu.ParamsDigest{ImportPackage} : ImportDeclaration "import si.mazi.rescu.ParamsDigest;" compose:Replacement merge: Default]
												[T -> si.mazi.rescu.RestProxyFactory{ImportPackage} : ImportDeclaration "import si.mazi.rescu.RestProxyFactory;" compose:Replacement merge: Default]
												[NT -> BinanceBaseService : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> BinanceBaseService : Id "BinanceBaseService" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends BaseExchangeService" compose:Replacement merge: Default]
													[T -> ImplList : ImplementsList "implements BaseService" compose:Replacement merge: SemanticConflict]
													[T -> apiKey : FieldDecl "protected final String apiKey;" compose:Replacement merge: SemanticConflict]
													[T -> binance : FieldDecl "protected final BinanceAuthenticated binance;" compose:Replacement merge: SemanticConflict]
													[T -> signatureCreator : FieldDecl "protected final ParamsDigest signatureCreator;" compose:Replacement merge: SemanticConflict]
													[T -> BinanceBaseService(Exchange-Exchange) : ConstructorDecl "protected BinanceBaseService(Exchange exchange) {     super(exchange);     this.binance = RestProxyFactory.createProxy(BinanceAuthenticated.class, exchange.getExchangeSpecification().getSslUri(), getClientConfig());     this.apiKey = exchange.getExchangeSpecification().getApiKey();     this.signatureCreator = BinanceHmacDigest.createInstance(exchange.getExchangeSpecification().getSecretKey());   }" compose:Replacement merge: LineBased]
													[T -> getTimestamp({FormalParametersInternal}) : MethodDecl "public long getTimestamp() throws IOException {     return System.currentTimeMillis() + ((BinanceExchange) exchange).deltaServerTime();   }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> xchange-binance : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> knowm : Folder]
							[NT -> xchange : Folder]
								[NT -> binance : Folder]
									[NT -> service : Folder]
										[NT -> BinanceBaseService.java.merge : .java.merge-File]
											[T -> BinanceBaseService.java : .java-Content "package org.knowm.xchange.binance.service;  import java.io.IOException;  import org.knowm.xchange.Exchange; import org.knowm.xchange.binance.BinanceAuthenticated; import org.knowm.xchange.binance.dto.meta.exchangeinfo.BinanceExchangeInfo; import org.knowm.xchange.service.BaseExchangeService; import org.knowm.xchange.service.BaseService;  import si.mazi.rescu.ParamsDigest; import si.mazi.rescu.RestProxyFactory;  public class BinanceBaseService extends BaseExchangeService implements BaseService {    protected final String apiKey;   protected final BinanceAuthenticated binance;   protected final ParamsDigest signatureCreator;    protected BinanceBaseService(Exchange exchange) {     super(exchange);     this.binance = RestProxyFactory.createProxy(BinanceAuthenticated.class, exchange.getExchangeSpecification().getSslUri(), getClientConfig());     this.apiKey = exchange.getExchangeSpecification().getApiKey();     this.signatureCreator = BinanceHmacDigest.createInstance(exchange.getExchangeSpecification().getSecretKey());   }    public long getTimestamp() throws IOException {     return binance.time().getServerTime().getTime();   }    public BinanceExchangeInfo getExchangeInfo() throws IOException {     return binance.exchangeInfo();   } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> xchange-binance : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> knowm : Folder]
							[NT -> xchange : Folder]
								[NT -> binance : Folder]
									[NT -> service : Folder]
										[NT -> BinanceBaseService.java.merge : .java.merge-File]
											[T -> BinanceBaseService.java : .java-Content "package org.knowm.xchange.binance.service;  import java.io.IOException;  import org.knowm.xchange.Exchange; import org.knowm.xchange.binance.BinanceAuthenticated; import org.knowm.xchange.service.BaseExchangeService; import org.knowm.xchange.service.BaseService;  import si.mazi.rescu.ParamsDigest; import si.mazi.rescu.RestProxyFactory;  public class BinanceBaseService extends BaseExchangeService implements BaseService {    protected final String apiKey;   protected final BinanceAuthenticated binance;   protected final ParamsDigest signatureCreator;    protected BinanceBaseService(Exchange exchange) {     super(exchange);     this.binance = RestProxyFactory.createProxy(BinanceAuthenticated.class, exchange.getExchangeSpecification().getSslUri(), getClientConfig());     this.apiKey = exchange.getExchangeSpecification().getApiKey();     this.signatureCreator = BinanceHmacDigest.createInstance(exchange.getExchangeSpecification().getSecretKey());   }    public long getTimestamp() throws IOException {     return binance.time().getServerTime().getTime();   }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> xchange-binance : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> knowm : Folder]
							[NT -> xchange : Folder]
								[NT -> binance : Folder]
									[NT -> service : Folder]
										[NT -> BinanceBaseService.java.merge : .java.merge-File]
											[T -> BinanceBaseService.java : .java-Content "package org.knowm.xchange.binance.service;  import java.io.IOException;  import org.knowm.xchange.Exchange; import org.knowm.xchange.binance.BinanceAuthenticated; import org.knowm.xchange.binance.BinanceExchange; import org.knowm.xchange.service.BaseExchangeService; import org.knowm.xchange.service.BaseService;  import si.mazi.rescu.ParamsDigest; import si.mazi.rescu.RestProxyFactory;  public class BinanceBaseService extends BaseExchangeService implements BaseService {    protected final String apiKey;   protected final BinanceAuthenticated binance;   protected final ParamsDigest signatureCreator;    protected BinanceBaseService(Exchange exchange) {     super(exchange);     this.binance = RestProxyFactory.createProxy(BinanceAuthenticated.class, exchange.getExchangeSpecification().getSslUri(), getClientConfig());     this.apiKey = exchange.getExchangeSpecification().getApiKey();     this.signatureCreator = BinanceHmacDigest.createInstance(exchange.getExchangeSpecification().getSecretKey());   }    public long getTimestamp() throws IOException {     return System.currentTimeMillis() + ((BinanceExchange) exchange).deltaServerTime();   }  } " compose:StringConcatenation merge: LineBased]
