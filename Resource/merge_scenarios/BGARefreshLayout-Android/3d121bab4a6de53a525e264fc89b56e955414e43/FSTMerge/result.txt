Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/RefreshRecyclerViewFragment.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/RefreshRecyclerViewFragment.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/RefreshRecyclerViewFragment.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/RefreshRecyclerViewFragment.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/RefreshRecyclerViewFragment.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/RefreshRecyclerViewFragment.java
[NT -> left : Feature]
	[NT -> demo : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> cn : Folder]
						[NT -> bingoogolapple : Folder]
							[NT -> refreshlayout : Folder]
								[NT -> demo : Folder]
									[NT -> ui : Folder]
										[NT -> fragment : Folder]
											[NT -> RefreshRecyclerViewFragment.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package cn.bingoogolapple.refreshlayout.demo.ui.fragment;" compose:Replacement merge: Default]
													[T -> android.os.Bundle{ImportPackage} : ImportDeclaration "import android.os.Bundle;" compose:Replacement merge: Default]
													[T -> android.os.Handler{ImportPackage} : ImportDeclaration "import android.os.Handler;" compose:Replacement merge: Default]
													[T -> android.support.v7.widget.LinearLayoutManager{ImportPackage} : ImportDeclaration "import android.support.v7.widget.LinearLayoutManager;" compose:Replacement merge: Default]
													[T -> android.support.v7.widget.RecyclerView{ImportPackage} : ImportDeclaration "import android.support.v7.widget.RecyclerView;" compose:Replacement merge: Default]
													[T -> android.util.Log{ImportPackage} : ImportDeclaration "import android.util.Log;" compose:Replacement merge: Default]
													[T -> android.view.View{ImportPackage} : ImportDeclaration "import android.view.View;" compose:Replacement merge: Default]
													[T -> android.view.ViewGroup{ImportPackage} : ImportDeclaration "import android.view.ViewGroup;" compose:Replacement merge: Default]
													[T -> android.widget.TextView{ImportPackage} : ImportDeclaration "import android.widget.TextView;" compose:Replacement merge: Default]
													[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.BGAMoocStyleRefreshViewHolder{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.BGAMoocStyleRefreshViewHolder;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.BGARefreshLayout{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.BGARefreshLayout;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.R{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.R;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.model.RefreshModel{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.model.RefreshModel;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.util.ToastUtil{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.util.ToastUtil;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.widget.Divider{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.widget.Divider;" compose:Replacement merge: Default]
													[T -> retrofit.Callback{ImportPackage} : ImportDeclaration "import retrofit.Callback;" compose:Replacement merge: Default]
													[T -> retrofit.Response{ImportPackage} : ImportDeclaration "import retrofit.Response;" compose:Replacement merge: Default]
													[T -> retrofit.Retrofit{ImportPackage} : ImportDeclaration "import retrofit.Retrofit;" compose:Replacement merge: Default]
													[NT -> RefreshRecyclerViewFragment : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> RefreshRecyclerViewFragment : Id "RefreshRecyclerViewFragment" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends BaseFragment" compose:Replacement merge: Default]
														[T -> ImplList : ImplementsList "implements BGARefreshLayout.BGARefreshLayoutDelegate, BGAOnRVItemClickListener, BGAOnRVItemLongClickListener, BGAOnItemChildClickListener, BGAOnItemChildLongClickListener" compose:Replacement merge: SemanticConflict]
														[T -> TAG : FieldDecl "private static final String TAG = RefreshRecyclerViewFragment.class.getSimpleName();" compose:Replacement merge: SemanticConflict]
														[T -> mAdapter : FieldDecl "private NormalRecyclerViewAdapter mAdapter;" compose:Replacement merge: SemanticConflict]
														[T -> mRefreshLayout : FieldDecl "private BGARefreshLayout mRefreshLayout;" compose:Replacement merge: SemanticConflict]
														[T -> mDataRv : FieldDecl "private RecyclerView mDataRv;" compose:Replacement merge: SemanticConflict]
														[T -> mNewPageNumber : FieldDecl "private int mNewPageNumber = 0;" compose:Replacement merge: SemanticConflict]
														[T -> mMorePageNumber : FieldDecl "private int mMorePageNumber = 0;" compose:Replacement merge: SemanticConflict]
														[T -> initView(Bundle-Bundle) : MethodDecl "@Override     protected void initView(Bundle savedInstanceState) {         setContentView(R.layout.fragment_recyclerview_refresh);         mRefreshLayout = getViewById(R.id.rl_recyclerview_refresh);         mDataRv = getViewById(R.id.rv_recyclerview_data);     }" compose:Replacement merge: LineBased]
														[T -> setListener({FormalParametersInternal}) : MethodDecl "@Override     protected void setListener() {         mRefreshLayout.setDelegate(this);          mAdapter = new NormalRecyclerViewAdapter(mDataRv);         mAdapter.setOnRVItemClickListener(this);         mAdapter.setOnRVItemLongClickListener(this);         mAdapter.setOnItemChildClickListener(this);         mAdapter.setOnItemChildLongClickListener(this);          // 使用addOnScrollListener，而不是setOnScrollListener();         mDataRv.addOnScrollListener(new RecyclerView.OnScrollListener() {             @Override             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                 Log.i(TAG, "测试自定义onScrollStateChanged被调用");             }              @Override             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                 Log.i(TAG, "测试自定义onScrolled被调用");             }         });     }" compose:Replacement merge: LineBased]
														[T -> processLogic(Bundle-Bundle) : MethodDecl "@Override     protected void processLogic(Bundle savedInstanceState) { //        mRefreshLayout.setCustomHeaderView(DataEngine.getCustomHeaderView(mApp), true);          View headerView = View.inflate(mApp, R.layout.view_custom_header2, null);          // 测试自定义header中控件的点击事件         headerView.findViewById(R.id.btn_custom_header2_test).setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 ToastUtil.show("点击了测试按钮");             }         });         // 模拟网络数据加载，测试动态改变自定义header的高度         new Handler().postDelayed(new Runnable() {             @Override             public void run() {                 ((TextView) getViewById(R.id.tv_custom_header2_title)).setText(R.string.test_custom_header_title);                 ((TextView) getViewById(R.id.tv_custom_header2_desc)).setText(R.string.test_custom_header_desc);             }         }, 2000);         mRefreshLayout.setCustomHeaderView(headerView, true);  //        BGAStickinessRefreshViewHolder stickinessRefreshViewHolder = new BGAStickinessRefreshViewHolder(mApp, true); //        stickinessRefreshViewHolder.setStickinessColor(Color.parseColor("#11cd6e")); //        stickinessRefreshViewHolder.setRotateDrawable(getResources().getDrawable(R.mipmap.custom_stickiness_roate)); //        mRefreshLayout.setRefreshViewHolder(stickinessRefreshViewHolder);          mRefreshLayout.setRefreshViewHolder(new BGAMoocStyleRefreshViewHolder(mApp, true));          mDataRv.addItemDecoration(new Divider(mApp));  //        GridLayoutManager gridLayoutManager = new GridLayoutManager(mApp, 2); //        gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL); //        mDataRv.setLayoutManager(gridLayoutManager);          mDataRv.setLayoutManager(new LinearLayoutManager(mApp, LinearLayoutManager.VERTICAL, false));          mDataRv.setAdapter(mAdapter);     }" compose:Replacement merge: LineBased]
														[T -> onUserVisible({FormalParametersInternal}) : MethodDecl "@Override     protected void onUserVisible() {         mNewPageNumber = 0;         mMorePageNumber = 0;         mEngine.loadInitDatas().enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(Response<List<RefreshModel>> response, Retrofit retrofit) {                 mAdapter.setDatas(response.body());             }              @Override             public void onFailure(Throwable t) {             }         });     }" compose:Replacement merge: LineBased]
														[T -> onBGARefreshLayoutBeginRefreshing(BGARefreshLayout-BGARefreshLayout) : MethodDecl "@Override     public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {         mNewPageNumber++;         if (mNewPageNumber > 4) {             mRefreshLayout.endRefreshing();             showToast("没有最新数据了");             return;         }          showLoadingDialog();         mEngine.loadNewData(mNewPageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endRefreshing();                         dismissLoadingDialog();                         mAdapter.addNewDatas(response.body());                         mDataRv.smoothScrollToPosition(0);                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endRefreshing();                 dismissLoadingDialog();             }         });     }" compose:Replacement merge: LineBased]
														[T -> onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout-BGARefreshLayout) : MethodDecl "@Override     public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {         mMorePageNumber++;         if (mMorePageNumber > 5) {             mRefreshLayout.endLoadingMore();             showToast("没有更多数据了");             return false;         }          showLoadingDialog();         mEngine.loadMoreData(mMorePageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endLoadingMore();                         dismissLoadingDialog();                         mAdapter.addMoreDatas(response.body());                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endLoadingMore();                 dismissLoadingDialog();             }         });          return true;     }" compose:Replacement merge: LineBased]
														[T -> onItemChildClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public void onItemChildClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             mAdapter.removeItem(position);         }     }" compose:Replacement merge: LineBased]
														[T -> onItemChildLongClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public boolean onItemChildLongClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             showToast("长按了删除 " + mAdapter.getItem(position).title);             return true;         }         return false;     }" compose:Replacement merge: LineBased]
														[T -> onRVItemClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public void onRVItemClick(ViewGroup parent, View itemView, int position) {         showToast("点击了条目 " + mAdapter.getItem(position).title);     }" compose:Replacement merge: LineBased]
														[T -> onRVItemLongClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public boolean onRVItemLongClick(ViewGroup parent, View itemView, int position) {         showToast("长按了条目 " + mAdapter.getItem(position).title);         return true;     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> demo : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> cn : Folder]
						[NT -> bingoogolapple : Folder]
							[NT -> refreshlayout : Folder]
								[NT -> demo : Folder]
									[NT -> ui : Folder]
										[NT -> fragment : Folder]
											[NT -> RefreshRecyclerViewFragment.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package cn.bingoogolapple.refreshlayout.demo.ui.fragment;" compose:Replacement merge: Default]
													[T -> android.graphics.Color{ImportPackage} : ImportDeclaration "import android.graphics.Color;" compose:Replacement merge: Default]
													[T -> android.os.Bundle{ImportPackage} : ImportDeclaration "import android.os.Bundle;" compose:Replacement merge: Default]
													[T -> android.os.Handler{ImportPackage} : ImportDeclaration "import android.os.Handler;" compose:Replacement merge: Default]
													[T -> android.support.v7.widget.LinearLayoutManager{ImportPackage} : ImportDeclaration "import android.support.v7.widget.LinearLayoutManager;" compose:Replacement merge: Default]
													[T -> android.support.v7.widget.RecyclerView{ImportPackage} : ImportDeclaration "import android.support.v7.widget.RecyclerView;" compose:Replacement merge: Default]
													[T -> android.util.Log{ImportPackage} : ImportDeclaration "import android.util.Log;" compose:Replacement merge: Default]
													[T -> android.view.View{ImportPackage} : ImportDeclaration "import android.view.View;" compose:Replacement merge: Default]
													[T -> android.view.ViewGroup{ImportPackage} : ImportDeclaration "import android.view.ViewGroup;" compose:Replacement merge: Default]
													[T -> android.widget.TextView{ImportPackage} : ImportDeclaration "import android.widget.TextView;" compose:Replacement merge: Default]
													[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.BGARefreshLayout{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.BGARefreshLayout;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.BGAStickinessRefreshViewHolder{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.BGAStickinessRefreshViewHolder;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.R{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.R;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.model.RefreshModel{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.model.RefreshModel;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.util.ToastUtil{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.util.ToastUtil;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.widget.Divider{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.widget.Divider;" compose:Replacement merge: Default]
													[T -> retrofit.Callback{ImportPackage} : ImportDeclaration "import retrofit.Callback;" compose:Replacement merge: Default]
													[T -> retrofit.Response{ImportPackage} : ImportDeclaration "import retrofit.Response;" compose:Replacement merge: Default]
													[T -> retrofit.Retrofit{ImportPackage} : ImportDeclaration "import retrofit.Retrofit;" compose:Replacement merge: Default]
													[NT -> RefreshRecyclerViewFragment : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> RefreshRecyclerViewFragment : Id "RefreshRecyclerViewFragment" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends BaseFragment" compose:Replacement merge: Default]
														[T -> ImplList : ImplementsList "implements BGARefreshLayout.BGARefreshLayoutDelegate, BGAOnRVItemClickListener, BGAOnRVItemLongClickListener, BGAOnItemChildClickListener, BGAOnItemChildLongClickListener" compose:Replacement merge: SemanticConflict]
														[T -> TAG : FieldDecl "private static final String TAG = RefreshRecyclerViewFragment.class.getSimpleName();" compose:Replacement merge: SemanticConflict]
														[T -> mAdapter : FieldDecl "private NormalRecyclerViewAdapter mAdapter;" compose:Replacement merge: SemanticConflict]
														[T -> mRefreshLayout : FieldDecl "private BGARefreshLayout mRefreshLayout;" compose:Replacement merge: SemanticConflict]
														[T -> mDataRv : FieldDecl "private RecyclerView mDataRv;" compose:Replacement merge: SemanticConflict]
														[T -> mNewPageNumber : FieldDecl "private int mNewPageNumber = 0;" compose:Replacement merge: SemanticConflict]
														[T -> mMorePageNumber : FieldDecl "private int mMorePageNumber = 0;" compose:Replacement merge: SemanticConflict]
														[T -> initView(Bundle-Bundle) : MethodDecl "@Override     protected void initView(Bundle savedInstanceState) {         setContentView(R.layout.fragment_recyclerview_refresh);         mRefreshLayout = getViewById(R.id.rl_recyclerview_refresh);         mDataRv = getViewById(R.id.rv_recyclerview_data);     }" compose:Replacement merge: LineBased]
														[T -> setListener({FormalParametersInternal}) : MethodDecl "@Override     protected void setListener() {         mRefreshLayout.setDelegate(this);          mAdapter = new NormalRecyclerViewAdapter(mDataRv);         mAdapter.setOnRVItemClickListener(this);         mAdapter.setOnRVItemLongClickListener(this);         mAdapter.setOnItemChildClickListener(this);         mAdapter.setOnItemChildLongClickListener(this);          // 使用addOnScrollListener，而不是setOnScrollListener();         mDataRv.addOnScrollListener(new RecyclerView.OnScrollListener() {             @Override             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                 Log.i(TAG, "测试自定义onScrollStateChanged被调用");             }              @Override             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                 Log.i(TAG, "测试自定义onScrolled被调用");             }         });     }" compose:Replacement merge: LineBased]
														[T -> processLogic(Bundle-Bundle) : MethodDecl "@Override     protected void processLogic(Bundle savedInstanceState) { //        mRefreshLayout.setCustomHeaderView(DataEngine.getCustomHeaderView(mApp), true);          View headerView = View.inflate(mApp, R.layout.view_custom_header2, null);          // 测试自定义header中控件的点击事件         headerView.findViewById(R.id.btn_custom_header2_test).setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 ToastUtil.show("点击了测试按钮");             }         });         // 模拟网络数据加载，测试动态改变自定义header的高度         new Handler().postDelayed(new Runnable() {             @Override             public void run() {                 ((TextView) getViewById(R.id.tv_custom_header2_title)).setText(R.string.test_custom_header_title);                 ((TextView) getViewById(R.id.tv_custom_header2_desc)).setText(R.string.test_custom_header_desc);             }         }, 2000);         mRefreshLayout.setCustomHeaderView(headerView, true);          BGAStickinessRefreshViewHolder stickinessRefreshViewHolder = new BGAStickinessRefreshViewHolder(mApp, true);         stickinessRefreshViewHolder.setStickinessColor(Color.parseColor("#11cd6e"));         stickinessRefreshViewHolder.setRotateDrawable(getResources().getDrawable(R.mipmap.custom_stickiness_roate));         mRefreshLayout.setRefreshViewHolder(stickinessRefreshViewHolder);          mDataRv.addItemDecoration(new Divider(mApp));  //        GridLayoutManager gridLayoutManager = new GridLayoutManager(mApp, 2); //        gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL); //        mDataRv.setLayoutManager(gridLayoutManager);          mDataRv.setLayoutManager(new LinearLayoutManager(mApp, LinearLayoutManager.VERTICAL, false));          mDataRv.setAdapter(mAdapter);     }" compose:Replacement merge: LineBased]
														[T -> onUserVisible({FormalParametersInternal}) : MethodDecl "@Override     protected void onUserVisible() {         mNewPageNumber = 0;         mMorePageNumber = 0;         mEngine.loadInitDatas().enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(Response<List<RefreshModel>> response, Retrofit retrofit) {                 mAdapter.setDatas(response.body());             }              @Override             public void onFailure(Throwable t) {             }         });     }" compose:Replacement merge: LineBased]
														[T -> onBGARefreshLayoutBeginRefreshing(BGARefreshLayout-BGARefreshLayout) : MethodDecl "@Override     public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {         mNewPageNumber++;         if (mNewPageNumber > 4) {             mRefreshLayout.endRefreshing();             showToast("没有最新数据了");             return;         }          showLoadingDialog();         mEngine.loadNewData(mNewPageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endRefreshing();                         dismissLoadingDialog();                         mAdapter.addNewDatas(response.body());                         mDataRv.smoothScrollToPosition(0);                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endRefreshing();                 dismissLoadingDialog();             }         });     }" compose:Replacement merge: LineBased]
														[T -> onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout-BGARefreshLayout) : MethodDecl "@Override     public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {         mMorePageNumber++;         if (mMorePageNumber > 5) {             mRefreshLayout.endLoadingMore();             showToast("没有更多数据了");             return false;         }          showLoadingDialog();         mEngine.loadMoreData(mMorePageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endLoadingMore();                         dismissLoadingDialog();                         mAdapter.addMoreDatas(response.body());                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endLoadingMore();                 dismissLoadingDialog();             }         });          return true;     }" compose:Replacement merge: LineBased]
														[T -> onItemChildClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public void onItemChildClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             mAdapter.removeItem(position);         }     }" compose:Replacement merge: LineBased]
														[T -> onItemChildLongClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public boolean onItemChildLongClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             showToast("长按了删除 " + mAdapter.getItem(position).title);             return true;         }         return false;     }" compose:Replacement merge: LineBased]
														[T -> onRVItemClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public void onRVItemClick(ViewGroup parent, View itemView, int position) {         showToast("点击了条目 " + mAdapter.getItem(position).title);     }" compose:Replacement merge: LineBased]
														[T -> onRVItemLongClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public boolean onRVItemLongClick(ViewGroup parent, View itemView, int position) {         showToast("长按了条目 " + mAdapter.getItem(position).title);         return true;     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> demo : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> cn : Folder]
						[NT -> bingoogolapple : Folder]
							[NT -> refreshlayout : Folder]
								[NT -> demo : Folder]
									[NT -> ui : Folder]
										[NT -> fragment : Folder]
											[NT -> RefreshRecyclerViewFragment.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package cn.bingoogolapple.refreshlayout.demo.ui.fragment;" compose:Replacement merge: Default]
													[T -> android.os.Bundle{ImportPackage} : ImportDeclaration "import android.os.Bundle;" compose:Replacement merge: Default]
													[T -> android.os.Handler{ImportPackage} : ImportDeclaration "import android.os.Handler;" compose:Replacement merge: Default]
													[T -> android.support.v7.widget.LinearLayoutManager{ImportPackage} : ImportDeclaration "import android.support.v7.widget.LinearLayoutManager;" compose:Replacement merge: Default]
													[T -> android.support.v7.widget.RecyclerView{ImportPackage} : ImportDeclaration "import android.support.v7.widget.RecyclerView;" compose:Replacement merge: Default]
													[T -> android.util.Log{ImportPackage} : ImportDeclaration "import android.util.Log;" compose:Replacement merge: Default]
													[T -> android.view.View{ImportPackage} : ImportDeclaration "import android.view.View;" compose:Replacement merge: Default]
													[T -> android.view.ViewGroup{ImportPackage} : ImportDeclaration "import android.view.ViewGroup;" compose:Replacement merge: Default]
													[T -> android.widget.TextView{ImportPackage} : ImportDeclaration "import android.widget.TextView;" compose:Replacement merge: Default]
													[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.BGARefreshLayout{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.BGARefreshLayout;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.BGAStickinessRefreshViewHolder{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.BGAStickinessRefreshViewHolder;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.R{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.R;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.model.RefreshModel{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.model.RefreshModel;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.util.ToastUtil{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.util.ToastUtil;" compose:Replacement merge: Default]
													[T -> cn.bingoogolapple.refreshlayout.demo.widget.Divider{ImportPackage} : ImportDeclaration "import cn.bingoogolapple.refreshlayout.demo.widget.Divider;" compose:Replacement merge: Default]
													[T -> retrofit.Callback{ImportPackage} : ImportDeclaration "import retrofit.Callback;" compose:Replacement merge: Default]
													[T -> retrofit.Response{ImportPackage} : ImportDeclaration "import retrofit.Response;" compose:Replacement merge: Default]
													[T -> retrofit.Retrofit{ImportPackage} : ImportDeclaration "import retrofit.Retrofit;" compose:Replacement merge: Default]
													[NT -> RefreshRecyclerViewFragment : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> RefreshRecyclerViewFragment : Id "RefreshRecyclerViewFragment" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends BaseFragment" compose:Replacement merge: Default]
														[T -> ImplList : ImplementsList "implements BGARefreshLayout.BGARefreshLayoutDelegate, BGAOnRVItemClickListener, BGAOnRVItemLongClickListener, BGAOnItemChildClickListener, BGAOnItemChildLongClickListener" compose:Replacement merge: SemanticConflict]
														[T -> TAG : FieldDecl "private static final String TAG = RefreshRecyclerViewFragment.class.getSimpleName();" compose:Replacement merge: SemanticConflict]
														[T -> mAdapter : FieldDecl "private NormalRecyclerViewAdapter mAdapter;" compose:Replacement merge: SemanticConflict]
														[T -> mRefreshLayout : FieldDecl "private BGARefreshLayout mRefreshLayout;" compose:Replacement merge: SemanticConflict]
														[T -> mDataRv : FieldDecl "private RecyclerView mDataRv;" compose:Replacement merge: SemanticConflict]
														[T -> mNewPageNumber : FieldDecl "private int mNewPageNumber = 0;" compose:Replacement merge: SemanticConflict]
														[T -> mMorePageNumber : FieldDecl "private int mMorePageNumber = 0;" compose:Replacement merge: SemanticConflict]
														[T -> initView(Bundle-Bundle) : MethodDecl "@Override     protected void initView(Bundle savedInstanceState) {         setContentView(R.layout.fragment_recyclerview_refresh);         mRefreshLayout = getViewById(R.id.rl_recyclerview_refresh);         mDataRv = getViewById(R.id.rv_recyclerview_data);     }" compose:Replacement merge: LineBased]
														[T -> setListener({FormalParametersInternal}) : MethodDecl "@Override     protected void setListener() {         mRefreshLayout.setDelegate(this);          mAdapter = new NormalRecyclerViewAdapter(mDataRv);         mAdapter.setOnRVItemClickListener(this);         mAdapter.setOnRVItemLongClickListener(this);         mAdapter.setOnItemChildClickListener(this);         mAdapter.setOnItemChildLongClickListener(this);          // 使用addOnScrollListener，而不是setOnScrollListener();         mDataRv.addOnScrollListener(new RecyclerView.OnScrollListener() {             @Override             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                 Log.i(TAG, "测试自定义onScrollStateChanged被调用");             }              @Override             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                 Log.i(TAG, "测试自定义onScrolled被调用");             }         });     }" compose:Replacement merge: LineBased]
														[T -> processLogic(Bundle-Bundle) : MethodDecl "@Override     protected void processLogic(Bundle savedInstanceState) { //        mRefreshLayout.setCustomHeaderView(DataEngine.getCustomHeaderView(mApp), true);          View headerView = View.inflate(mApp, R.layout.view_custom_header2, null);          // 测试自定义header中控件的点击事件         headerView.findViewById(R.id.btn_custom_header2_test).setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 ToastUtil.show("点击了测试按钮");             }         });         // 模拟网络数据加载，测试动态改变自定义header的高度         new Handler().postDelayed(new Runnable() {             @Override             public void run() {                 ((TextView) getViewById(R.id.tv_custom_header2_title)).setText(R.string.test_custom_header_title);                 ((TextView) getViewById(R.id.tv_custom_header2_desc)).setText(R.string.test_custom_header_desc);             }         }, 2000);         mRefreshLayout.setCustomHeaderView(headerView, true);          BGAStickinessRefreshViewHolder stickinessRefreshViewHolder = new BGAStickinessRefreshViewHolder(mApp, true);         stickinessRefreshViewHolder.setStickinessColor(R.color.custom_stickiness);         stickinessRefreshViewHolder.setRotateImage(R.mipmap.custom_stickiness_roate);         mRefreshLayout.setRefreshViewHolder(stickinessRefreshViewHolder);          mDataRv.addItemDecoration(new Divider(mApp));  //        GridLayoutManager gridLayoutManager = new GridLayoutManager(mApp, 2); //        gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL); //        mDataRv.setLayoutManager(gridLayoutManager);          mDataRv.setLayoutManager(new LinearLayoutManager(mApp, LinearLayoutManager.VERTICAL, false));          mDataRv.setAdapter(mAdapter);     }" compose:Replacement merge: LineBased]
														[T -> onUserVisible({FormalParametersInternal}) : MethodDecl "@Override     protected void onUserVisible() {         mNewPageNumber = 0;         mMorePageNumber = 0;         mEngine.loadInitDatas().enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(Response<List<RefreshModel>> response, Retrofit retrofit) {                 mAdapter.setDatas(response.body());             }              @Override             public void onFailure(Throwable t) {             }         });     }" compose:Replacement merge: LineBased]
														[T -> onBGARefreshLayoutBeginRefreshing(BGARefreshLayout-BGARefreshLayout) : MethodDecl "@Override     public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {         mNewPageNumber++;         if (mNewPageNumber > 4) {             mRefreshLayout.endRefreshing();             showToast("没有最新数据了");             return;         }          showLoadingDialog();         mEngine.loadNewData(mNewPageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endRefreshing();                         dismissLoadingDialog();                         mAdapter.addNewDatas(response.body());                         mDataRv.smoothScrollToPosition(0);                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endRefreshing();                 dismissLoadingDialog();             }         });     }" compose:Replacement merge: LineBased]
														[T -> onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout-BGARefreshLayout) : MethodDecl "@Override     public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {         mMorePageNumber++;         if (mMorePageNumber > 5) {             mRefreshLayout.endLoadingMore();             showToast("没有更多数据了");             return false;         }          showLoadingDialog();         mEngine.loadMoreData(mMorePageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endLoadingMore();                         dismissLoadingDialog();                         mAdapter.addMoreDatas(response.body());                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endLoadingMore();                 dismissLoadingDialog();             }         });          return true;     }" compose:Replacement merge: LineBased]
														[T -> onItemChildClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public void onItemChildClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             mAdapter.removeItem(position);         }     }" compose:Replacement merge: LineBased]
														[T -> onItemChildLongClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public boolean onItemChildLongClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             showToast("长按了删除 " + mAdapter.getItem(position).title);             return true;         }         return false;     }" compose:Replacement merge: LineBased]
														[T -> onRVItemClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public void onRVItemClick(ViewGroup parent, View itemView, int position) {         showToast("点击了条目 " + mAdapter.getItem(position).title);     }" compose:Replacement merge: LineBased]
														[T -> onRVItemLongClick(ViewGroup-ViewGroup-View-View-int-int) : MethodDecl "@Override     public boolean onRVItemLongClick(ViewGroup parent, View itemView, int position) {         showToast("长按了条目 " + mAdapter.getItem(position).title);         return true;     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> demo : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> cn : Folder]
						[NT -> bingoogolapple : Folder]
							[NT -> refreshlayout : Folder]
								[NT -> demo : Folder]
									[NT -> ui : Folder]
										[NT -> fragment : Folder]
											[NT -> RefreshRecyclerViewFragment.java.merge : .java.merge-File]
												[T -> RefreshRecyclerViewFragment.java : .java-Content "package cn.bingoogolapple.refreshlayout.demo.ui.fragment;  import android.os.Bundle; import android.os.Handler; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.util.Log; import android.view.View; import android.view.ViewGroup; import android.widget.TextView;  import java.util.List;  import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener; import cn.bingoogolapple.refreshlayout.BGAMoocStyleRefreshViewHolder; import cn.bingoogolapple.refreshlayout.BGARefreshLayout; import cn.bingoogolapple.refreshlayout.demo.R; import cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter; import cn.bingoogolapple.refreshlayout.demo.model.RefreshModel; import cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity; import cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil; import cn.bingoogolapple.refreshlayout.demo.util.ToastUtil; import cn.bingoogolapple.refreshlayout.demo.widget.Divider; import retrofit.Callback; import retrofit.Response; import retrofit.Retrofit;  /**  * 作者:王浩 邮件:bingoogolapple@gmail.com  * 创建时间:15/5/22 10:06  * 描述:  */ public class RefreshRecyclerViewFragment extends BaseFragment implements BGARefreshLayout.BGARefreshLayoutDelegate, BGAOnRVItemClickListener, BGAOnRVItemLongClickListener, BGAOnItemChildClickListener, BGAOnItemChildLongClickListener {     private static final String TAG = RefreshRecyclerViewFragment.class.getSimpleName();     private NormalRecyclerViewAdapter mAdapter;     private BGARefreshLayout mRefreshLayout;     private RecyclerView mDataRv;     private int mNewPageNumber = 0;     private int mMorePageNumber = 0;      @Override     protected void initView(Bundle savedInstanceState) {         setContentView(R.layout.fragment_recyclerview_refresh);         mRefreshLayout = getViewById(R.id.rl_recyclerview_refresh);         mDataRv = getViewById(R.id.rv_recyclerview_data);     }      @Override     protected void setListener() {         mRefreshLayout.setDelegate(this);          mAdapter = new NormalRecyclerViewAdapter(mDataRv);         mAdapter.setOnRVItemClickListener(this);         mAdapter.setOnRVItemLongClickListener(this);         mAdapter.setOnItemChildClickListener(this);         mAdapter.setOnItemChildLongClickListener(this);          // 使用addOnScrollListener，而不是setOnScrollListener();         mDataRv.addOnScrollListener(new RecyclerView.OnScrollListener() {             @Override             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                 Log.i(TAG, "测试自定义onScrollStateChanged被调用");             }              @Override             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                 Log.i(TAG, "测试自定义onScrolled被调用");             }         });     }      @Override     protected void processLogic(Bundle savedInstanceState) { //        mRefreshLayout.setCustomHeaderView(DataEngine.getCustomHeaderView(mApp), true);          View headerView = View.inflate(mApp, R.layout.view_custom_header2, null);          // 测试自定义header中控件的点击事件         headerView.findViewById(R.id.btn_custom_header2_test).setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 ToastUtil.show("点击了测试按钮");             }         });         // 模拟网络数据加载，测试动态改变自定义header的高度         new Handler().postDelayed(new Runnable() {             @Override             public void run() {                 ((TextView) getViewById(R.id.tv_custom_header2_title)).setText(R.string.test_custom_header_title);                 ((TextView) getViewById(R.id.tv_custom_header2_desc)).setText(R.string.test_custom_header_desc);             }         }, 2000);         mRefreshLayout.setCustomHeaderView(headerView, true);  //        BGAStickinessRefreshViewHolder stickinessRefreshViewHolder = new BGAStickinessRefreshViewHolder(mApp, true); //        stickinessRefreshViewHolder.setStickinessColor(Color.parseColor("#11cd6e")); //        stickinessRefreshViewHolder.setRotateDrawable(getResources().getDrawable(R.mipmap.custom_stickiness_roate)); //        mRefreshLayout.setRefreshViewHolder(stickinessRefreshViewHolder);          mRefreshLayout.setRefreshViewHolder(new BGAMoocStyleRefreshViewHolder(mApp, true));          mDataRv.addItemDecoration(new Divider(mApp));  //        GridLayoutManager gridLayoutManager = new GridLayoutManager(mApp, 2); //        gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL); //        mDataRv.setLayoutManager(gridLayoutManager);          mDataRv.setLayoutManager(new LinearLayoutManager(mApp, LinearLayoutManager.VERTICAL, false));          mDataRv.setAdapter(mAdapter);     }      @Override     protected void onUserVisible() {         mNewPageNumber = 0;         mMorePageNumber = 0;         mEngine.loadInitDatas().enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(Response<List<RefreshModel>> response, Retrofit retrofit) {                 mAdapter.setDatas(response.body());             }              @Override             public void onFailure(Throwable t) {             }         });     }      @Override     public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {         mNewPageNumber++;         if (mNewPageNumber > 4) {             mRefreshLayout.endRefreshing();             showToast("没有最新数据了");             return;         }          showLoadingDialog();         mEngine.loadNewData(mNewPageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endRefreshing();                         dismissLoadingDialog();                         mAdapter.addNewDatas(response.body());                         mDataRv.smoothScrollToPosition(0);                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endRefreshing();                 dismissLoadingDialog();             }         });     }      @Override     public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {         mMorePageNumber++;         if (mMorePageNumber > 5) {             mRefreshLayout.endLoadingMore();             showToast("没有更多数据了");             return false;         }          showLoadingDialog();         mEngine.loadMoreData(mMorePageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endLoadingMore();                         dismissLoadingDialog();                         mAdapter.addMoreDatas(response.body());                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endLoadingMore();                 dismissLoadingDialog();             }         });          return true;     }      @Override     public void onItemChildClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             mAdapter.removeItem(position);         }     }      @Override     public boolean onItemChildLongClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             showToast("长按了删除 " + mAdapter.getItem(position).title);             return true;         }         return false;     }      @Override     public void onRVItemClick(ViewGroup parent, View itemView, int position) {         showToast("点击了条目 " + mAdapter.getItem(position).title);     }      @Override     public boolean onRVItemLongClick(ViewGroup parent, View itemView, int position) {         showToast("长按了条目 " + mAdapter.getItem(position).title);         return true;     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> demo : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> cn : Folder]
						[NT -> bingoogolapple : Folder]
							[NT -> refreshlayout : Folder]
								[NT -> demo : Folder]
									[NT -> ui : Folder]
										[NT -> fragment : Folder]
											[NT -> RefreshRecyclerViewFragment.java.merge : .java.merge-File]
												[T -> RefreshRecyclerViewFragment.java : .java-Content "package cn.bingoogolapple.refreshlayout.demo.ui.fragment;  import android.graphics.Color; import android.os.Bundle; import android.os.Handler; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.util.Log; import android.view.View; import android.view.ViewGroup; import android.widget.TextView;  import java.util.List;  import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener; import cn.bingoogolapple.refreshlayout.BGARefreshLayout; import cn.bingoogolapple.refreshlayout.BGAStickinessRefreshViewHolder; import cn.bingoogolapple.refreshlayout.demo.R; import cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter; import cn.bingoogolapple.refreshlayout.demo.model.RefreshModel; import cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity; import cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil; import cn.bingoogolapple.refreshlayout.demo.util.ToastUtil; import cn.bingoogolapple.refreshlayout.demo.widget.Divider; import retrofit.Callback; import retrofit.Response; import retrofit.Retrofit;  /**  * 作者:王浩 邮件:bingoogolapple@gmail.com  * 创建时间:15/5/22 10:06  * 描述:  */ public class RefreshRecyclerViewFragment extends BaseFragment implements BGARefreshLayout.BGARefreshLayoutDelegate, BGAOnRVItemClickListener, BGAOnRVItemLongClickListener, BGAOnItemChildClickListener, BGAOnItemChildLongClickListener {     private static final String TAG = RefreshRecyclerViewFragment.class.getSimpleName();     private NormalRecyclerViewAdapter mAdapter;     private BGARefreshLayout mRefreshLayout;     private RecyclerView mDataRv;     private int mNewPageNumber = 0;     private int mMorePageNumber = 0;      @Override     protected void initView(Bundle savedInstanceState) {         setContentView(R.layout.fragment_recyclerview_refresh);         mRefreshLayout = getViewById(R.id.rl_recyclerview_refresh);         mDataRv = getViewById(R.id.rv_recyclerview_data);     }      @Override     protected void setListener() {         mRefreshLayout.setDelegate(this);          mAdapter = new NormalRecyclerViewAdapter(mDataRv);         mAdapter.setOnRVItemClickListener(this);         mAdapter.setOnRVItemLongClickListener(this);         mAdapter.setOnItemChildClickListener(this);         mAdapter.setOnItemChildLongClickListener(this);          // 使用addOnScrollListener，而不是setOnScrollListener();         mDataRv.addOnScrollListener(new RecyclerView.OnScrollListener() {             @Override             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                 Log.i(TAG, "测试自定义onScrollStateChanged被调用");             }              @Override             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                 Log.i(TAG, "测试自定义onScrolled被调用");             }         });     }      @Override     protected void processLogic(Bundle savedInstanceState) { //        mRefreshLayout.setCustomHeaderView(DataEngine.getCustomHeaderView(mApp), true);          View headerView = View.inflate(mApp, R.layout.view_custom_header2, null);          // 测试自定义header中控件的点击事件         headerView.findViewById(R.id.btn_custom_header2_test).setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 ToastUtil.show("点击了测试按钮");             }         });         // 模拟网络数据加载，测试动态改变自定义header的高度         new Handler().postDelayed(new Runnable() {             @Override             public void run() {                 ((TextView) getViewById(R.id.tv_custom_header2_title)).setText(R.string.test_custom_header_title);                 ((TextView) getViewById(R.id.tv_custom_header2_desc)).setText(R.string.test_custom_header_desc);             }         }, 2000);         mRefreshLayout.setCustomHeaderView(headerView, true);          BGAStickinessRefreshViewHolder stickinessRefreshViewHolder = new BGAStickinessRefreshViewHolder(mApp, true);         stickinessRefreshViewHolder.setStickinessColor(Color.parseColor("#11cd6e"));         stickinessRefreshViewHolder.setRotateDrawable(getResources().getDrawable(R.mipmap.custom_stickiness_roate));         mRefreshLayout.setRefreshViewHolder(stickinessRefreshViewHolder);          mDataRv.addItemDecoration(new Divider(mApp));  //        GridLayoutManager gridLayoutManager = new GridLayoutManager(mApp, 2); //        gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL); //        mDataRv.setLayoutManager(gridLayoutManager);          mDataRv.setLayoutManager(new LinearLayoutManager(mApp, LinearLayoutManager.VERTICAL, false));          mDataRv.setAdapter(mAdapter);     }      @Override     protected void onUserVisible() {         mNewPageNumber = 0;         mMorePageNumber = 0;         mEngine.loadInitDatas().enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(Response<List<RefreshModel>> response, Retrofit retrofit) {                 mAdapter.setDatas(response.body());             }              @Override             public void onFailure(Throwable t) {             }         });     }      @Override     public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {         mNewPageNumber++;         if (mNewPageNumber > 4) {             mRefreshLayout.endRefreshing();             showToast("没有最新数据了");             return;         }          showLoadingDialog();         mEngine.loadNewData(mNewPageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endRefreshing();                         dismissLoadingDialog();                         mAdapter.addNewDatas(response.body());                         mDataRv.smoothScrollToPosition(0);                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endRefreshing();                 dismissLoadingDialog();             }         });     }      @Override     public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {         mMorePageNumber++;         if (mMorePageNumber > 5) {             mRefreshLayout.endLoadingMore();             showToast("没有更多数据了");             return false;         }          showLoadingDialog();         mEngine.loadMoreData(mMorePageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endLoadingMore();                         dismissLoadingDialog();                         mAdapter.addMoreDatas(response.body());                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endLoadingMore();                 dismissLoadingDialog();             }         });          return true;     }      @Override     public void onItemChildClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             mAdapter.removeItem(position);         }     }      @Override     public boolean onItemChildLongClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             showToast("长按了删除 " + mAdapter.getItem(position).title);             return true;         }         return false;     }      @Override     public void onRVItemClick(ViewGroup parent, View itemView, int position) {         showToast("点击了条目 " + mAdapter.getItem(position).title);     }      @Override     public boolean onRVItemLongClick(ViewGroup parent, View itemView, int position) {         showToast("长按了条目 " + mAdapter.getItem(position).title);         return true;     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> demo : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> cn : Folder]
						[NT -> bingoogolapple : Folder]
							[NT -> refreshlayout : Folder]
								[NT -> demo : Folder]
									[NT -> ui : Folder]
										[NT -> fragment : Folder]
											[NT -> RefreshRecyclerViewFragment.java.merge : .java.merge-File]
												[T -> RefreshRecyclerViewFragment.java : .java-Content "package cn.bingoogolapple.refreshlayout.demo.ui.fragment;  import android.os.Bundle; import android.os.Handler; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.util.Log; import android.view.View; import android.view.ViewGroup; import android.widget.TextView;  import java.util.List;  import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildLongClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemClickListener; import cn.bingoogolapple.androidcommon.adapter.BGAOnRVItemLongClickListener; import cn.bingoogolapple.refreshlayout.BGARefreshLayout; import cn.bingoogolapple.refreshlayout.BGAStickinessRefreshViewHolder; import cn.bingoogolapple.refreshlayout.demo.R; import cn.bingoogolapple.refreshlayout.demo.adapter.NormalRecyclerViewAdapter; import cn.bingoogolapple.refreshlayout.demo.model.RefreshModel; import cn.bingoogolapple.refreshlayout.demo.ui.activity.MainActivity; import cn.bingoogolapple.refreshlayout.demo.util.ThreadUtil; import cn.bingoogolapple.refreshlayout.demo.util.ToastUtil; import cn.bingoogolapple.refreshlayout.demo.widget.Divider; import retrofit.Callback; import retrofit.Response; import retrofit.Retrofit;  /**  * 作者:王浩 邮件:bingoogolapple@gmail.com  * 创建时间:15/5/22 10:06  * 描述:  */ public class RefreshRecyclerViewFragment extends BaseFragment implements BGARefreshLayout.BGARefreshLayoutDelegate, BGAOnRVItemClickListener, BGAOnRVItemLongClickListener, BGAOnItemChildClickListener, BGAOnItemChildLongClickListener {     private static final String TAG = RefreshRecyclerViewFragment.class.getSimpleName();     private NormalRecyclerViewAdapter mAdapter;     private BGARefreshLayout mRefreshLayout;     private RecyclerView mDataRv;     private int mNewPageNumber = 0;     private int mMorePageNumber = 0;      @Override     protected void initView(Bundle savedInstanceState) {         setContentView(R.layout.fragment_recyclerview_refresh);         mRefreshLayout = getViewById(R.id.rl_recyclerview_refresh);         mDataRv = getViewById(R.id.rv_recyclerview_data);     }      @Override     protected void setListener() {         mRefreshLayout.setDelegate(this);          mAdapter = new NormalRecyclerViewAdapter(mDataRv);         mAdapter.setOnRVItemClickListener(this);         mAdapter.setOnRVItemLongClickListener(this);         mAdapter.setOnItemChildClickListener(this);         mAdapter.setOnItemChildLongClickListener(this);          // 使用addOnScrollListener，而不是setOnScrollListener();         mDataRv.addOnScrollListener(new RecyclerView.OnScrollListener() {             @Override             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                 Log.i(TAG, "测试自定义onScrollStateChanged被调用");             }              @Override             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                 Log.i(TAG, "测试自定义onScrolled被调用");             }         });     }      @Override     protected void processLogic(Bundle savedInstanceState) { //        mRefreshLayout.setCustomHeaderView(DataEngine.getCustomHeaderView(mApp), true);          View headerView = View.inflate(mApp, R.layout.view_custom_header2, null);          // 测试自定义header中控件的点击事件         headerView.findViewById(R.id.btn_custom_header2_test).setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 ToastUtil.show("点击了测试按钮");             }         });         // 模拟网络数据加载，测试动态改变自定义header的高度         new Handler().postDelayed(new Runnable() {             @Override             public void run() {                 ((TextView) getViewById(R.id.tv_custom_header2_title)).setText(R.string.test_custom_header_title);                 ((TextView) getViewById(R.id.tv_custom_header2_desc)).setText(R.string.test_custom_header_desc);             }         }, 2000);         mRefreshLayout.setCustomHeaderView(headerView, true);          BGAStickinessRefreshViewHolder stickinessRefreshViewHolder = new BGAStickinessRefreshViewHolder(mApp, true);         stickinessRefreshViewHolder.setStickinessColor(R.color.custom_stickiness);         stickinessRefreshViewHolder.setRotateImage(R.mipmap.custom_stickiness_roate);         mRefreshLayout.setRefreshViewHolder(stickinessRefreshViewHolder);          mDataRv.addItemDecoration(new Divider(mApp));  //        GridLayoutManager gridLayoutManager = new GridLayoutManager(mApp, 2); //        gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL); //        mDataRv.setLayoutManager(gridLayoutManager);          mDataRv.setLayoutManager(new LinearLayoutManager(mApp, LinearLayoutManager.VERTICAL, false));          mDataRv.setAdapter(mAdapter);     }      @Override     protected void onUserVisible() {         mNewPageNumber = 0;         mMorePageNumber = 0;         mEngine.loadInitDatas().enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(Response<List<RefreshModel>> response, Retrofit retrofit) {                 mAdapter.setDatas(response.body());             }              @Override             public void onFailure(Throwable t) {             }         });     }      @Override     public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {         mNewPageNumber++;         if (mNewPageNumber > 4) {             mRefreshLayout.endRefreshing();             showToast("没有最新数据了");             return;         }          showLoadingDialog();         mEngine.loadNewData(mNewPageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endRefreshing();                         dismissLoadingDialog();                         mAdapter.addNewDatas(response.body());                         mDataRv.smoothScrollToPosition(0);                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endRefreshing();                 dismissLoadingDialog();             }         });     }      @Override     public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {         mMorePageNumber++;         if (mMorePageNumber > 5) {             mRefreshLayout.endLoadingMore();             showToast("没有更多数据了");             return false;         }          showLoadingDialog();         mEngine.loadMoreData(mMorePageNumber).enqueue(new Callback<List<RefreshModel>>() {             @Override             public void onResponse(final Response<List<RefreshModel>> response, Retrofit retrofit) {                 ThreadUtil.runInUIThread(new Runnable() {                     @Override                     public void run() {                         mRefreshLayout.endLoadingMore();                         dismissLoadingDialog();                         mAdapter.addMoreDatas(response.body());                     }                 }, MainActivity.LOADING_DURATION);             }              @Override             public void onFailure(Throwable t) {                 mRefreshLayout.endLoadingMore();                 dismissLoadingDialog();             }         });          return true;     }      @Override     public void onItemChildClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             mAdapter.removeItem(position);         }     }      @Override     public boolean onItemChildLongClick(ViewGroup parent, View childView, int position) {         if (childView.getId() == R.id.tv_item_normal_delete) {             showToast("长按了删除 " + mAdapter.getItem(position).title);             return true;         }         return false;     }      @Override     public void onRVItemClick(ViewGroup parent, View itemView, int position) {         showToast("点击了条目 " + mAdapter.getItem(position).title);     }      @Override     public boolean onRVItemLongClick(ViewGroup parent, View itemView, int position) {         showToast("长按了条目 " + mAdapter.getItem(position).title);         return true;     } } " compose:StringConcatenation merge: LineBased]
