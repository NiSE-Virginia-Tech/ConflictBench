Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/rxlifecycle-navi/src/main/java/com/trello/rxlifecycle2/navi/NaviLifecycle.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/rxlifecycle-navi/src/main/java/com/trello/rxlifecycle2/navi/NaviLifecycle.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/rxlifecycle-navi/src/main/java/com/trello/rxlifecycle2/navi/NaviLifecycle.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/rxlifecycle-navi/src/main/java/com/trello/rxlifecycle2/navi/NaviLifecycle.java
[NT -> base : Feature]
	[NT -> rxlifecycle-navi : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> trello : Folder]
							[NT -> rxlifecycle2 : Folder]
								[NT -> navi : Folder]
									[NT -> NaviLifecycle.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.trello.rxlifecycle2.navi;" compose:Replacement merge: Default]
											[T -> com.trello.navi2.NaviComponent{ImportPackage} : ImportDeclaration "import com.trello.navi2.NaviComponent;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.LifecycleProvider{ImportPackage} : ImportDeclaration "import com.trello.rxlifecycle2.LifecycleProvider;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.android.ActivityEvent{ImportPackage} : ImportDeclaration "import com.trello.rxlifecycle2.android.ActivityEvent;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.android.FragmentEvent{ImportPackage} : ImportDeclaration "import com.trello.rxlifecycle2.android.FragmentEvent;" compose:Replacement merge: Default]
											[T -> androidx.annotation.CheckResult{ImportPackage} : ImportDeclaration "import androidx.annotation.CheckResult;" compose:Replacement merge: Default]
											[T -> androidx.annotation.NonNull{ImportPackage} : ImportDeclaration "import androidx.annotation.NonNull;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.internal.Preconditions.checkNotNull{ImportPackage} : ImportDeclaration "import static com.trello.rxlifecycle2.internal.Preconditions.checkNotNull;" compose:Replacement merge: Default]
											[NT -> NaviLifecycle : ClassDeclaration]
												[T -> - : Modifiers "public final" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> NaviLifecycle : Id "NaviLifecycle" compose:Replacement merge: Default]
												[T -> createActivityLifecycleProvider(NaviComponent-NaviComponent) : MethodDecl "@NonNull     @CheckResult     public static LifecycleProvider<ActivityEvent> createActivityLifecycleProvider(@NonNull NaviComponent activity) {         checkNotNull(activity, "activity == null");         return new ActivityLifecycleProviderImpl(activity);     }" compose:Replacement merge: LineBased]
												[T -> createFragmentLifecycleProvider(NaviComponent-NaviComponent) : MethodDecl "@NonNull     @CheckResult     public static LifecycleProvider<FragmentEvent> createFragmentLifecycleProvider(@NonNull NaviComponent fragment) {         checkNotNull(fragment, "fragment == null");         return new FragmentLifecycleProviderImpl(fragment);     }" compose:Replacement merge: LineBased]
												[T -> NaviLifecycle({FormalParametersInternal}) : ConstructorDecl "private NaviLifecycle() {         throw new AssertionError("No instances!");     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> rxlifecycle-navi : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> trello : Folder]
							[NT -> rxlifecycle2 : Folder]
								[NT -> navi : Folder]
									[NT -> NaviLifecycle.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.trello.rxlifecycle2.navi;" compose:Replacement merge: Default]
											[T -> com.trello.navi2.NaviComponent{ImportPackage} : ImportDeclaration "import com.trello.navi2.NaviComponent;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.LifecycleProvider{ImportPackage} : ImportDeclaration "import com.trello.rxlifecycle2.LifecycleProvider;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.android.ActivityEvent{ImportPackage} : ImportDeclaration "import com.trello.rxlifecycle2.android.ActivityEvent;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.android.FragmentEvent{ImportPackage} : ImportDeclaration "import com.trello.rxlifecycle2.android.FragmentEvent;" compose:Replacement merge: Default]
											[T -> androidx.annotation.CheckResult{ImportPackage} : ImportDeclaration "import androidx.annotation.CheckResult;" compose:Replacement merge: Default]
											[T -> androidx.annotation.NonNull{ImportPackage} : ImportDeclaration "import androidx.annotation.NonNull;" compose:Replacement merge: Default]
											[T -> com.trello.rxlifecycle2.internal.Preconditions.checkNotNull{ImportPackage} : ImportDeclaration "import static com.trello.rxlifecycle2.internal.Preconditions.checkNotNull;" compose:Replacement merge: Default]
											[NT -> NaviLifecycle : ClassDeclaration]
												[T -> - : Modifiers "@Deprecated /**  * @Deprecated switch to using rxlifecycle-android-lifecycle  */ public final" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> NaviLifecycle : Id "NaviLifecycle" compose:Replacement merge: Default]
												[T -> createActivityLifecycleProvider(NaviComponent-NaviComponent) : MethodDecl "@NonNull     @CheckResult     public static LifecycleProvider<ActivityEvent> createActivityLifecycleProvider(@NonNull NaviComponent activity) {         checkNotNull(activity, "activity == null");         return new ActivityLifecycleProviderImpl(activity);     }" compose:Replacement merge: LineBased]
												[T -> createFragmentLifecycleProvider(NaviComponent-NaviComponent) : MethodDecl "@NonNull     @CheckResult     public static LifecycleProvider<FragmentEvent> createFragmentLifecycleProvider(@NonNull NaviComponent fragment) {         checkNotNull(fragment, "fragment == null");         return new FragmentLifecycleProviderImpl(fragment);     }" compose:Replacement merge: LineBased]
												[T -> NaviLifecycle({FormalParametersInternal}) : ConstructorDecl "private NaviLifecycle() {         throw new AssertionError("No instances!");     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> rxlifecycle-navi : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> trello : Folder]
							[NT -> rxlifecycle2 : Folder]
								[NT -> navi : Folder]
									[NT -> NaviLifecycle.java.merge : .java.merge-File]
										[T -> NaviLifecycle.java : .java-Content "/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package com.trello.rxlifecycle2.navi;  import com.trello.navi2.NaviComponent; import com.trello.rxlifecycle2.LifecycleProvider; import com.trello.rxlifecycle2.android.ActivityEvent; import com.trello.rxlifecycle2.android.FragmentEvent;  import androidx.annotation.CheckResult; import androidx.annotation.NonNull;  import static com.trello.rxlifecycle2.internal.Preconditions.checkNotNull;  public final class NaviLifecycle {      @NonNull     @CheckResult     public static LifecycleProvider<ActivityEvent> createActivityLifecycleProvider(@NonNull NaviComponent activity) {         checkNotNull(activity, "activity == null");         return new ActivityLifecycleProviderImpl(activity);     }      @NonNull     @CheckResult     public static LifecycleProvider<FragmentEvent> createFragmentLifecycleProvider(@NonNull NaviComponent fragment) {         checkNotNull(fragment, "fragment == null");         return new FragmentLifecycleProviderImpl(fragment);     }      private NaviLifecycle() {         throw new AssertionError("No instances!");     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> rxlifecycle-navi : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> trello : Folder]
							[NT -> rxlifecycle2 : Folder]
								[NT -> navi : Folder]
									[NT -> NaviLifecycle.java.merge : .java.merge-File]
										[T -> NaviLifecycle.java : .java-Content "/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package com.trello.rxlifecycle2.navi;  import com.trello.navi2.NaviComponent; import com.trello.rxlifecycle2.LifecycleProvider; import com.trello.rxlifecycle2.android.ActivityEvent; import com.trello.rxlifecycle2.android.FragmentEvent;  import androidx.annotation.CheckResult; import androidx.annotation.NonNull;  import static com.trello.rxlifecycle2.internal.Preconditions.checkNotNull;  @Deprecated /**  * @Deprecated switch to using rxlifecycle-android-lifecycle  */ public final class NaviLifecycle {      @NonNull     @CheckResult     public static LifecycleProvider<ActivityEvent> createActivityLifecycleProvider(@NonNull NaviComponent activity) {         checkNotNull(activity, "activity == null");         return new ActivityLifecycleProviderImpl(activity);     }      @NonNull     @CheckResult     public static LifecycleProvider<FragmentEvent> createFragmentLifecycleProvider(@NonNull NaviComponent fragment) {         checkNotNull(fragment, "fragment == null");         return new FragmentLifecycleProviderImpl(fragment);     }      private NaviLifecycle() {         throw new AssertionError("No instances!");     } } " compose:StringConcatenation merge: LineBased]
