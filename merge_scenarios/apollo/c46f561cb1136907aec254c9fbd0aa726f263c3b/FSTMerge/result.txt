Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/apollo-portal/src/test/java/com/ctrip/apollo/portal/service/ConfigServiceTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/apollo-portal/src/test/java/com/ctrip/apollo/portal/service/ConfigServiceTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/apollo-portal/src/test/java/com/ctrip/apollo/portal/service/ConfigServiceTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/apollo-portal/src/test/java/com/ctrip/apollo/portal/service/ConfigServiceTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/apollo-portal/src/test/java/com/ctrip/apollo/portal/service/ConfigServiceTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/apollo-portal/src/test/java/com/ctrip/apollo/portal/service/ConfigServiceTest.java
[NT -> left : Feature]
	[NT -> apollo-portal : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> ctrip : Folder]
							[NT -> apollo : Folder]
								[NT -> portal : Folder]
									[NT -> service : Folder]
										[NT -> ConfigServiceTest.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.ctrip.apollo.portal.service;" compose:Replacement merge: Default]
												[T -> org.junit.Assert.assertEquals{ImportPackage} : ImportDeclaration "import static org.junit.Assert.assertEquals;" compose:Replacement merge: Default]
												[T -> org.mockito.Mockito.when{ImportPackage} : ImportDeclaration "import static org.mockito.Mockito.when;" compose:Replacement merge: Default]
												[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
												[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
												[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
												[T -> org.mockito.InjectMocks{ImportPackage} : ImportDeclaration "import org.mockito.InjectMocks;" compose:Replacement merge: Default]
												[T -> org.mockito.Mock{ImportPackage} : ImportDeclaration "import org.mockito.Mock;" compose:Replacement merge: Default]
												[T -> org.mockito.Mockito{ImportPackage} : ImportDeclaration "import org.mockito.Mockito;" compose:Replacement merge: Default]
												[T -> org.mockito.Spy{ImportPackage} : ImportDeclaration "import org.mockito.Spy;" compose:Replacement merge: Default]
												[T -> org.mockito.runners.MockitoJUnitRunner{ImportPackage} : ImportDeclaration "import org.mockito.runners.MockitoJUnitRunner;" compose:Replacement merge: Default]
												[T -> org.springframework.test.util.ReflectionTestUtils{ImportPackage} : ImportDeclaration "import org.springframework.test.util.ReflectionTestUtils;" compose:Replacement merge: Default]
												[T -> org.springframework.web.client.RestTemplate{ImportPackage} : ImportDeclaration "import org.springframework.web.client.RestTemplate;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.Apollo.Env{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.Apollo.Env;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.Constants{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.Constants;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ClusterDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ClusterDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ConfigItemDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ConfigItemDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ReleaseSnapshotDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ReleaseSnapshotDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.VersionDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.VersionDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.api.AdminServiceAPI{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.api.AdminServiceAPI;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.constants.PortalConstants{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.constants.PortalConstants;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.entity.AppConfigVO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.entity.AppConfigVO;" compose:Replacement merge: Default]
												[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
												[NT -> ConfigServiceTest : ClassDeclaration]
													[T -> - : Modifiers "@RunWith(MockitoJUnitRunner.class) public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> ConfigServiceTest : Id "ConfigServiceTest" compose:Replacement merge: Default]
													[T -> restTemplate : FieldDecl "@Mock   private RestTemplate restTemplate;" compose:Replacement merge: SemanticConflict]
													[T -> configService : FieldDecl "@InjectMocks   private ConfigService configService;" compose:Replacement merge: SemanticConflict]
													[T -> serviceLocator : FieldDecl "@Mock   private ServiceLocator serviceLocator;" compose:Replacement merge: SemanticConflict]
													[T -> versionAPI : FieldDecl "@Spy   private AdminServiceAPI.VersionAPI versionAPI;" compose:Replacement merge: SemanticConflict]
													[T -> clusterAPI : FieldDecl "@Spy   private AdminServiceAPI.ClusterAPI clusterAPI;" compose:Replacement merge: SemanticConflict]
													[T -> configAPI : FieldDecl "@Spy   private AdminServiceAPI.ConfigAPI configAPI;" compose:Replacement merge: SemanticConflict]
													[T -> setUp({FormalParametersInternal}) : MethodDecl "@Before   public void setUp() {     ReflectionTestUtils.setField(versionAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(clusterAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(configAPI, "restTemplate", restTemplate);      ReflectionTestUtils.setField(versionAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(clusterAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(configAPI, "serviceLocator", serviceLocator);      String defaultAdminService = "http://localhost:8090";     Mockito.doReturn(defaultAdminService).when(serviceLocator).getAdminService(Env.DEV);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfig({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfig() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = assembleReleaseSnapShots();      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 2);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigOnlyDefaultConfigs({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigOnlyDefaultConfigs() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 0);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigDefaultConfigsAndOverrideApp({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideApp() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\", \"5555.bar\":\"demo2\", \"22.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(2, appConfigVO.getOverrideAppConfigs().size());     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigDefaultConfigsAndOverrideCluster({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideCluster() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[2];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");     someReleaseSnapShots[1] = assembleReleaseSnapShot(11112, "cluster1",                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(0, appConfigVO.getOverrideAppConfigs().size());     assertEquals(1, appConfigVO.getOverrideClusterConfigs().size());   }" compose:Replacement merge: LineBased]
													[T -> testLoadLastestConfig({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadLastestConfig() {     String appId = "6666";     ClusterDTO[] someClusters = assembleClusters();     ConfigItemDTO[] someConfigItem = assembleConfigItems();      when(clusterAPI.getClustersByApp(Env.DEV, appId)).thenReturn(someClusters);     when(configAPI.getLatestConfigItemsByClusters(Env.DEV, Arrays         .asList(Long.valueOf(100), Long.valueOf(101)))).thenReturn(someConfigItem);      AppConfigVO appConfigVO = configService.loadLatestConfig(Env.DEV, appId);      assertEquals(appConfigVO.getAppId(), "6666");     assertEquals(appConfigVO.getVersionId(), PortalConstants.LASTEST_VERSION_ID);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 3);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 1);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 1);   }" compose:Replacement merge: LineBased]
													[T -> assembleVersion(String-String-String-String-long-long) : MethodDecl "private VersionDTO assembleVersion(String appId, String versionName, long releaseId) {     VersionDTO version = new VersionDTO();     version.setAppId(appId);     version.setName(versionName);     version.setReleaseId(releaseId);     return version;   }" compose:Replacement merge: LineBased]
													[T -> assembleReleaseSnapShots({FormalParametersInternal}) : MethodDecl "private ReleaseSnapshotDTO[] assembleReleaseSnapShots() {     ReleaseSnapshotDTO[] releaseSnapShots = new ReleaseSnapshotDTO[3];     releaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\",\"3333.foo\":\"1008\",\"4444.bar\":\"99901\"}");     releaseSnapShots[1] = assembleReleaseSnapShot(11111, "cluster1", "{\"6666.foo\":\"demo1\"}");     releaseSnapShots[2] = assembleReleaseSnapShot(11111, "cluster2", "{\"6666.bar\":\"bar2222\"}");     return releaseSnapShots;   }" compose:Replacement merge: LineBased]
													[T -> assembleReleaseSnapShot(long-long-String-String-String-String) : MethodDecl "private ReleaseSnapshotDTO assembleReleaseSnapShot(long releaseId, String clusterName,                                                      String configurations) {     ReleaseSnapshotDTO releaseSnapShot = new ReleaseSnapshotDTO();     releaseSnapShot.setReleaseId(releaseId);     releaseSnapShot.setClusterName(clusterName);     releaseSnapShot.setConfigurations(configurations);     return releaseSnapShot;   }" compose:Replacement merge: LineBased]
													[T -> assembleClusters({FormalParametersInternal}) : MethodDecl "private ClusterDTO[] assembleClusters() {     ClusterDTO[] clusters = new ClusterDTO[2];     clusters[0] = assembleCluster(100, "6666", Constants.DEFAULT_CLUSTER_NAME);     clusters[1] = assembleCluster(101, "6666", "cluster1");     return clusters;   }" compose:Replacement merge: LineBased]
													[T -> assembleCluster(long-long-String-String-String-String) : MethodDecl "private ClusterDTO assembleCluster(long id, String appId, String name) {     ClusterDTO cluster = new ClusterDTO();     cluster.setAppId(appId);     cluster.setId(id);     cluster.setName(name);     return cluster;   }" compose:Replacement merge: LineBased]
													[T -> assembleConfigItems({FormalParametersInternal}) : MethodDecl "private ConfigItemDTO[] assembleConfigItems() {     ConfigItemDTO[] configItems = new ConfigItemDTO[5];     configItems[0] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "6666", "6666.k1", "6666.v1");     configItems[1] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "6666", "6666.k2", "6666.v2");     configItems[2] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "6666", "6666.k3", "6666.v3");     configItems[3] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "5555", "5555.k1", "5555.v1");     configItems[4] = assembleConfigItem(101, "cluster1", "6666", "6666.k1", "6666.v1");     return configItems;   }" compose:Replacement merge: LineBased]
													[T -> assembleConfigItem(long-long-String-String-String-String-String-String-String-String) : MethodDecl "private ConfigItemDTO assembleConfigItem(long clusterId, String clusterName, String appId,                                            String key, String value) {     ConfigItemDTO configItem = new ConfigItemDTO();     configItem.setClusterName(clusterName);     configItem.setClusterId(clusterId);     configItem.setAppId(appId);     configItem.setKey(key);     configItem.setValue(value);     return configItem;   }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> apollo-portal : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> ctrip : Folder]
							[NT -> apollo : Folder]
								[NT -> portal : Folder]
									[NT -> service : Folder]
										[NT -> ConfigServiceTest.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.ctrip.apollo.portal.service;" compose:Replacement merge: Default]
												[T -> org.junit.Assert.assertEquals{ImportPackage} : ImportDeclaration "import static org.junit.Assert.assertEquals;" compose:Replacement merge: Default]
												[T -> org.mockito.Mockito.when{ImportPackage} : ImportDeclaration "import static org.mockito.Mockito.when;" compose:Replacement merge: Default]
												[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
												[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
												[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
												[T -> org.mockito.InjectMocks{ImportPackage} : ImportDeclaration "import org.mockito.InjectMocks;" compose:Replacement merge: Default]
												[T -> org.mockito.Mock{ImportPackage} : ImportDeclaration "import org.mockito.Mock;" compose:Replacement merge: Default]
												[T -> org.mockito.Mockito{ImportPackage} : ImportDeclaration "import org.mockito.Mockito;" compose:Replacement merge: Default]
												[T -> org.mockito.Spy{ImportPackage} : ImportDeclaration "import org.mockito.Spy;" compose:Replacement merge: Default]
												[T -> org.mockito.runners.MockitoJUnitRunner{ImportPackage} : ImportDeclaration "import org.mockito.runners.MockitoJUnitRunner;" compose:Replacement merge: Default]
												[T -> org.springframework.test.util.ReflectionTestUtils{ImportPackage} : ImportDeclaration "import org.springframework.test.util.ReflectionTestUtils;" compose:Replacement merge: Default]
												[T -> org.springframework.web.client.RestTemplate{ImportPackage} : ImportDeclaration "import org.springframework.web.client.RestTemplate;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.Apollo.Env{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.Apollo.Env;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.Constants{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.Constants;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ClusterDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ClusterDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ConfigItemDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ConfigItemDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ReleaseSnapshotDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ReleaseSnapshotDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.VersionDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.VersionDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.api.AdminServiceAPI{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.api.AdminServiceAPI;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.constants.PortalConstants{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.constants.PortalConstants;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.entity.AppConfigVO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.entity.AppConfigVO;" compose:Replacement merge: Default]
												[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
												[NT -> ConfigServiceTest : ClassDeclaration]
													[T -> - : Modifiers "@RunWith(MockitoJUnitRunner.class) public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> ConfigServiceTest : Id "ConfigServiceTest" compose:Replacement merge: Default]
													[T -> restTemplate : FieldDecl "@Mock   private RestTemplate restTemplate;" compose:Replacement merge: SemanticConflict]
													[T -> configService : FieldDecl "@InjectMocks   private ConfigService configService;" compose:Replacement merge: SemanticConflict]
													[T -> serviceLocator : FieldDecl "@Mock   private ServiceLocator serviceLocator;" compose:Replacement merge: SemanticConflict]
													[T -> versionAPI : FieldDecl "@Spy   private AdminServiceAPI.VersionAPI versionAPI;" compose:Replacement merge: SemanticConflict]
													[T -> clusterAPI : FieldDecl "@Spy   private AdminServiceAPI.ClusterAPI clusterAPI;" compose:Replacement merge: SemanticConflict]
													[T -> configAPI : FieldDecl "@Spy   private AdminServiceAPI.ConfigAPI configAPI;" compose:Replacement merge: SemanticConflict]
													[T -> setUp({FormalParametersInternal}) : MethodDecl "@Before   public void setUp() {     ReflectionTestUtils.setField(versionAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(clusterAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(configAPI, "restTemplate", restTemplate);      ReflectionTestUtils.setField(versionAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(clusterAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(configAPI, "serviceLocator", serviceLocator);      String defaultAdminService = "http://localhost:8090";     Mockito.doReturn(defaultAdminService).when(serviceLocator).getAdminService(Env.DEV);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfig({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfig() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = assembleReleaseSnapShots();      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 2);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigOnlyDefaultConfigs({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigOnlyDefaultConfigs() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 0);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigDefaultConfigsAndOverrideApp({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideApp() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\", \"5555.bar\":\"demo2\", \"22.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(2, appConfigVO.getOverrideAppConfigs().size());     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigDefaultConfigsAndOverrideCluster({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideCluster() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[2];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");     someReleaseSnapShots[1] = assembleReleaseSnapShot(11112, "cluster1",                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(0, appConfigVO.getOverrideAppConfigs().size());     assertEquals(1, appConfigVO.getOverrideClusterConfigs().size());   }" compose:Replacement merge: LineBased]
													[T -> testLoadLastestConfig({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadLastestConfig() {     long appId = 6666;     ClusterDTO[] someClusters = assembleClusters();     ConfigItemDTO[] someConfigItem = assembleConfigItems();      when(clusterAPI.getClustersByApp(Env.DEV, appId)).thenReturn(someClusters);     when(configAPI.getLatestConfigItemsByClusters(Env.DEV, Arrays         .asList(Long.valueOf(100), Long.valueOf(101)))).thenReturn(someConfigItem);      AppConfigVO appConfigVO = configService.loadLatestConfig(Env.DEV, appId);      assertEquals(appConfigVO.getAppId(), 6666);     assertEquals(appConfigVO.getVersionId(), PortalConstants.LASTEST_VERSION_ID);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 3);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 1);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 1);   }" compose:Replacement merge: LineBased]
													[T -> assembleVersion(long-long-String-String-long-long) : MethodDecl "private VersionDTO assembleVersion(long appId, String versionName, long releaseId) {     VersionDTO version = new VersionDTO();     version.setAppId(appId);     version.setName(versionName);     version.setReleaseId(releaseId);     return version;   }" compose:Replacement merge: LineBased]
													[T -> assembleReleaseSnapShots({FormalParametersInternal}) : MethodDecl "private ReleaseSnapshotDTO[] assembleReleaseSnapShots() {     ReleaseSnapshotDTO[] releaseSnapShots = new ReleaseSnapshotDTO[3];     releaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\",\"3333.foo\":\"1008\",\"4444.bar\":\"99901\"}");     releaseSnapShots[1] = assembleReleaseSnapShot(11111, "cluster1", "{\"6666.foo\":\"demo1\"}");     releaseSnapShots[2] = assembleReleaseSnapShot(11111, "cluster2", "{\"6666.bar\":\"bar2222\"}");     return releaseSnapShots;   }" compose:Replacement merge: LineBased]
													[T -> assembleReleaseSnapShot(long-long-String-String-String-String) : MethodDecl "private ReleaseSnapshotDTO assembleReleaseSnapShot(long releaseId, String clusterName,                                                      String configurations) {     ReleaseSnapshotDTO releaseSnapShot = new ReleaseSnapshotDTO();     releaseSnapShot.setReleaseId(releaseId);     releaseSnapShot.setClusterName(clusterName);     releaseSnapShot.setConfigurations(configurations);     return releaseSnapShot;   }" compose:Replacement merge: LineBased]
													[T -> assembleClusters({FormalParametersInternal}) : MethodDecl "private ClusterDTO[] assembleClusters() {     ClusterDTO[] clusters = new ClusterDTO[2];     clusters[0] = assembleCluster(100, 6666, Constants.DEFAULT_CLUSTER_NAME);     clusters[1] = assembleCluster(101, 6666, "cluster1");     return clusters;   }" compose:Replacement merge: LineBased]
													[T -> assembleCluster(long-long-long-long-String-String) : MethodDecl "private ClusterDTO assembleCluster(long id, long appId, String name) {     ClusterDTO cluster = new ClusterDTO();     cluster.setAppId(appId);     cluster.setId(id);     cluster.setName(name);     return cluster;   }" compose:Replacement merge: LineBased]
													[T -> assembleConfigItems({FormalParametersInternal}) : MethodDecl "private ConfigItemDTO[] assembleConfigItems() {     ConfigItemDTO[] configItems = new ConfigItemDTO[5];     configItems[0] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 6666, "6666.k1", "6666.v1");     configItems[1] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 6666, "6666.k2", "6666.v2");     configItems[2] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 6666, "6666.k3", "6666.v3");     configItems[3] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 5555, "5555.k1", "5555.v1");     configItems[4] = assembleConfigItem(101, "cluster1", 6666, "6666.k1", "6666.v1");     return configItems;   }" compose:Replacement merge: LineBased]
													[T -> assembleConfigItem(long-long-String-String-int-int-String-String-String-String) : MethodDecl "private ConfigItemDTO assembleConfigItem(long clusterId, String clusterName, int appId,                                            String key, String value) {     ConfigItemDTO configItem = new ConfigItemDTO();     configItem.setClusterName(clusterName);     configItem.setClusterId(clusterId);     configItem.setAppId(appId);     configItem.setKey(key);     configItem.setValue(value);     return configItem;   }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> apollo-portal : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> ctrip : Folder]
							[NT -> apollo : Folder]
								[NT -> portal : Folder]
									[NT -> service : Folder]
										[NT -> ConfigServiceTest.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.ctrip.apollo.portal.service;" compose:Replacement merge: Default]
												[T -> org.junit.Assert.assertEquals{ImportPackage} : ImportDeclaration "import static org.junit.Assert.assertEquals;" compose:Replacement merge: Default]
												[T -> org.mockito.Mockito.when{ImportPackage} : ImportDeclaration "import static org.mockito.Mockito.when;" compose:Replacement merge: Default]
												[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
												[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
												[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
												[T -> org.mockito.InjectMocks{ImportPackage} : ImportDeclaration "import org.mockito.InjectMocks;" compose:Replacement merge: Default]
												[T -> org.mockito.Mock{ImportPackage} : ImportDeclaration "import org.mockito.Mock;" compose:Replacement merge: Default]
												[T -> org.mockito.Mockito{ImportPackage} : ImportDeclaration "import org.mockito.Mockito;" compose:Replacement merge: Default]
												[T -> org.mockito.Spy{ImportPackage} : ImportDeclaration "import org.mockito.Spy;" compose:Replacement merge: Default]
												[T -> org.mockito.runners.MockitoJUnitRunner{ImportPackage} : ImportDeclaration "import org.mockito.runners.MockitoJUnitRunner;" compose:Replacement merge: Default]
												[T -> org.springframework.test.util.ReflectionTestUtils{ImportPackage} : ImportDeclaration "import org.springframework.test.util.ReflectionTestUtils;" compose:Replacement merge: Default]
												[T -> org.springframework.web.client.RestTemplate{ImportPackage} : ImportDeclaration "import org.springframework.web.client.RestTemplate;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.Apollo.Env{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.Apollo.Env;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.ConfigConsts{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.ConfigConsts;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ClusterDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ClusterDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ConfigItemDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ConfigItemDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ReleaseSnapshotDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ReleaseSnapshotDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.ServiceDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.ServiceDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.dto.VersionDTO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.dto.VersionDTO;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.core.exception.ServiceException{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.core.exception.ServiceException;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.api.AdminServiceAPI{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.api.AdminServiceAPI;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.constants.PortalConstants{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.constants.PortalConstants;" compose:Replacement merge: Default]
												[T -> com.ctrip.apollo.portal.entity.AppConfigVO{ImportPackage} : ImportDeclaration "import com.ctrip.apollo.portal.entity.AppConfigVO;" compose:Replacement merge: Default]
												[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
												[NT -> ConfigServiceTest : ClassDeclaration]
													[T -> - : Modifiers "@RunWith(MockitoJUnitRunner.class) public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> ConfigServiceTest : Id "ConfigServiceTest" compose:Replacement merge: Default]
													[T -> restTemplate : FieldDecl "@Mock   private RestTemplate restTemplate;" compose:Replacement merge: SemanticConflict]
													[T -> configService : FieldDecl "@InjectMocks   private ConfigService configService;" compose:Replacement merge: SemanticConflict]
													[T -> serviceLocator : FieldDecl "@Mock   private ServiceLocator serviceLocator;" compose:Replacement merge: SemanticConflict]
													[T -> versionAPI : FieldDecl "@Spy   private AdminServiceAPI.VersionAPI versionAPI;" compose:Replacement merge: SemanticConflict]
													[T -> clusterAPI : FieldDecl "@Spy   private AdminServiceAPI.ClusterAPI clusterAPI;" compose:Replacement merge: SemanticConflict]
													[T -> configAPI : FieldDecl "@Spy   private AdminServiceAPI.ConfigAPI configAPI;" compose:Replacement merge: SemanticConflict]
													[T -> setUp({FormalParametersInternal}) : MethodDecl "@Before   public void setUp() throws ServiceException {     ReflectionTestUtils.setField(versionAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(clusterAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(configAPI, "restTemplate", restTemplate);      ReflectionTestUtils.setField(versionAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(clusterAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(configAPI, "serviceLocator", serviceLocator);      String defaultAdminService = "http://localhost:8090";     ServiceDTO service = new ServiceDTO();     service.setHomepageUrl(defaultAdminService);     Mockito.doReturn(service).when(serviceLocator).getAdminService(Env.DEV);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfig({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfig() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = assembleReleaseSnapShots();      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 2);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigOnlyDefaultConfigs({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigOnlyDefaultConfigs() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 0);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigDefaultConfigsAndOverrideApp({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideApp() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\", \"5555.bar\":\"demo2\", \"22.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(2, appConfigVO.getOverrideAppConfigs().size());     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }" compose:Replacement merge: LineBased]
													[T -> testLoadReleaseConfigDefaultConfigsAndOverrideCluster({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideCluster() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[2];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");     someReleaseSnapShots[1] = assembleReleaseSnapShot(11112, "cluster1",                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(0, appConfigVO.getOverrideAppConfigs().size());     assertEquals(1, appConfigVO.getOverrideClusterConfigs().size());   }" compose:Replacement merge: LineBased]
													[T -> testLoadLastestConfig({FormalParametersInternal}) : MethodDecl "@Test   public void testLoadLastestConfig() {     long appId = 6666;     ClusterDTO[] someClusters = assembleClusters();     ConfigItemDTO[] someConfigItem = assembleConfigItems();      when(clusterAPI.getClustersByApp(Env.DEV, appId)).thenReturn(someClusters);     when(configAPI.getLatestConfigItemsByClusters(Env.DEV, Arrays         .asList(Long.valueOf(100), Long.valueOf(101)))).thenReturn(someConfigItem);      AppConfigVO appConfigVO = configService.loadLatestConfig(Env.DEV, appId);      assertEquals(appConfigVO.getAppId(), 6666);     assertEquals(appConfigVO.getVersionId(), PortalConstants.LASTEST_VERSION_ID);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 3);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 1);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 1);   }" compose:Replacement merge: LineBased]
													[T -> assembleVersion(long-long-String-String-long-long) : MethodDecl "private VersionDTO assembleVersion(long appId, String versionName, long releaseId) {     VersionDTO version = new VersionDTO();     version.setAppId(appId);     version.setName(versionName);     version.setReleaseId(releaseId);     return version;   }" compose:Replacement merge: LineBased]
													[T -> assembleReleaseSnapShots({FormalParametersInternal}) : MethodDecl "private ReleaseSnapshotDTO[] assembleReleaseSnapShots() {     ReleaseSnapshotDTO[] releaseSnapShots = new ReleaseSnapshotDTO[3];     releaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\",\"3333.foo\":\"1008\",\"4444.bar\":\"99901\"}");     releaseSnapShots[1] = assembleReleaseSnapShot(11111, "cluster1", "{\"6666.foo\":\"demo1\"}");     releaseSnapShots[2] = assembleReleaseSnapShot(11111, "cluster2", "{\"6666.bar\":\"bar2222\"}");     return releaseSnapShots;   }" compose:Replacement merge: LineBased]
													[T -> assembleReleaseSnapShot(long-long-String-String-String-String) : MethodDecl "private ReleaseSnapshotDTO assembleReleaseSnapShot(long releaseId, String clusterName,                                                      String configurations) {     ReleaseSnapshotDTO releaseSnapShot = new ReleaseSnapshotDTO();     releaseSnapShot.setReleaseId(releaseId);     releaseSnapShot.setClusterName(clusterName);     releaseSnapShot.setConfigurations(configurations);     return releaseSnapShot;   }" compose:Replacement merge: LineBased]
													[T -> assembleClusters({FormalParametersInternal}) : MethodDecl "private ClusterDTO[] assembleClusters() {     ClusterDTO[] clusters = new ClusterDTO[2];     clusters[0] = assembleCluster(100, 6666, ConfigConsts.DEFAULT_CLUSTER_NAME);     clusters[1] = assembleCluster(101, 6666, "cluster1");     return clusters;   }" compose:Replacement merge: LineBased]
													[T -> assembleCluster(long-long-long-long-String-String) : MethodDecl "private ClusterDTO assembleCluster(long id, long appId, String name) {     ClusterDTO cluster = new ClusterDTO();     cluster.setAppId(appId);     cluster.setId(id);     cluster.setName(name);     return cluster;   }" compose:Replacement merge: LineBased]
													[T -> assembleConfigItems({FormalParametersInternal}) : MethodDecl "private ConfigItemDTO[] assembleConfigItems() {     ConfigItemDTO[] configItems = new ConfigItemDTO[5];     configItems[0] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 6666, "6666.k1", "6666.v1");     configItems[1] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 6666, "6666.k2", "6666.v2");     configItems[2] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 6666, "6666.k3", "6666.v3");     configItems[3] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 5555, "5555.k1", "5555.v1");     configItems[4] = assembleConfigItem(101, "cluster1", 6666, "6666.k1", "6666.v1");     return configItems;   }" compose:Replacement merge: LineBased]
													[T -> assembleConfigItem(long-long-String-String-int-int-String-String-String-String) : MethodDecl "private ConfigItemDTO assembleConfigItem(long clusterId, String clusterName, int appId,                                            String key, String value) {     ConfigItemDTO configItem = new ConfigItemDTO();     configItem.setClusterName(clusterName);     configItem.setClusterId(clusterId);     configItem.setAppId(appId);     configItem.setKey(key);     configItem.setValue(value);     return configItem;   }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> apollo-portal : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> ctrip : Folder]
							[NT -> apollo : Folder]
								[NT -> portal : Folder]
									[NT -> service : Folder]
										[NT -> ConfigServiceTest.java.merge : .java.merge-File]
											[T -> ConfigServiceTest.java : .java-Content "package com.ctrip.apollo.portal.service;  import static org.junit.Assert.assertEquals; import static org.mockito.Mockito.when;  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.Mockito; import org.mockito.Spy; import org.mockito.runners.MockitoJUnitRunner; import org.springframework.test.util.ReflectionTestUtils; import org.springframework.web.client.RestTemplate;  import com.ctrip.apollo.Apollo.Env; import com.ctrip.apollo.core.Constants; import com.ctrip.apollo.core.dto.ClusterDTO; import com.ctrip.apollo.core.dto.ConfigItemDTO; import com.ctrip.apollo.core.dto.ReleaseSnapshotDTO; import com.ctrip.apollo.core.dto.VersionDTO; import com.ctrip.apollo.portal.api.AdminServiceAPI; import com.ctrip.apollo.portal.constants.PortalConstants; import com.ctrip.apollo.portal.entity.AppConfigVO;  import java.util.Arrays;  @RunWith(MockitoJUnitRunner.class) public class ConfigServiceTest {    @Mock   private RestTemplate restTemplate;    @InjectMocks   private ConfigService configService;    @Mock   private ServiceLocator serviceLocator;   @Spy   private AdminServiceAPI.VersionAPI versionAPI;   @Spy   private AdminServiceAPI.ClusterAPI clusterAPI;   @Spy   private AdminServiceAPI.ConfigAPI configAPI;      @Before   public void setUp() {     ReflectionTestUtils.setField(versionAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(clusterAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(configAPI, "restTemplate", restTemplate);      ReflectionTestUtils.setField(versionAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(clusterAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(configAPI, "serviceLocator", serviceLocator);      String defaultAdminService = "http://localhost:8090";     Mockito.doReturn(defaultAdminService).when(serviceLocator).getAdminService(Env.DEV);   }    @Test   public void testLoadReleaseConfig() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = assembleReleaseSnapShots();      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 2);   }    @Test   public void testLoadReleaseConfigOnlyDefaultConfigs() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 0);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }    @Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideApp() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\", \"5555.bar\":\"demo2\", \"22.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(2, appConfigVO.getOverrideAppConfigs().size());     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }    @Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideCluster() {     String appId = "6666";     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[2];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");     someReleaseSnapShots[1] = assembleReleaseSnapShot(11112, "cluster1",                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(0, appConfigVO.getOverrideAppConfigs().size());     assertEquals(1, appConfigVO.getOverrideClusterConfigs().size());   }    @Test   public void testLoadLastestConfig() {     String appId = "6666";     ClusterDTO[] someClusters = assembleClusters();     ConfigItemDTO[] someConfigItem = assembleConfigItems();      when(clusterAPI.getClustersByApp(Env.DEV, appId)).thenReturn(someClusters);     when(configAPI.getLatestConfigItemsByClusters(Env.DEV, Arrays         .asList(Long.valueOf(100), Long.valueOf(101)))).thenReturn(someConfigItem);      AppConfigVO appConfigVO = configService.loadLatestConfig(Env.DEV, appId);      assertEquals(appConfigVO.getAppId(), "6666");     assertEquals(appConfigVO.getVersionId(), PortalConstants.LASTEST_VERSION_ID);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 3);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 1);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 1);   }    private VersionDTO assembleVersion(String appId, String versionName, long releaseId) {     VersionDTO version = new VersionDTO();     version.setAppId(appId);     version.setName(versionName);     version.setReleaseId(releaseId);     return version;   }    private ReleaseSnapshotDTO[] assembleReleaseSnapShots() {     ReleaseSnapshotDTO[] releaseSnapShots = new ReleaseSnapshotDTO[3];     releaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\",\"3333.foo\":\"1008\",\"4444.bar\":\"99901\"}");     releaseSnapShots[1] = assembleReleaseSnapShot(11111, "cluster1", "{\"6666.foo\":\"demo1\"}");     releaseSnapShots[2] = assembleReleaseSnapShot(11111, "cluster2", "{\"6666.bar\":\"bar2222\"}");     return releaseSnapShots;   }    private ReleaseSnapshotDTO assembleReleaseSnapShot(long releaseId, String clusterName,                                                      String configurations) {     ReleaseSnapshotDTO releaseSnapShot = new ReleaseSnapshotDTO();     releaseSnapShot.setReleaseId(releaseId);     releaseSnapShot.setClusterName(clusterName);     releaseSnapShot.setConfigurations(configurations);     return releaseSnapShot;   }    private ClusterDTO[] assembleClusters() {     ClusterDTO[] clusters = new ClusterDTO[2];     clusters[0] = assembleCluster(100, "6666", Constants.DEFAULT_CLUSTER_NAME);     clusters[1] = assembleCluster(101, "6666", "cluster1");     return clusters;   }    private ClusterDTO assembleCluster(long id, String appId, String name) {     ClusterDTO cluster = new ClusterDTO();     cluster.setAppId(appId);     cluster.setId(id);     cluster.setName(name);     return cluster;   }    private ConfigItemDTO[] assembleConfigItems() {     ConfigItemDTO[] configItems = new ConfigItemDTO[5];     configItems[0] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "6666", "6666.k1", "6666.v1");     configItems[1] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "6666", "6666.k2", "6666.v2");     configItems[2] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "6666", "6666.k3", "6666.v3");     configItems[3] = assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, "5555", "5555.k1", "5555.v1");     configItems[4] = assembleConfigItem(101, "cluster1", "6666", "6666.k1", "6666.v1");     return configItems;   }    private ConfigItemDTO assembleConfigItem(long clusterId, String clusterName, String appId,                                            String key, String value) {     ConfigItemDTO configItem = new ConfigItemDTO();     configItem.setClusterName(clusterName);     configItem.setClusterId(clusterId);     configItem.setAppId(appId);     configItem.setKey(key);     configItem.setValue(value);     return configItem;   }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> apollo-portal : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> ctrip : Folder]
							[NT -> apollo : Folder]
								[NT -> portal : Folder]
									[NT -> service : Folder]
										[NT -> ConfigServiceTest.java.merge : .java.merge-File]
											[T -> ConfigServiceTest.java : .java-Content "package com.ctrip.apollo.portal.service;  import static org.junit.Assert.assertEquals; import static org.mockito.Mockito.when;   import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.Mockito; import org.mockito.Spy; import org.mockito.runners.MockitoJUnitRunner; import org.springframework.test.util.ReflectionTestUtils; import org.springframework.web.client.RestTemplate;  import com.ctrip.apollo.Apollo.Env; import com.ctrip.apollo.core.Constants; import com.ctrip.apollo.core.dto.ClusterDTO; import com.ctrip.apollo.core.dto.ConfigItemDTO; import com.ctrip.apollo.core.dto.ReleaseSnapshotDTO; import com.ctrip.apollo.core.dto.VersionDTO; import com.ctrip.apollo.portal.api.AdminServiceAPI; import com.ctrip.apollo.portal.constants.PortalConstants; import com.ctrip.apollo.portal.entity.AppConfigVO;  import java.util.Arrays;  @RunWith(MockitoJUnitRunner.class) public class ConfigServiceTest {    @Mock   private RestTemplate restTemplate;    @InjectMocks   private ConfigService configService;    @Mock   private ServiceLocator serviceLocator;   @Spy   private AdminServiceAPI.VersionAPI versionAPI;   @Spy   private AdminServiceAPI.ClusterAPI clusterAPI;   @Spy   private AdminServiceAPI.ConfigAPI configAPI;      @Before   public void setUp() {     ReflectionTestUtils.setField(versionAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(clusterAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(configAPI, "restTemplate", restTemplate);      ReflectionTestUtils.setField(versionAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(clusterAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(configAPI, "serviceLocator", serviceLocator);      String defaultAdminService = "http://localhost:8090";     Mockito.doReturn(defaultAdminService).when(serviceLocator).getAdminService(Env.DEV);   }    @Test   public void testLoadReleaseConfig() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = assembleReleaseSnapShots();      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 2);   }    @Test   public void testLoadReleaseConfigOnlyDefaultConfigs() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 0);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }    @Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideApp() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\", \"5555.bar\":\"demo2\", \"22.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(2, appConfigVO.getOverrideAppConfigs().size());     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }    @Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideCluster() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[2];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");     someReleaseSnapShots[1] = assembleReleaseSnapShot(11112, "cluster1",                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(0, appConfigVO.getOverrideAppConfigs().size());     assertEquals(1, appConfigVO.getOverrideClusterConfigs().size());   }    @Test   public void testLoadLastestConfig() {     long appId = 6666;     ClusterDTO[] someClusters = assembleClusters();     ConfigItemDTO[] someConfigItem = assembleConfigItems();      when(clusterAPI.getClustersByApp(Env.DEV, appId)).thenReturn(someClusters);     when(configAPI.getLatestConfigItemsByClusters(Env.DEV, Arrays         .asList(Long.valueOf(100), Long.valueOf(101)))).thenReturn(someConfigItem);      AppConfigVO appConfigVO = configService.loadLatestConfig(Env.DEV, appId);      assertEquals(appConfigVO.getAppId(), 6666);     assertEquals(appConfigVO.getVersionId(), PortalConstants.LASTEST_VERSION_ID);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 3);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 1);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 1);   }    private VersionDTO assembleVersion(long appId, String versionName, long releaseId) {     VersionDTO version = new VersionDTO();     version.setAppId(appId);     version.setName(versionName);     version.setReleaseId(releaseId);     return version;   }    private ReleaseSnapshotDTO[] assembleReleaseSnapShots() {     ReleaseSnapshotDTO[] releaseSnapShots = new ReleaseSnapshotDTO[3];     releaseSnapShots[0] = assembleReleaseSnapShot(11111, Constants.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\",\"3333.foo\":\"1008\",\"4444.bar\":\"99901\"}");     releaseSnapShots[1] = assembleReleaseSnapShot(11111, "cluster1", "{\"6666.foo\":\"demo1\"}");     releaseSnapShots[2] = assembleReleaseSnapShot(11111, "cluster2", "{\"6666.bar\":\"bar2222\"}");     return releaseSnapShots;   }    private ReleaseSnapshotDTO assembleReleaseSnapShot(long releaseId, String clusterName,                                                      String configurations) {     ReleaseSnapshotDTO releaseSnapShot = new ReleaseSnapshotDTO();     releaseSnapShot.setReleaseId(releaseId);     releaseSnapShot.setClusterName(clusterName);     releaseSnapShot.setConfigurations(configurations);     return releaseSnapShot;   }    private ClusterDTO[] assembleClusters() {     ClusterDTO[] clusters = new ClusterDTO[2];     clusters[0] = assembleCluster(100, 6666, Constants.DEFAULT_CLUSTER_NAME);     clusters[1] = assembleCluster(101, 6666, "cluster1");     return clusters;   }    private ClusterDTO assembleCluster(long id, long appId, String name) {     ClusterDTO cluster = new ClusterDTO();     cluster.setAppId(appId);     cluster.setId(id);     cluster.setName(name);     return cluster;   }    private ConfigItemDTO[] assembleConfigItems() {     ConfigItemDTO[] configItems = new ConfigItemDTO[5];     configItems[0] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 6666, "6666.k1", "6666.v1");     configItems[1] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 6666, "6666.k2", "6666.v2");     configItems[2] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 6666, "6666.k3", "6666.v3");     configItems[3] =         assembleConfigItem(100, Constants.DEFAULT_CLUSTER_NAME, 5555, "5555.k1", "5555.v1");     configItems[4] = assembleConfigItem(101, "cluster1", 6666, "6666.k1", "6666.v1");     return configItems;   }    private ConfigItemDTO assembleConfigItem(long clusterId, String clusterName, int appId,                                            String key, String value) {     ConfigItemDTO configItem = new ConfigItemDTO();     configItem.setClusterName(clusterName);     configItem.setClusterId(clusterId);     configItem.setAppId(appId);     configItem.setKey(key);     configItem.setValue(value);     return configItem;   }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> apollo-portal : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> ctrip : Folder]
							[NT -> apollo : Folder]
								[NT -> portal : Folder]
									[NT -> service : Folder]
										[NT -> ConfigServiceTest.java.merge : .java.merge-File]
											[T -> ConfigServiceTest.java : .java-Content "package com.ctrip.apollo.portal.service;  import static org.junit.Assert.assertEquals; import static org.mockito.Mockito.when;   import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.Mockito; import org.mockito.Spy; import org.mockito.runners.MockitoJUnitRunner; import org.springframework.test.util.ReflectionTestUtils; import org.springframework.web.client.RestTemplate;  import com.ctrip.apollo.Apollo.Env; import com.ctrip.apollo.core.ConfigConsts; import com.ctrip.apollo.core.dto.ClusterDTO; import com.ctrip.apollo.core.dto.ConfigItemDTO; import com.ctrip.apollo.core.dto.ReleaseSnapshotDTO; import com.ctrip.apollo.core.dto.ServiceDTO; import com.ctrip.apollo.core.dto.VersionDTO; import com.ctrip.apollo.core.exception.ServiceException; import com.ctrip.apollo.portal.api.AdminServiceAPI; import com.ctrip.apollo.portal.constants.PortalConstants; import com.ctrip.apollo.portal.entity.AppConfigVO;  import java.util.Arrays;  @RunWith(MockitoJUnitRunner.class) public class ConfigServiceTest {    @Mock   private RestTemplate restTemplate;    @InjectMocks   private ConfigService configService;    @Mock   private ServiceLocator serviceLocator;   @Spy   private AdminServiceAPI.VersionAPI versionAPI;   @Spy   private AdminServiceAPI.ClusterAPI clusterAPI;   @Spy   private AdminServiceAPI.ConfigAPI configAPI;      @Before   public void setUp() throws ServiceException {     ReflectionTestUtils.setField(versionAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(clusterAPI, "restTemplate", restTemplate);     ReflectionTestUtils.setField(configAPI, "restTemplate", restTemplate);      ReflectionTestUtils.setField(versionAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(clusterAPI, "serviceLocator", serviceLocator);     ReflectionTestUtils.setField(configAPI, "serviceLocator", serviceLocator);      String defaultAdminService = "http://localhost:8090";     ServiceDTO service = new ServiceDTO();     service.setHomepageUrl(defaultAdminService);     Mockito.doReturn(service).when(serviceLocator).getAdminService(Env.DEV);   }    @Test   public void testLoadReleaseConfig() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = assembleReleaseSnapShots();      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 2);   }    @Test   public void testLoadReleaseConfigOnlyDefaultConfigs() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;      VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 0);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }    @Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideApp() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[1];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\", \"5555.bar\":\"demo2\", \"22.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(2, appConfigVO.getOverrideAppConfigs().size());     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 0);   }    @Test   public void testLoadReleaseConfigDefaultConfigsAndOverrideCluster() {     long appId = 6666;     long versionId = 100;     long releaseId = 11111;     VersionDTO someVersion = assembleVersion(appId, "1.0", releaseId);     ReleaseSnapshotDTO[] someReleaseSnapShots = new ReleaseSnapshotDTO[2];     someReleaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");     someReleaseSnapShots[1] = assembleReleaseSnapShot(11112, "cluster1",                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\"}");      when(versionAPI.getVersionById(Env.DEV, versionId)).thenReturn(someVersion);     when(configAPI.getConfigByReleaseId(Env.DEV, releaseId)).thenReturn(someReleaseSnapShots);      AppConfigVO appConfigVO = configService.loadReleaseConfig(Env.DEV, appId, versionId);      assertEquals(appConfigVO.getAppId(), appId);     assertEquals(appConfigVO.getVersionId(), versionId);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 2);     assertEquals(0, appConfigVO.getOverrideAppConfigs().size());     assertEquals(1, appConfigVO.getOverrideClusterConfigs().size());   }    @Test   public void testLoadLastestConfig() {     long appId = 6666;     ClusterDTO[] someClusters = assembleClusters();     ConfigItemDTO[] someConfigItem = assembleConfigItems();      when(clusterAPI.getClustersByApp(Env.DEV, appId)).thenReturn(someClusters);     when(configAPI.getLatestConfigItemsByClusters(Env.DEV, Arrays         .asList(Long.valueOf(100), Long.valueOf(101)))).thenReturn(someConfigItem);      AppConfigVO appConfigVO = configService.loadLatestConfig(Env.DEV, appId);      assertEquals(appConfigVO.getAppId(), 6666);     assertEquals(appConfigVO.getVersionId(), PortalConstants.LASTEST_VERSION_ID);     assertEquals(appConfigVO.getDefaultClusterConfigs().size(), 3);     assertEquals(appConfigVO.getOverrideAppConfigs().size(), 1);     assertEquals(appConfigVO.getOverrideClusterConfigs().size(), 1);   }    private VersionDTO assembleVersion(long appId, String versionName, long releaseId) {     VersionDTO version = new VersionDTO();     version.setAppId(appId);     version.setName(versionName);     version.setReleaseId(releaseId);     return version;   }    private ReleaseSnapshotDTO[] assembleReleaseSnapShots() {     ReleaseSnapshotDTO[] releaseSnapShots = new ReleaseSnapshotDTO[3];     releaseSnapShots[0] = assembleReleaseSnapShot(11111, ConfigConsts.DEFAULT_CLUSTER_NAME,                                                   "{\"6666.foo\":\"demo1\", \"6666.bar\":\"demo2\",\"3333.foo\":\"1008\",\"4444.bar\":\"99901\"}");     releaseSnapShots[1] = assembleReleaseSnapShot(11111, "cluster1", "{\"6666.foo\":\"demo1\"}");     releaseSnapShots[2] = assembleReleaseSnapShot(11111, "cluster2", "{\"6666.bar\":\"bar2222\"}");     return releaseSnapShots;   }    private ReleaseSnapshotDTO assembleReleaseSnapShot(long releaseId, String clusterName,                                                      String configurations) {     ReleaseSnapshotDTO releaseSnapShot = new ReleaseSnapshotDTO();     releaseSnapShot.setReleaseId(releaseId);     releaseSnapShot.setClusterName(clusterName);     releaseSnapShot.setConfigurations(configurations);     return releaseSnapShot;   }    private ClusterDTO[] assembleClusters() {     ClusterDTO[] clusters = new ClusterDTO[2];     clusters[0] = assembleCluster(100, 6666, ConfigConsts.DEFAULT_CLUSTER_NAME);     clusters[1] = assembleCluster(101, 6666, "cluster1");     return clusters;   }    private ClusterDTO assembleCluster(long id, long appId, String name) {     ClusterDTO cluster = new ClusterDTO();     cluster.setAppId(appId);     cluster.setId(id);     cluster.setName(name);     return cluster;   }    private ConfigItemDTO[] assembleConfigItems() {     ConfigItemDTO[] configItems = new ConfigItemDTO[5];     configItems[0] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 6666, "6666.k1", "6666.v1");     configItems[1] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 6666, "6666.k2", "6666.v2");     configItems[2] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 6666, "6666.k3", "6666.v3");     configItems[3] =         assembleConfigItem(100, ConfigConsts.DEFAULT_CLUSTER_NAME, 5555, "5555.k1", "5555.v1");     configItems[4] = assembleConfigItem(101, "cluster1", 6666, "6666.k1", "6666.v1");     return configItems;   }    private ConfigItemDTO assembleConfigItem(long clusterId, String clusterName, int appId,                                            String key, String value) {     ConfigItemDTO configItem = new ConfigItemDTO();     configItem.setClusterName(clusterName);     configItem.setClusterId(clusterId);     configItem.setAppId(appId);     configItem.setKey(key);     configItem.setValue(value);     return configItem;   }  } " compose:StringConcatenation merge: LineBased]
