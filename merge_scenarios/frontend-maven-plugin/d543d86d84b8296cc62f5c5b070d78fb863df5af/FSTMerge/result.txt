Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/FrontendPluginFactory.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/FrontendPluginFactory.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/FrontendPluginFactory.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/FrontendPluginFactory.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/FrontendPluginFactory.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/FrontendPluginFactory.java
[NT -> left : Feature]
	[NT -> frontend-plugin-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> github : Folder]
							[NT -> eirslett : Folder]
								[NT -> maven : Folder]
									[NT -> plugins : Folder]
										[NT -> frontend : Folder]
											[NT -> lib : Folder]
												[NT -> FrontendPluginFactory.java : Java-File]
													[NT -> - : CompilationUnit]
														[T -> - : PackageDeclaration "package com.github.eirslett.maven.plugins.frontend.lib;" compose:Replacement merge: Default]
														[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
														[NT -> FrontendPluginFactory : ClassDeclaration]
															[T -> - : Modifiers "public final" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> FrontendPluginFactory : Id "FrontendPluginFactory" compose:Replacement merge: Default]
															[T -> defaultPlatform : FieldDecl "private static final Platform defaultPlatform = Platform.guess();" compose:Replacement merge: SemanticConflict]
															[T -> workingDirectory : FieldDecl "private final File workingDirectory;" compose:Replacement merge: SemanticConflict]
															[T -> proxy : FieldDecl "private final ProxyConfig proxy;" compose:Replacement merge: SemanticConflict]
															[T -> FrontendPluginFactory(File-File) : ConstructorDecl "public FrontendPluginFactory(File workingDirectory){         this(workingDirectory, null);     }" compose:Replacement merge: LineBased]
															[T -> FrontendPluginFactory(File-File-ProxyConfig-ProxyConfig) : ConstructorDecl "public FrontendPluginFactory(File workingDirectory, ProxyConfig proxy){         this.workingDirectory = workingDirectory;         this.proxy = proxy;     }" compose:Replacement merge: LineBased]
															[T -> getNodeAndNPMInstaller({FormalParametersInternal}) : MethodDecl "public NodeAndNPMInstaller getNodeAndNPMInstaller(){         return new DefaultNodeAndNPMInstaller(                 workingDirectory,                 defaultPlatform,                 new DefaultArchiveExtractor(),                 new DefaultFileDownloader(proxy));     }" compose:Replacement merge: LineBased]
															[T -> getBowerRunner({FormalParametersInternal}) : MethodDecl "public BowerRunner getBowerRunner() {         return new DefaultBowerRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getJspmRunner({FormalParametersInternal}) : MethodDecl "public JspmRunner getJspmRunner() {         return new DefaultJspmRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getNpmRunner({FormalParametersInternal}) : MethodDecl "public NpmRunner getNpmRunner() {         return new DefaultNpmRunner(defaultPlatform, workingDirectory, proxy);     }" compose:Replacement merge: LineBased]
															[T -> getGruntRunner({FormalParametersInternal}) : MethodDecl "public GruntRunner getGruntRunner(){         return new DefaultGruntRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getEmberRunner({FormalParametersInternal}) : MethodDecl "public EmberRunner getEmberRunner() {         return new DefaultEmberRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getKarmaRunner({FormalParametersInternal}) : MethodDecl "public KarmaRunner getKarmaRunner(){         return new DefaultKarmaRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getGulpRunner({FormalParametersInternal}) : MethodDecl "public GulpRunner getGulpRunner(){         return new DefaultGulpRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getWebpackRunner({FormalParametersInternal}) : MethodDecl "public WebpackRunner getWebpackRunner(){         return new DefaultWebpackRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> frontend-plugin-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> github : Folder]
							[NT -> eirslett : Folder]
								[NT -> maven : Folder]
									[NT -> plugins : Folder]
										[NT -> frontend : Folder]
											[NT -> lib : Folder]
												[NT -> FrontendPluginFactory.java : Java-File]
													[NT -> - : CompilationUnit]
														[T -> - : PackageDeclaration "package com.github.eirslett.maven.plugins.frontend.lib;" compose:Replacement merge: Default]
														[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
														[NT -> FrontendPluginFactory : ClassDeclaration]
															[T -> - : Modifiers "public final" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> FrontendPluginFactory : Id "FrontendPluginFactory" compose:Replacement merge: Default]
															[T -> defaultPlatform : FieldDecl "private static final Platform defaultPlatform = Platform.guess();" compose:Replacement merge: SemanticConflict]
															[T -> workingDirectory : FieldDecl "private final File workingDirectory;" compose:Replacement merge: SemanticConflict]
															[T -> proxy : FieldDecl "private final ProxyConfig proxy;" compose:Replacement merge: SemanticConflict]
															[T -> FrontendPluginFactory(File-File) : ConstructorDecl "public FrontendPluginFactory(File workingDirectory){         this(workingDirectory, null);     }" compose:Replacement merge: LineBased]
															[T -> FrontendPluginFactory(File-File-ProxyConfig-ProxyConfig) : ConstructorDecl "public FrontendPluginFactory(File workingDirectory, ProxyConfig proxy){         this.workingDirectory = workingDirectory;         this.proxy = proxy;     }" compose:Replacement merge: LineBased]
															[T -> getNodeAndNPMInstaller({FormalParametersInternal}) : MethodDecl "public NodeAndNPMInstaller getNodeAndNPMInstaller(){         return new DefaultNodeAndNPMInstaller(                 workingDirectory,                 defaultPlatform,                 new DefaultArchiveExtractor(),                 new DefaultFileDownloader(proxy));     }" compose:Replacement merge: LineBased]
															[T -> getBowerRunner({FormalParametersInternal}) : MethodDecl "public BowerRunner getBowerRunner() {         return new DefaultBowerRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getNpmRunner({FormalParametersInternal}) : MethodDecl "public NpmRunner getNpmRunner() {         return new DefaultNpmRunner(defaultPlatform, workingDirectory, proxy);     }" compose:Replacement merge: LineBased]
															[T -> getGruntRunner({FormalParametersInternal}) : MethodDecl "public GruntRunner getGruntRunner(){         return new DefaultGruntRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getEmberRunner({FormalParametersInternal}) : MethodDecl "public EmberRunner getEmberRunner() {         return new DefaultEmberRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getKarmaRunner({FormalParametersInternal}) : MethodDecl "public KarmaRunner getKarmaRunner(){         return new DefaultKarmaRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getGulpRunner({FormalParametersInternal}) : MethodDecl "public GulpRunner getGulpRunner(){         return new DefaultGulpRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
															[T -> getWebpackRunner({FormalParametersInternal}) : MethodDecl "public WebpackRunner getWebpackRunner(){         return new DefaultWebpackRunner(defaultPlatform, workingDirectory);     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> frontend-plugin-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> github : Folder]
							[NT -> eirslett : Folder]
								[NT -> maven : Folder]
									[NT -> plugins : Folder]
										[NT -> frontend : Folder]
											[NT -> lib : Folder]
												[NT -> FrontendPluginFactory.java : Java-File]
													[NT -> - : CompilationUnit]
														[T -> - : PackageDeclaration "package com.github.eirslett.maven.plugins.frontend.lib;" compose:Replacement merge: Default]
														[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
														[NT -> FrontendPluginFactory : ClassDeclaration]
															[T -> - : Modifiers "public final" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> FrontendPluginFactory : Id "FrontendPluginFactory" compose:Replacement merge: Default]
															[T -> defaultPlatform : FieldDecl "private static final Platform defaultPlatform = Platform.guess();" compose:Replacement merge: SemanticConflict]
															[T -> workingDirectory : FieldDecl "private final File workingDirectory;" compose:Replacement merge: SemanticConflict]
															[T -> installDirectory : FieldDecl "private final File installDirectory;" compose:Replacement merge: SemanticConflict]
															[T -> FrontendPluginFactory(File-File-File-File) : ConstructorDecl "public FrontendPluginFactory(File workingDirectory, File installDirectory){         this.workingDirectory = workingDirectory;         this.installDirectory = installDirectory;     }" compose:Replacement merge: LineBased]
															[T -> getNodeAndNPMInstaller(ProxyConfig-ProxyConfig) : MethodDecl "public NodeAndNPMInstaller getNodeAndNPMInstaller(ProxyConfig proxy){         return new DefaultNodeAndNPMInstaller(                 getInstallConfig(),                 new DefaultArchiveExtractor(),                 new DefaultFileDownloader(proxy));     }" compose:Replacement merge: LineBased]
															[T -> getBowerRunner({FormalParametersInternal}) : MethodDecl "public BowerRunner getBowerRunner() {         return new DefaultBowerRunner(getExecutorConfig());     }" compose:Replacement merge: LineBased]
															[T -> getNpmRunner(ProxyConfig-ProxyConfig) : MethodDecl "public NpmRunner getNpmRunner(ProxyConfig proxy) {         return new DefaultNpmRunner(getExecutorConfig(), proxy);     }" compose:Replacement merge: LineBased]
															[T -> getGruntRunner({FormalParametersInternal}) : MethodDecl "public GruntRunner getGruntRunner(){         return new DefaultGruntRunner(getExecutorConfig());     }" compose:Replacement merge: LineBased]
															[T -> getEmberRunner({FormalParametersInternal}) : MethodDecl "public EmberRunner getEmberRunner() {         return new DefaultEmberRunner(getExecutorConfig());     }" compose:Replacement merge: LineBased]
															[T -> getKarmaRunner({FormalParametersInternal}) : MethodDecl "public KarmaRunner getKarmaRunner(){         return new DefaultKarmaRunner(getExecutorConfig());     }" compose:Replacement merge: LineBased]
															[T -> getGulpRunner({FormalParametersInternal}) : MethodDecl "public GulpRunner getGulpRunner(){         return new DefaultGulpRunner(getExecutorConfig());     }" compose:Replacement merge: LineBased]
															[T -> getWebpackRunner({FormalParametersInternal}) : MethodDecl "public WebpackRunner getWebpackRunner(){         return new DefaultWebpackRunner(getExecutorConfig());     }" compose:Replacement merge: LineBased]
															[T -> getExecutorConfig({FormalParametersInternal}) : MethodDecl "private NodeExecutorConfig getExecutorConfig() {         return new InstallNodeExecutorConfig(getInstallConfig());     }" compose:Replacement merge: LineBased]
															[T -> getInstallConfig({FormalParametersInternal}) : MethodDecl "private InstallConfig getInstallConfig() {         return new DefaultInstallConfig(installDirectory, workingDirectory, defaultPlatform);     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> frontend-plugin-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> github : Folder]
							[NT -> eirslett : Folder]
								[NT -> maven : Folder]
									[NT -> plugins : Folder]
										[NT -> frontend : Folder]
											[NT -> lib : Folder]
												[NT -> FrontendPluginFactory.java.merge : .java.merge-File]
													[T -> FrontendPluginFactory.java : .java-Content "package com.github.eirslett.maven.plugins.frontend.lib;  import java.io.File;  public final class FrontendPluginFactory {     private static final Platform defaultPlatform = Platform.guess();     private final File workingDirectory;     private final ProxyConfig proxy;      public FrontendPluginFactory(File workingDirectory){         this(workingDirectory, null);     }     public FrontendPluginFactory(File workingDirectory, ProxyConfig proxy){         this.workingDirectory = workingDirectory;         this.proxy = proxy;     }      public NodeAndNPMInstaller getNodeAndNPMInstaller(){         return new DefaultNodeAndNPMInstaller(                 workingDirectory,                 defaultPlatform,                 new DefaultArchiveExtractor(),                 new DefaultFileDownloader(proxy));     }          public BowerRunner getBowerRunner() {         return new DefaultBowerRunner(defaultPlatform, workingDirectory);     }      public JspmRunner getJspmRunner() {         return new DefaultJspmRunner(defaultPlatform, workingDirectory);     }      public NpmRunner getNpmRunner() {         return new DefaultNpmRunner(defaultPlatform, workingDirectory, proxy);     }      public GruntRunner getGruntRunner(){         return new DefaultGruntRunner(defaultPlatform, workingDirectory);     }      public EmberRunner getEmberRunner() {         return new DefaultEmberRunner(defaultPlatform, workingDirectory);     }      public KarmaRunner getKarmaRunner(){         return new DefaultKarmaRunner(defaultPlatform, workingDirectory);     }      public GulpRunner getGulpRunner(){         return new DefaultGulpRunner(defaultPlatform, workingDirectory);     }      public WebpackRunner getWebpackRunner(){         return new DefaultWebpackRunner(defaultPlatform, workingDirectory);     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> frontend-plugin-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> github : Folder]
							[NT -> eirslett : Folder]
								[NT -> maven : Folder]
									[NT -> plugins : Folder]
										[NT -> frontend : Folder]
											[NT -> lib : Folder]
												[NT -> FrontendPluginFactory.java.merge : .java.merge-File]
													[T -> FrontendPluginFactory.java : .java-Content "package com.github.eirslett.maven.plugins.frontend.lib;  import java.io.File;  public final class FrontendPluginFactory {     private static final Platform defaultPlatform = Platform.guess();     private final File workingDirectory;     private final ProxyConfig proxy;      public FrontendPluginFactory(File workingDirectory){         this(workingDirectory, null);     }     public FrontendPluginFactory(File workingDirectory, ProxyConfig proxy){         this.workingDirectory = workingDirectory;         this.proxy = proxy;     }      public NodeAndNPMInstaller getNodeAndNPMInstaller(){         return new DefaultNodeAndNPMInstaller(                 workingDirectory,                 defaultPlatform,                 new DefaultArchiveExtractor(),                 new DefaultFileDownloader(proxy));     }          public BowerRunner getBowerRunner() {         return new DefaultBowerRunner(defaultPlatform, workingDirectory);     }          public NpmRunner getNpmRunner() {         return new DefaultNpmRunner(defaultPlatform, workingDirectory, proxy);     }      public GruntRunner getGruntRunner(){         return new DefaultGruntRunner(defaultPlatform, workingDirectory);     }      public EmberRunner getEmberRunner() {         return new DefaultEmberRunner(defaultPlatform, workingDirectory);     }      public KarmaRunner getKarmaRunner(){         return new DefaultKarmaRunner(defaultPlatform, workingDirectory);     }      public GulpRunner getGulpRunner(){         return new DefaultGulpRunner(defaultPlatform, workingDirectory);     }      public WebpackRunner getWebpackRunner(){         return new DefaultWebpackRunner(defaultPlatform, workingDirectory);     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> frontend-plugin-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> github : Folder]
							[NT -> eirslett : Folder]
								[NT -> maven : Folder]
									[NT -> plugins : Folder]
										[NT -> frontend : Folder]
											[NT -> lib : Folder]
												[NT -> FrontendPluginFactory.java.merge : .java.merge-File]
													[T -> FrontendPluginFactory.java : .java-Content "package com.github.eirslett.maven.plugins.frontend.lib;  import java.io.File;  public final class FrontendPluginFactory {     private static final Platform defaultPlatform = Platform.guess();      private final File workingDirectory;     private final File installDirectory;      public FrontendPluginFactory(File workingDirectory, File installDirectory){         this.workingDirectory = workingDirectory;         this.installDirectory = installDirectory;     }      public NodeAndNPMInstaller getNodeAndNPMInstaller(ProxyConfig proxy){         return new DefaultNodeAndNPMInstaller(                 getInstallConfig(),                 new DefaultArchiveExtractor(),                 new DefaultFileDownloader(proxy));     }          public BowerRunner getBowerRunner() {         return new DefaultBowerRunner(getExecutorConfig());     }          public NpmRunner getNpmRunner(ProxyConfig proxy) {         return new DefaultNpmRunner(getExecutorConfig(), proxy);     }      public GruntRunner getGruntRunner(){         return new DefaultGruntRunner(getExecutorConfig());     }      public EmberRunner getEmberRunner() {         return new DefaultEmberRunner(getExecutorConfig());     }      public KarmaRunner getKarmaRunner(){         return new DefaultKarmaRunner(getExecutorConfig());     }      public GulpRunner getGulpRunner(){         return new DefaultGulpRunner(getExecutorConfig());     }      public WebpackRunner getWebpackRunner(){         return new DefaultWebpackRunner(getExecutorConfig());     }      private NodeExecutorConfig getExecutorConfig() {         return new InstallNodeExecutorConfig(getInstallConfig());     }      private InstallConfig getInstallConfig() {         return new DefaultInstallConfig(installDirectory, workingDirectory, defaultPlatform);     } } " compose:StringConcatenation merge: LineBased]
