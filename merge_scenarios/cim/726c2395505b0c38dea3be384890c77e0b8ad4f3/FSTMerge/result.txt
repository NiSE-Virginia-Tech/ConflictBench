Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/RingBufferWheelTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/RingBufferWheelTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/RingBufferWheelTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/RingBufferWheelTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/RingBufferWheelTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/RingBufferWheelTest.java
[NT -> left : Feature]
	[NT -> cim-common : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> crossoverjie : Folder]
							[NT -> cim : Folder]
								[NT -> common : Folder]
									[NT -> data : Folder]
										[NT -> construct : Folder]
											[NT -> RingBufferWheelTest.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package com.crossoverjie.cim.common.data.construct;" compose:Replacement merge: Default]
													[T -> com.google.common.util.concurrent.ThreadFactoryBuilder{ImportPackage} : ImportDeclaration "import com.google.common.util.concurrent.ThreadFactoryBuilder;" compose:Replacement merge: Default]
													[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
													[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.BlockingQueue{ImportPackage} : ImportDeclaration "import java.util.concurrent.BlockingQueue;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.ExecutorService{ImportPackage} : ImportDeclaration "import java.util.concurrent.ExecutorService;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.Executors{ImportPackage} : ImportDeclaration "import java.util.concurrent.Executors;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.LinkedBlockingQueue{ImportPackage} : ImportDeclaration "import java.util.concurrent.LinkedBlockingQueue;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.ThreadFactory{ImportPackage} : ImportDeclaration "import java.util.concurrent.ThreadFactory;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.ThreadPoolExecutor{ImportPackage} : ImportDeclaration "import java.util.concurrent.ThreadPoolExecutor;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.TimeUnit{ImportPackage} : ImportDeclaration "import java.util.concurrent.TimeUnit;" compose:Replacement merge: Default]
													[NT -> RingBufferWheelTest : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> RingBufferWheelTest : Id "RingBufferWheelTest" compose:Replacement merge: Default]
														[T -> logger : FieldDecl "private static Logger logger = LoggerFactory.getLogger(RingBufferWheelTest.class) ;" compose:Replacement merge: SemanticConflict]
														[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) throws InterruptedException {         test1();          return;     }" compose:Replacement merge: LineBased]
														[T -> test1({FormalParametersInternal}) : MethodDecl "private static void test1() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          while (true){             logger.info("task size={}" , wheel.taskSize());             TimeUnit.SECONDS.sleep(1);         }     }" compose:Replacement merge: LineBased]
														[T -> test2({FormalParametersInternal}) : MethodDecl "private static void test2() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();  //        new Thread(() -> { //            while (true){ //                logger.info("task size={}" , wheel.taskSize()); //                try { //                    TimeUnit.SECONDS.sleep(1); //                } catch (InterruptedException e) { //                    e.printStackTrace(); //                } //            } //        }).start();          TimeUnit.SECONDS.sleep(12);         wheel.stop(true);       }" compose:Replacement merge: LineBased]
														[T -> test3({FormalParametersInternal}) : MethodDecl "private static void test3() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();           TimeUnit.SECONDS.sleep(2);         wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test4({FormalParametersInternal}) : MethodDecl "private static void test4() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test5({FormalParametersInternal}) : MethodDecl "private static void test5() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[NT -> Task : InnerClassDecl]
															[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> Task : Id "Task" compose:Replacement merge: Default]
															[T -> - : ExtendsList "extends RingBufferWheel.Task" compose:Replacement merge: Default]
															[T -> run({FormalParametersInternal}) : MethodDecl "@Override         public void run() {             logger.info("================");         }" compose:Replacement merge: LineBased]
														[T -> cuncrrentTest6({FormalParametersInternal}) : MethodDecl "private static void cuncrrentTest6() throws InterruptedException {         BlockingQueue<Runnable> queue = new LinkedBlockingQueue(10);         ThreadFactory product = new ThreadFactoryBuilder()                 .setNameFormat("msg-callback-%d")                 .setDaemon(true)                 .build();         ThreadPoolExecutor business = new ThreadPoolExecutor(4, 4, 1, TimeUnit.MILLISECONDS, queue,product);          ExecutorService executorService = Executors.newFixedThreadPool(10) ;         RingBufferWheel wheel = new RingBufferWheel(executorService) ;          business.execute(new Runnable() {             @Override             public void run() {              }         });          for (int i = 0; i < 10; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }           TimeUnit.SECONDS.sleep(10);         RingBufferWheel.Task task = new Job(15) ;         task.setKey(15);         wheel.addTask(task);          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[NT -> Job : InnerClassDecl]
															[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> Job : Id "Job" compose:Replacement merge: Default]
															[T -> - : ExtendsList "extends RingBufferWheel.Task" compose:Replacement merge: Default]
															[T -> num : FieldDecl "private int num ;" compose:Replacement merge: SemanticConflict]
															[T -> Job(int-int) : ConstructorDecl "public Job(int num) {             this.num = num;         }" compose:Replacement merge: LineBased]
															[T -> run({FormalParametersInternal}) : MethodDecl "@Override         public void run() {             logger.info("number={}" , num);         }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> cim-common : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> crossoverjie : Folder]
							[NT -> cim : Folder]
								[NT -> common : Folder]
									[NT -> data : Folder]
										[NT -> construct : Folder]
											[NT -> RingBufferWheelTest.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package com.crossoverjie.cim.common.data.construct;" compose:Replacement merge: Default]
													[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
													[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
													[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.ExecutorService{ImportPackage} : ImportDeclaration "import java.util.concurrent.ExecutorService;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.Executors{ImportPackage} : ImportDeclaration "import java.util.concurrent.Executors;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.TimeUnit{ImportPackage} : ImportDeclaration "import java.util.concurrent.TimeUnit;" compose:Replacement merge: Default]
													[NT -> RingBufferWheelTest : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> RingBufferWheelTest : Id "RingBufferWheelTest" compose:Replacement merge: Default]
														[T -> logger : FieldDecl "private static Logger logger = LoggerFactory.getLogger(RingBufferWheelTest.class) ;" compose:Replacement merge: SemanticConflict]
														[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) throws InterruptedException {         test5();          return;     }" compose:Replacement merge: LineBased]
														[T -> test1({FormalParametersInternal}) : MethodDecl "private static void test1() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();          while (true){             logger.info("task size={}" , wheel.taskSize());             TimeUnit.SECONDS.sleep(1);         }     }" compose:Replacement merge: LineBased]
														[T -> test2({FormalParametersInternal}) : MethodDecl "private static void test2() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();  //        new Thread(() -> { //            while (true){ //                logger.info("task size={}" , wheel.taskSize()); //                try { //                    TimeUnit.SECONDS.sleep(1); //                } catch (InterruptedException e) { //                    e.printStackTrace(); //                } //            } //        }).start();          TimeUnit.SECONDS.sleep(12);         wheel.stop(true);       }" compose:Replacement merge: LineBased]
														[T -> test3({FormalParametersInternal}) : MethodDecl "private static void test3() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();           TimeUnit.SECONDS.sleep(2);         wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test4({FormalParametersInternal}) : MethodDecl "private static void test4() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test5({FormalParametersInternal}) : MethodDecl "private static void test5() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[NT -> Task : InnerClassDecl]
															[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> Task : Id "Task" compose:Replacement merge: Default]
															[T -> - : ExtendsList "extends RingBufferWheel.Task" compose:Replacement merge: Default]
															[T -> run({FormalParametersInternal}) : MethodDecl "@Override         public void run() {             logger.info("================");         }" compose:Replacement merge: LineBased]
														[NT -> Job : InnerClassDecl]
															[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> Job : Id "Job" compose:Replacement merge: Default]
															[T -> - : ExtendsList "extends RingBufferWheel.Task" compose:Replacement merge: Default]
															[T -> num : FieldDecl "private int num ;" compose:Replacement merge: SemanticConflict]
															[T -> Job(int-int) : ConstructorDecl "public Job(int num) {             this.num = num;         }" compose:Replacement merge: LineBased]
															[T -> run({FormalParametersInternal}) : MethodDecl "@Override         public void run() {             logger.info("number={}" , num);         }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> cim-common : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> crossoverjie : Folder]
							[NT -> cim : Folder]
								[NT -> common : Folder]
									[NT -> data : Folder]
										[NT -> construct : Folder]
											[NT -> RingBufferWheelTest.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package com.crossoverjie.cim.common.data.construct;" compose:Replacement merge: Default]
													[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
													[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.ExecutorService{ImportPackage} : ImportDeclaration "import java.util.concurrent.ExecutorService;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.Executors{ImportPackage} : ImportDeclaration "import java.util.concurrent.Executors;" compose:Replacement merge: Default]
													[T -> java.util.concurrent.TimeUnit{ImportPackage} : ImportDeclaration "import java.util.concurrent.TimeUnit;" compose:Replacement merge: Default]
													[NT -> RingBufferWheelTest : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> RingBufferWheelTest : Id "RingBufferWheelTest" compose:Replacement merge: Default]
														[T -> logger : FieldDecl "private static Logger logger = LoggerFactory.getLogger(RingBufferWheelTest.class) ;" compose:Replacement merge: SemanticConflict]
														[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) throws InterruptedException {         test6();          return;     }" compose:Replacement merge: LineBased]
														[T -> test1({FormalParametersInternal}) : MethodDecl "private static void test1() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel.Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();          while (true){             logger.info("task size={}" , wheel.taskSize());             TimeUnit.SECONDS.sleep(1);         }     }" compose:Replacement merge: LineBased]
														[T -> test2({FormalParametersInternal}) : MethodDecl "private static void test2() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel.Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();  //        new Thread(() -> { //            while (true){ //                logger.info("task size={}" , wheel.taskSize()); //                try { //                    TimeUnit.SECONDS.sleep(1); //                } catch (InterruptedException e) { //                    e.printStackTrace(); //                } //            } //        }).start();          TimeUnit.SECONDS.sleep(12);         wheel.stop(true);       }" compose:Replacement merge: LineBased]
														[T -> test3({FormalParametersInternal}) : MethodDecl "private static void test3() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel.Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();           TimeUnit.SECONDS.sleep(2);         wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test4({FormalParametersInternal}) : MethodDecl "private static void test4() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService) ;          for (int i = 0; i < 65; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test5({FormalParametersInternal}) : MethodDecl "private static void test5() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 65; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[T -> test6({FormalParametersInternal}) : MethodDecl "private static void test6() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 10; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          TimeUnit.SECONDS.sleep(10);         RingBufferWheel.Task task = new Job(15) ;         task.setKey(15);         wheel.addTask(task);         wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }" compose:Replacement merge: LineBased]
														[NT -> Job : InnerClassDecl]
															[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> Job : Id "Job" compose:Replacement merge: Default]
															[T -> - : ExtendsList "extends RingBufferWheel.Task" compose:Replacement merge: Default]
															[T -> num : FieldDecl "private int num ;" compose:Replacement merge: SemanticConflict]
															[T -> Job(int-int) : ConstructorDecl "public Job(int num) {             this.num = num;         }" compose:Replacement merge: LineBased]
															[T -> run({FormalParametersInternal}) : MethodDecl "@Override         public void run() {             logger.info("number={}" , num);         }" compose:Replacement merge: LineBased]
														[NT -> Task : InnerClassDecl]
															[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
															[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
															[T -> Task : Id "Task" compose:Replacement merge: Default]
															[T -> - : ExtendsList "extends RingBufferWheel.Task" compose:Replacement merge: Default]
															[T -> run({FormalParametersInternal}) : MethodDecl "@Override         public void run() {             logger.info("================");         }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> cim-common : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> crossoverjie : Folder]
							[NT -> cim : Folder]
								[NT -> common : Folder]
									[NT -> data : Folder]
										[NT -> construct : Folder]
											[NT -> RingBufferWheelTest.java.merge : .java.merge-File]
												[T -> RingBufferWheelTest.java : .java-Content "package com.crossoverjie.cim.common.data.construct;  import com.google.common.util.concurrent.ThreadFactoryBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.concurrent.BlockingQueue; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadFactory; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit;  public class RingBufferWheelTest {      private static Logger logger = LoggerFactory.getLogger(RingBufferWheelTest.class) ;      public static void main(String[] args) throws InterruptedException {         test1();          return;     }      private static void test1() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          while (true){             logger.info("task size={}" , wheel.taskSize());             TimeUnit.SECONDS.sleep(1);         }     }     private static void test2() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();  //        new Thread(() -> { //            while (true){ //                logger.info("task size={}" , wheel.taskSize()); //                try { //                    TimeUnit.SECONDS.sleep(1); //                } catch (InterruptedException e) { //                    e.printStackTrace(); //                } //            } //        }).start();          TimeUnit.SECONDS.sleep(12);         wheel.stop(true);       }     private static void test3() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();           TimeUnit.SECONDS.sleep(2);         wheel.stop(false);       }     private static void test4() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }     private static void test5() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }       private static class Task extends RingBufferWheel.Task{          @Override         public void run() {             logger.info("================");         }     }     private static void cuncrrentTest6() throws InterruptedException {         BlockingQueue<Runnable> queue = new LinkedBlockingQueue(10);         ThreadFactory product = new ThreadFactoryBuilder()                 .setNameFormat("msg-callback-%d")                 .setDaemon(true)                 .build();         ThreadPoolExecutor business = new ThreadPoolExecutor(4, 4, 1, TimeUnit.MILLISECONDS, queue,product);          ExecutorService executorService = Executors.newFixedThreadPool(10) ;         RingBufferWheel wheel = new RingBufferWheel(executorService) ;          business.execute(new Runnable() {             @Override             public void run() {              }         });          for (int i = 0; i < 10; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }           TimeUnit.SECONDS.sleep(10);         RingBufferWheel.Task task = new Job(15) ;         task.setKey(15);         wheel.addTask(task);          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }      private static class Job extends RingBufferWheel.Task{          private int num ;          public Job(int num) {             this.num = num;         }          @Override         public void run() {             logger.info("number={}" , num);         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> cim-common : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> crossoverjie : Folder]
							[NT -> cim : Folder]
								[NT -> common : Folder]
									[NT -> data : Folder]
										[NT -> construct : Folder]
											[NT -> RingBufferWheelTest.java.merge : .java.merge-File]
												[T -> RingBufferWheelTest.java : .java-Content "package com.crossoverjie.cim.common.data.construct;  import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;  public class RingBufferWheelTest {      private static Logger logger = LoggerFactory.getLogger(RingBufferWheelTest.class) ;      public static void main(String[] args) throws InterruptedException {         test5();          return;     }      private static void test1() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();          while (true){             logger.info("task size={}" , wheel.taskSize());             TimeUnit.SECONDS.sleep(1);         }     }     private static void test2() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();  //        new Thread(() -> { //            while (true){ //                logger.info("task size={}" , wheel.taskSize()); //                try { //                    TimeUnit.SECONDS.sleep(1); //                } catch (InterruptedException e) { //                    e.printStackTrace(); //                } //            } //        }).start();          TimeUnit.SECONDS.sleep(12);         wheel.stop(true);       }     private static void test3() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();           TimeUnit.SECONDS.sleep(2);         wheel.stop(false);       }     private static void test4() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }     private static void test5() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 65; i++) {             Job task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }       private static class Task extends RingBufferWheel.Task{          @Override         public void run() {             logger.info("================");         }     }      private static class Job extends RingBufferWheel.Task{          private int num ;          public Job(int num) {             this.num = num;         }          @Override         public void run() {             logger.info("number={}" , num);         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> cim-common : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> crossoverjie : Folder]
							[NT -> cim : Folder]
								[NT -> common : Folder]
									[NT -> data : Folder]
										[NT -> construct : Folder]
											[NT -> RingBufferWheelTest.java.merge : .java.merge-File]
												[T -> RingBufferWheelTest.java : .java-Content "package com.crossoverjie.cim.common.data.construct;  import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;  public class RingBufferWheelTest {      private static Logger logger = LoggerFactory.getLogger(RingBufferWheelTest.class) ;      public static void main(String[] args) throws InterruptedException {         test6();          return;     }      private static void test1() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel.Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();          while (true){             logger.info("task size={}" , wheel.taskSize());             TimeUnit.SECONDS.sleep(1);         }     }     private static void test2() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel.Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();  //        new Thread(() -> { //            while (true){ //                logger.info("task size={}" , wheel.taskSize()); //                try { //                    TimeUnit.SECONDS.sleep(1); //                } catch (InterruptedException e) { //                    e.printStackTrace(); //                } //            } //        }).start();          TimeUnit.SECONDS.sleep(12);         wheel.stop(true);       }     private static void test3() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel.Task task = new Task() ;         task.setKey(10);         RingBufferWheel wheel = new RingBufferWheel(executorService) ;         wheel.addTask(task) ;          task = new Task() ;         task.setKey(74);         wheel.addTask(task) ;          wheel.start();           TimeUnit.SECONDS.sleep(2);         wheel.stop(false);       }     private static void test4() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService) ;          for (int i = 0; i < 65; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }     private static void test5() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 65; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }     private static void test6() throws InterruptedException {         ExecutorService executorService = Executors.newFixedThreadPool(2) ;          RingBufferWheel wheel = new RingBufferWheel(executorService,512) ;          for (int i = 0; i < 10; i++) {             RingBufferWheel.Task task = new Job(i) ;             task.setKey(i);             wheel.addTask(task);         }          wheel.start();          TimeUnit.SECONDS.sleep(10);         RingBufferWheel.Task task = new Job(15) ;         task.setKey(15);         wheel.addTask(task);         wheel.start();          logger.info("task size={}",wheel.taskSize());          wheel.stop(false);       }      private static class Job extends RingBufferWheel.Task{          private int num ;          public Job(int num) {             this.num = num;         }          @Override         public void run() {             logger.info("number={}" , num);         }     }      private static class Task extends RingBufferWheel.Task{          @Override         public void run() {             logger.info("================");         }      } } " compose:StringConcatenation merge: LineBased]
