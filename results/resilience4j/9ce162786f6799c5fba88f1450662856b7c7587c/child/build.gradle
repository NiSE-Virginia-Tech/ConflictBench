buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.3.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ajoberstar:gradle-git:1.3.2"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply from: 'gradle/publishing.gradle'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.ajoberstar.github-pages'

group = 'io.github.robwin'
description = 'A CircuitBreaker pattern implementation for Java 8 and functional programming.'
version = '0.8.0-SNAPSHOT'
ext.releaseVersion = '0.7.1'

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
}

repositories {
    maven { url 'http://repo.spring.io/libs-snapshot' }
    mavenCentral()
    jcenter()

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

jmh {
    duplicateClassesStrategy = 'warn'
    jmhVersion = '1.17'
}

dependencies {
    compile "io.javaslang:javaslang:2.0.4"
    // compile 'org.reactivestreams:reactive-streams:1.0.0'
    compile "io.reactivex.rxjava2:rxjava:2.0.1"
    compile "org.slf4j:slf4j-api:1.7.13"
    compile "javax.cache:cache-api:1.0.0"

    testCompile "io.dropwizard.metrics:metrics-core:3.1.2"
    testCompile "junit:junit:4.11"
    testCompile "org.assertj:assertj-core:3.0.0"
    testCompile "ch.qos.logback:logback-classic:0.9.26"
    testCompile "io.dropwizard.metrics:metrics-healthchecks:3.1.2"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "org.powermock:powermock:1.6.6"
    testCompile "org.powermock:powermock-api-mockito:1.6.6"
    testCompile "org.powermock:powermock-module-junit4:1.6.6"
    testCompile "com.jayway.awaitility:awaitility:1.7.0"
    testCompile "org.mapdb:thread-weaver:3.0.mapdb"

    jmh "ch.qos.logback:logback-classic:0.9.26"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:1.12"
}

test {
    exclude 'io/github/robwin/circularbuffer/concurrent/'
}

task allTests(type: Test) {}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

cobertura {
    coverageFormats = ['html', 'xml']
//    afterEvaluate {
//        classDirectories = files(classDirectories.files.collect {
//            fileTree(dir: it,
//                    exclude: ['**/**Benchmark**'])
//        })
//    }
}

tasks.coveralls {
    dependsOn 'check'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

asciidoctor {
    sources {
        include 'index.adoc'
    }
    backends = ['html5']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            'release-version': project.releaseVersion
    ]
    resources {
        from(sourceDir) {
            include 'images/**'
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }
}

asciidoctor.dependsOn test
publishGhPages.dependsOn asciidoctor

githubPages {
    repoUri = 'https://github.com/RobWin/javaslang-circuitbreaker.git'

    credentials {
        username = project.hasProperty('githubUser') ? project.githubUser : System.getenv('GITHUB_USER')
        password = project.hasProperty('githubPassword') ? project.githubPassword : System.getenv('GITHUB_PASSWORD')
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
    }
}
