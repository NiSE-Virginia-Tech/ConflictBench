Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java
[NT -> left : Feature]
	[NT -> webmagic-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> us : Folder]
						[NT -> codecraft : Folder]
							[NT -> webmagic : Folder]
								[NT -> Site.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package us.codecraft.webmagic;" compose:Replacement merge: Default]
										[T -> com.google.common.collect.HashBasedTable{ImportPackage} : ImportDeclaration "import com.google.common.collect.HashBasedTable;" compose:Replacement merge: Default]
										[T -> com.google.common.collect.Table{ImportPackage} : ImportDeclaration "import com.google.common.collect.Table;" compose:Replacement merge: Default]
										[T -> org.apache.http.HttpHost{ImportPackage} : ImportDeclaration "import org.apache.http.HttpHost;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.proxy.Proxy{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.proxy.Proxy;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.proxy.SimpleProxyPool{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.proxy.SimpleProxyPool;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.proxy.ProxyPool{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.proxy.ProxyPool;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.utils.UrlUtils{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.utils.UrlUtils;" compose:Replacement merge: Default]
										[T -> java.util.* : ImportDeclaration "import java.util.*;" compose:Replacement merge: Default]
										[NT -> Site : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> Site : Id "Site" compose:Replacement merge: Default]
											[T -> domain : FieldDecl "private String domain;" compose:Replacement merge: SemanticConflict]
											[T -> userAgent : FieldDecl "private String userAgent;" compose:Replacement merge: SemanticConflict]
											[T -> defaultCookies : FieldDecl "private Map<String, String> defaultCookies = new LinkedHashMap<String, String>();" compose:Replacement merge: SemanticConflict]
											[T -> cookies : FieldDecl "private Table<String, String, String> cookies = HashBasedTable.create();" compose:Replacement merge: SemanticConflict]
											[T -> charset : FieldDecl "private String charset;" compose:Replacement merge: SemanticConflict]
											[T -> startRequests : FieldDecl "private List<Request> startRequests = new ArrayList<Request>();" compose:Replacement merge: SemanticConflict]
											[T -> sleepTime : FieldDecl "private int sleepTime = 5000;" compose:Replacement merge: SemanticConflict]
											[T -> retryTimes : FieldDecl "private int retryTimes = 0;" compose:Replacement merge: SemanticConflict]
											[T -> cycleRetryTimes : FieldDecl "private int cycleRetryTimes = 0;" compose:Replacement merge: SemanticConflict]
											[T -> retrySleepTime : FieldDecl "private int retrySleepTime = 1000;" compose:Replacement merge: SemanticConflict]
											[T -> timeOut : FieldDecl "private int timeOut = 5000;" compose:Replacement merge: SemanticConflict]
											[T -> DEFAULT_STATUS_CODE_SET : FieldDecl "private static final Set<Integer> DEFAULT_STATUS_CODE_SET = new HashSet<Integer>();" compose:Replacement merge: SemanticConflict]
											[T -> acceptStatCode : FieldDecl "private Set<Integer> acceptStatCode = DEFAULT_STATUS_CODE_SET;" compose:Replacement merge: SemanticConflict]
											[T -> headers : FieldDecl "private Map<String, String> headers = new HashMap<String, String>();" compose:Replacement merge: SemanticConflict]
											[T -> httpProxy : FieldDecl "private HttpHost httpProxy;" compose:Replacement merge: SemanticConflict]
											[T -> httpProxyPool : FieldDecl "private ProxyPool httpProxyPool;" compose:Replacement merge: SemanticConflict]
											[T -> useGzip : FieldDecl "private boolean useGzip = true;" compose:Replacement merge: SemanticConflict]
											[NT -> HeaderConst : InnerClassDecl]
												[T -> - : Modifiers "public static" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
												[T -> HeaderConst : Id "HeaderConst" compose:Replacement merge: Default]
												[T -> REFERER : FieldDecl "public static final String REFERER = "Referer";" compose:Replacement merge: SemanticConflict]
											[T -> auto1 : InitializerDecl "static {         DEFAULT_STATUS_CODE_SET.add(200);     }" compose:Replacement merge: Default]
											[T -> me({FormalParametersInternal}) : MethodDecl "public static Site me() {         return new Site();     }" compose:Replacement merge: LineBased]
											[T -> addCookie(String-String-String-String) : MethodDecl "public Site addCookie(String name, String value) {         defaultCookies.put(name, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> addCookie(String-String-String-String-String-String) : MethodDecl "public Site addCookie(String domain, String name, String value) {         cookies.put(domain, name, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> setUserAgent(String-String) : MethodDecl "public Site setUserAgent(String userAgent) {         this.userAgent = userAgent;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCookies({FormalParametersInternal}) : MethodDecl "public Map<String, String> getCookies() {         return defaultCookies;     }" compose:Replacement merge: LineBased]
											[T -> getAllCookies({FormalParametersInternal}) : MethodDecl "public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();     }" compose:Replacement merge: LineBased]
											[T -> getUserAgent({FormalParametersInternal}) : MethodDecl "public String getUserAgent() {         return userAgent;     }" compose:Replacement merge: LineBased]
											[T -> getDomain({FormalParametersInternal}) : MethodDecl "public String getDomain() {         return domain;     }" compose:Replacement merge: LineBased]
											[T -> setDomain(String-String) : MethodDecl "public Site setDomain(String domain) {         this.domain = domain;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setCharset(String-String) : MethodDecl "public Site setCharset(String charset) {         this.charset = charset;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCharset({FormalParametersInternal}) : MethodDecl "public String getCharset() {         return charset;     }" compose:Replacement merge: LineBased]
											[T -> getTimeOut({FormalParametersInternal}) : MethodDecl "public int getTimeOut() {         return timeOut;     }" compose:Replacement merge: LineBased]
											[T -> setTimeOut(int-int) : MethodDecl "public Site setTimeOut(int timeOut) {         this.timeOut = timeOut;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setAcceptStatCode(Set<Integer>-Set<Integer>) : MethodDecl "public Site setAcceptStatCode(Set<Integer> acceptStatCode) {         this.acceptStatCode = acceptStatCode;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getAcceptStatCode({FormalParametersInternal}) : MethodDecl "public Set<Integer> getAcceptStatCode() {         return acceptStatCode;     }" compose:Replacement merge: LineBased]
											[T -> getStartUrls({FormalParametersInternal}) : MethodDecl "@Deprecated     public List<String> getStartUrls() {         return UrlUtils.convertToUrls(startRequests);     }" compose:Replacement merge: LineBased]
											[T -> getStartRequests({FormalParametersInternal}) : MethodDecl "public List<Request> getStartRequests() {         return startRequests;     }" compose:Replacement merge: LineBased]
											[T -> addStartUrl(String-String) : MethodDecl "public Site addStartUrl(String startUrl) {         return addStartRequest(new Request(startUrl));     }" compose:Replacement merge: LineBased]
											[T -> addStartRequest(Request-Request) : MethodDecl "public Site addStartRequest(Request startRequest) {         this.startRequests.add(startRequest);         if (domain == null && startRequest.getUrl() != null) {             domain = UrlUtils.getDomain(startRequest.getUrl());         }         return this;     }" compose:Replacement merge: LineBased]
											[T -> setSleepTime(int-int) : MethodDecl "public Site setSleepTime(int sleepTime) {         this.sleepTime = sleepTime;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getSleepTime({FormalParametersInternal}) : MethodDecl "public int getSleepTime() {         return sleepTime;     }" compose:Replacement merge: LineBased]
											[T -> getRetryTimes({FormalParametersInternal}) : MethodDecl "public int getRetryTimes() {         return retryTimes;     }" compose:Replacement merge: LineBased]
											[T -> getHeaders({FormalParametersInternal}) : MethodDecl "public Map<String, String> getHeaders() {         return headers;     }" compose:Replacement merge: LineBased]
											[T -> addHeader(String-String-String-String) : MethodDecl "public Site addHeader(String key, String value) {         headers.put(key, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> setRetryTimes(int-int) : MethodDecl "public Site setRetryTimes(int retryTimes) {         this.retryTimes = retryTimes;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCycleRetryTimes({FormalParametersInternal}) : MethodDecl "public int getCycleRetryTimes() {         return cycleRetryTimes;     }" compose:Replacement merge: LineBased]
											[T -> setCycleRetryTimes(int-int) : MethodDecl "public Site setCycleRetryTimes(int cycleRetryTimes) {         this.cycleRetryTimes = cycleRetryTimes;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxy({FormalParametersInternal}) : MethodDecl "public HttpHost getHttpProxy() {         return httpProxy;     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxy(HttpHost-HttpHost) : MethodDecl "public Site setHttpProxy(HttpHost httpProxy) {         this.httpProxy = httpProxy;         return this;     }" compose:Replacement merge: LineBased]
											[T -> isUseGzip({FormalParametersInternal}) : MethodDecl "public boolean isUseGzip() {         return useGzip;     }" compose:Replacement merge: LineBased]
											[T -> getRetrySleepTime({FormalParametersInternal}) : MethodDecl "public int getRetrySleepTime() {         return retrySleepTime;     }" compose:Replacement merge: LineBased]
											[T -> setRetrySleepTime(int-int) : MethodDecl "public Site setRetrySleepTime(int retrySleepTime) {         this.retrySleepTime = retrySleepTime;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setUseGzip(boolean-boolean) : MethodDecl "public Site setUseGzip(boolean useGzip) {         this.useGzip = useGzip;         return this;     }" compose:Replacement merge: LineBased]
											[T -> toTask({FormalParametersInternal}) : MethodDecl "public Task toTask() {         return new Task() {             @Override             public String getUUID() {                 return Site.this.getDomain();             }              @Override             public Site getSite() {                 return Site.this;             }         };     }" compose:Replacement merge: LineBased]
											[T -> equals(Object-Object) : MethodDecl "@Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;          Site site = (Site) o;          if (cycleRetryTimes != site.cycleRetryTimes) return false;         if (retryTimes != site.retryTimes) return false;         if (sleepTime != site.sleepTime) return false;         if (timeOut != site.timeOut) return false;         if (acceptStatCode != null ? !acceptStatCode.equals(site.acceptStatCode) : site.acceptStatCode != null)             return false;         if (charset != null ? !charset.equals(site.charset) : site.charset != null) return false;         if (defaultCookies != null ? !defaultCookies.equals(site.defaultCookies) : site.defaultCookies != null)             return false;         if (domain != null ? !domain.equals(site.domain) : site.domain != null) return false;         if (headers != null ? !headers.equals(site.headers) : site.headers != null) return false;         if (startRequests != null ? !startRequests.equals(site.startRequests) : site.startRequests != null)             return false;         if (userAgent != null ? !userAgent.equals(site.userAgent) : site.userAgent != null) return false;          return true;     }" compose:Replacement merge: LineBased]
											[T -> hashCode({FormalParametersInternal}) : MethodDecl "@Override     public int hashCode() {         int result = domain != null ? domain.hashCode() : 0;         result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);         result = 31 * result + (defaultCookies != null ? defaultCookies.hashCode() : 0);         result = 31 * result + (charset != null ? charset.hashCode() : 0);         result = 31 * result + (startRequests != null ? startRequests.hashCode() : 0);         result = 31 * result + sleepTime;         result = 31 * result + retryTimes;         result = 31 * result + cycleRetryTimes;         result = 31 * result + timeOut;         result = 31 * result + (acceptStatCode != null ? acceptStatCode.hashCode() : 0);         result = 31 * result + (headers != null ? headers.hashCode() : 0);         return result;     }" compose:Replacement merge: LineBased]
											[T -> toString({FormalParametersInternal}) : MethodDecl "@Override     public String toString() {         return "Site{" +                 "domain='" + domain + '\'' +                 ", userAgent='" + userAgent + '\'' +                 ", cookies=" + defaultCookies +                 ", charset='" + charset + '\'' +                 ", startRequests=" + startRequests +                 ", sleepTime=" + sleepTime +                 ", retryTimes=" + retryTimes +                 ", cycleRetryTimes=" + cycleRetryTimes +                 ", timeOut=" + timeOut +                 ", acceptStatCode=" + acceptStatCode +                 ", headers=" + headers +                 '}';     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxyPool(ProxyPool-ProxyPool) : MethodDecl "public Site setHttpProxyPool(ProxyPool proxyPool) {         this.httpProxyPool = proxyPool;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxyPool(List<String[]>-List<String[]>-boolean-boolean) : MethodDecl "public Site setHttpProxyPool(List<String[]> httpProxyList, boolean isUseLastProxy) {         this.httpProxyPool=new SimpleProxyPool(httpProxyList, isUseLastProxy);         return this;     }" compose:Replacement merge: LineBased]
											[T -> enableHttpProxyPool({FormalParametersInternal}) : MethodDecl "public Site enableHttpProxyPool() {         this.httpProxyPool=new SimpleProxyPool();         return this;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxyPool({FormalParametersInternal}) : MethodDecl "public ProxyPool getHttpProxyPool() {         return httpProxyPool;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxyFromPool({FormalParametersInternal}) : MethodDecl "public Proxy getHttpProxyFromPool() {         return httpProxyPool.getProxy();     }" compose:Replacement merge: LineBased]
											[T -> returnHttpProxyToPool(HttpHost-HttpHost-int-int) : MethodDecl "public void returnHttpProxyToPool(HttpHost proxy,int statusCode) {         httpProxyPool.returnProxy(proxy,statusCode);     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> webmagic-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> us : Folder]
						[NT -> codecraft : Folder]
							[NT -> webmagic : Folder]
								[NT -> Site.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package us.codecraft.webmagic;" compose:Replacement merge: Default]
										[T -> com.google.common.collect.HashBasedTable{ImportPackage} : ImportDeclaration "import com.google.common.collect.HashBasedTable;" compose:Replacement merge: Default]
										[T -> com.google.common.collect.Table{ImportPackage} : ImportDeclaration "import com.google.common.collect.Table;" compose:Replacement merge: Default]
										[T -> org.apache.http.HttpHost{ImportPackage} : ImportDeclaration "import org.apache.http.HttpHost;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.proxy.ProxyPool{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.proxy.ProxyPool;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.utils.UrlUtils{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.utils.UrlUtils;" compose:Replacement merge: Default]
										[T -> java.util.* : ImportDeclaration "import java.util.*;" compose:Replacement merge: Default]
										[NT -> Site : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> Site : Id "Site" compose:Replacement merge: Default]
											[T -> domain : FieldDecl "private String domain;" compose:Replacement merge: SemanticConflict]
											[T -> userAgent : FieldDecl "private String userAgent;" compose:Replacement merge: SemanticConflict]
											[T -> defaultCookies : FieldDecl "private Map<String, String> defaultCookies = new LinkedHashMap<String, String>();" compose:Replacement merge: SemanticConflict]
											[T -> cookies : FieldDecl "private Table<String, String, String> cookies = HashBasedTable.create();" compose:Replacement merge: SemanticConflict]
											[T -> charset : FieldDecl "private String charset;" compose:Replacement merge: SemanticConflict]
											[T -> startRequests : FieldDecl "private List<Request> startRequests = new ArrayList<Request>();" compose:Replacement merge: SemanticConflict]
											[T -> sleepTime : FieldDecl "private int sleepTime = 5000;" compose:Replacement merge: SemanticConflict]
											[T -> retryTimes : FieldDecl "private int retryTimes = 0;" compose:Replacement merge: SemanticConflict]
											[T -> cycleRetryTimes : FieldDecl "private int cycleRetryTimes = 0;" compose:Replacement merge: SemanticConflict]
											[T -> retrySleepTime : FieldDecl "private int retrySleepTime = 1000;" compose:Replacement merge: SemanticConflict]
											[T -> timeOut : FieldDecl "private int timeOut = 5000;" compose:Replacement merge: SemanticConflict]
											[T -> DEFAULT_STATUS_CODE_SET : FieldDecl "private static final Set<Integer> DEFAULT_STATUS_CODE_SET = new HashSet<Integer>();" compose:Replacement merge: SemanticConflict]
											[T -> acceptStatCode : FieldDecl "private Set<Integer> acceptStatCode = DEFAULT_STATUS_CODE_SET;" compose:Replacement merge: SemanticConflict]
											[T -> headers : FieldDecl "private Map<String, String> headers = new HashMap<String, String>();" compose:Replacement merge: SemanticConflict]
											[T -> httpProxy : FieldDecl "private HttpHost httpProxy;" compose:Replacement merge: SemanticConflict]
											[T -> httpProxyPool : FieldDecl "private ProxyPool httpProxyPool;" compose:Replacement merge: SemanticConflict]
											[T -> useGzip : FieldDecl "private boolean useGzip = true;" compose:Replacement merge: SemanticConflict]
											[NT -> HeaderConst : InnerClassDecl]
												[T -> - : Modifiers "public static" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
												[T -> HeaderConst : Id "HeaderConst" compose:Replacement merge: Default]
												[T -> REFERER : FieldDecl "public static final String REFERER = "Referer";" compose:Replacement merge: SemanticConflict]
											[T -> auto2 : InitializerDecl "static {         DEFAULT_STATUS_CODE_SET.add(200);     }" compose:Replacement merge: Default]
											[T -> me({FormalParametersInternal}) : MethodDecl "public static Site me() {         return new Site();     }" compose:Replacement merge: LineBased]
											[T -> addCookie(String-String-String-String) : MethodDecl "public Site addCookie(String name, String value) {         defaultCookies.put(name, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> addCookie(String-String-String-String-String-String) : MethodDecl "public Site addCookie(String domain, String name, String value) {         cookies.put(domain, name, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> setUserAgent(String-String) : MethodDecl "public Site setUserAgent(String userAgent) {         this.userAgent = userAgent;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCookies({FormalParametersInternal}) : MethodDecl "public Map<String, String> getCookies() {         return defaultCookies;     }" compose:Replacement merge: LineBased]
											[T -> getAllCookies({FormalParametersInternal}) : MethodDecl "public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();     }" compose:Replacement merge: LineBased]
											[T -> getUserAgent({FormalParametersInternal}) : MethodDecl "public String getUserAgent() {         return userAgent;     }" compose:Replacement merge: LineBased]
											[T -> getDomain({FormalParametersInternal}) : MethodDecl "public String getDomain() {         return domain;     }" compose:Replacement merge: LineBased]
											[T -> setDomain(String-String) : MethodDecl "public Site setDomain(String domain) {         this.domain = domain;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setCharset(String-String) : MethodDecl "public Site setCharset(String charset) {         this.charset = charset;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCharset({FormalParametersInternal}) : MethodDecl "public String getCharset() {         return charset;     }" compose:Replacement merge: LineBased]
											[T -> getTimeOut({FormalParametersInternal}) : MethodDecl "public int getTimeOut() {         return timeOut;     }" compose:Replacement merge: LineBased]
											[T -> setTimeOut(int-int) : MethodDecl "public Site setTimeOut(int timeOut) {         this.timeOut = timeOut;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setAcceptStatCode(Set<Integer>-Set<Integer>) : MethodDecl "public Site setAcceptStatCode(Set<Integer> acceptStatCode) {         this.acceptStatCode = acceptStatCode;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getAcceptStatCode({FormalParametersInternal}) : MethodDecl "public Set<Integer> getAcceptStatCode() {         return acceptStatCode;     }" compose:Replacement merge: LineBased]
											[T -> getStartUrls({FormalParametersInternal}) : MethodDecl "@Deprecated     public List<String> getStartUrls() {         return UrlUtils.convertToUrls(startRequests);     }" compose:Replacement merge: LineBased]
											[T -> getStartRequests({FormalParametersInternal}) : MethodDecl "public List<Request> getStartRequests() {         return startRequests;     }" compose:Replacement merge: LineBased]
											[T -> addStartUrl(String-String) : MethodDecl "public Site addStartUrl(String startUrl) {         return addStartRequest(new Request(startUrl));     }" compose:Replacement merge: LineBased]
											[T -> addStartRequest(Request-Request) : MethodDecl "public Site addStartRequest(Request startRequest) {         this.startRequests.add(startRequest);         if (domain == null && startRequest.getUrl() != null) {             domain = UrlUtils.getDomain(startRequest.getUrl());         }         return this;     }" compose:Replacement merge: LineBased]
											[T -> setSleepTime(int-int) : MethodDecl "public Site setSleepTime(int sleepTime) {         this.sleepTime = sleepTime;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getSleepTime({FormalParametersInternal}) : MethodDecl "public int getSleepTime() {         return sleepTime;     }" compose:Replacement merge: LineBased]
											[T -> getRetryTimes({FormalParametersInternal}) : MethodDecl "public int getRetryTimes() {         return retryTimes;     }" compose:Replacement merge: LineBased]
											[T -> getHeaders({FormalParametersInternal}) : MethodDecl "public Map<String, String> getHeaders() {         return headers;     }" compose:Replacement merge: LineBased]
											[T -> addHeader(String-String-String-String) : MethodDecl "public Site addHeader(String key, String value) {         headers.put(key, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> setRetryTimes(int-int) : MethodDecl "public Site setRetryTimes(int retryTimes) {         this.retryTimes = retryTimes;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCycleRetryTimes({FormalParametersInternal}) : MethodDecl "public int getCycleRetryTimes() {         return cycleRetryTimes;     }" compose:Replacement merge: LineBased]
											[T -> setCycleRetryTimes(int-int) : MethodDecl "public Site setCycleRetryTimes(int cycleRetryTimes) {         this.cycleRetryTimes = cycleRetryTimes;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxy({FormalParametersInternal}) : MethodDecl "public HttpHost getHttpProxy() {         return httpProxy;     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxy(HttpHost-HttpHost) : MethodDecl "public Site setHttpProxy(HttpHost httpProxy) {         this.httpProxy = httpProxy;         return this;     }" compose:Replacement merge: LineBased]
											[T -> isUseGzip({FormalParametersInternal}) : MethodDecl "public boolean isUseGzip() {         return useGzip;     }" compose:Replacement merge: LineBased]
											[T -> getRetrySleepTime({FormalParametersInternal}) : MethodDecl "public int getRetrySleepTime() {         return retrySleepTime;     }" compose:Replacement merge: LineBased]
											[T -> setRetrySleepTime(int-int) : MethodDecl "public Site setRetrySleepTime(int retrySleepTime) {         this.retrySleepTime = retrySleepTime;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setUseGzip(boolean-boolean) : MethodDecl "public Site setUseGzip(boolean useGzip) {         this.useGzip = useGzip;         return this;     }" compose:Replacement merge: LineBased]
											[T -> toTask({FormalParametersInternal}) : MethodDecl "public Task toTask() {         return new Task() {             @Override             public String getUUID() {                 return Site.this.getDomain();             }              @Override             public Site getSite() {                 return Site.this;             }         };     }" compose:Replacement merge: LineBased]
											[T -> equals(Object-Object) : MethodDecl "@Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;          Site site = (Site) o;          if (cycleRetryTimes != site.cycleRetryTimes) return false;         if (retryTimes != site.retryTimes) return false;         if (sleepTime != site.sleepTime) return false;         if (timeOut != site.timeOut) return false;         if (acceptStatCode != null ? !acceptStatCode.equals(site.acceptStatCode) : site.acceptStatCode != null)             return false;         if (charset != null ? !charset.equals(site.charset) : site.charset != null) return false;         if (defaultCookies != null ? !defaultCookies.equals(site.defaultCookies) : site.defaultCookies != null)             return false;         if (domain != null ? !domain.equals(site.domain) : site.domain != null) return false;         if (headers != null ? !headers.equals(site.headers) : site.headers != null) return false;         if (startRequests != null ? !startRequests.equals(site.startRequests) : site.startRequests != null)             return false;         if (userAgent != null ? !userAgent.equals(site.userAgent) : site.userAgent != null) return false;          return true;     }" compose:Replacement merge: LineBased]
											[T -> hashCode({FormalParametersInternal}) : MethodDecl "@Override     public int hashCode() {         int result = domain != null ? domain.hashCode() : 0;         result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);         result = 31 * result + (defaultCookies != null ? defaultCookies.hashCode() : 0);         result = 31 * result + (charset != null ? charset.hashCode() : 0);         result = 31 * result + (startRequests != null ? startRequests.hashCode() : 0);         result = 31 * result + sleepTime;         result = 31 * result + retryTimes;         result = 31 * result + cycleRetryTimes;         result = 31 * result + timeOut;         result = 31 * result + (acceptStatCode != null ? acceptStatCode.hashCode() : 0);         result = 31 * result + (headers != null ? headers.hashCode() : 0);         return result;     }" compose:Replacement merge: LineBased]
											[T -> toString({FormalParametersInternal}) : MethodDecl "@Override     public String toString() {         return "Site{" +                 "domain='" + domain + '\'' +                 ", userAgent='" + userAgent + '\'' +                 ", cookies=" + defaultCookies +                 ", charset='" + charset + '\'' +                 ", startRequests=" + startRequests +                 ", sleepTime=" + sleepTime +                 ", retryTimes=" + retryTimes +                 ", cycleRetryTimes=" + cycleRetryTimes +                 ", timeOut=" + timeOut +                 ", acceptStatCode=" + acceptStatCode +                 ", headers=" + headers +                 '}';     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxyPool(List<String[]>-List<String[]>) : MethodDecl "public Site setHttpProxyPool(List<String[]> httpProxyList) {         this.httpProxyPool=new ProxyPool(httpProxyList);         return this;     }" compose:Replacement merge: LineBased]
											[T -> enableHttpProxyPool({FormalParametersInternal}) : MethodDecl "public Site enableHttpProxyPool() {         this.httpProxyPool=new ProxyPool();         return this;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxyPool({FormalParametersInternal}) : MethodDecl "public ProxyPool getHttpProxyPool() {         return httpProxyPool;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxyFromPool({FormalParametersInternal}) : MethodDecl "public HttpHost getHttpProxyFromPool() {         return httpProxyPool.getProxy();     }" compose:Replacement merge: LineBased]
											[T -> returnHttpProxyToPool(HttpHost-HttpHost-int-int) : MethodDecl "public void returnHttpProxyToPool(HttpHost proxy,int statusCode) {         httpProxyPool.returnProxy(proxy,statusCode);     }" compose:Replacement merge: LineBased]
											[T -> setProxyReuseInterval(int-int) : MethodDecl "public Site setProxyReuseInterval(int reuseInterval) {         this.httpProxyPool.setReuseInterval(reuseInterval);         return this;     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> webmagic-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> us : Folder]
						[NT -> codecraft : Folder]
							[NT -> webmagic : Folder]
								[NT -> Site.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package us.codecraft.webmagic;" compose:Replacement merge: Default]
										[T -> com.google.common.collect.HashBasedTable{ImportPackage} : ImportDeclaration "import com.google.common.collect.HashBasedTable;" compose:Replacement merge: Default]
										[T -> com.google.common.collect.Table{ImportPackage} : ImportDeclaration "import com.google.common.collect.Table;" compose:Replacement merge: Default]
										[T -> org.apache.http.HttpHost{ImportPackage} : ImportDeclaration "import org.apache.http.HttpHost;" compose:Replacement merge: Default]
										[T -> org.apache.http.auth.UsernamePasswordCredentials{ImportPackage} : ImportDeclaration "import org.apache.http.auth.UsernamePasswordCredentials;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.proxy.ProxyPool{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.proxy.ProxyPool;" compose:Replacement merge: Default]
										[T -> us.codecraft.webmagic.utils.UrlUtils{ImportPackage} : ImportDeclaration "import us.codecraft.webmagic.utils.UrlUtils;" compose:Replacement merge: Default]
										[T -> java.util.* : ImportDeclaration "import java.util.*;" compose:Replacement merge: Default]
										[NT -> Site : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> Site : Id "Site" compose:Replacement merge: Default]
											[T -> domain : FieldDecl "private String domain;" compose:Replacement merge: SemanticConflict]
											[T -> userAgent : FieldDecl "private String userAgent;" compose:Replacement merge: SemanticConflict]
											[T -> defaultCookies : FieldDecl "private Map<String, String> defaultCookies = new LinkedHashMap<String, String>();" compose:Replacement merge: SemanticConflict]
											[T -> cookies : FieldDecl "private Table<String, String, String> cookies = HashBasedTable.create();" compose:Replacement merge: SemanticConflict]
											[T -> charset : FieldDecl "private String charset;" compose:Replacement merge: SemanticConflict]
											[T -> startRequests : FieldDecl "private List<Request> startRequests = new ArrayList<Request>();" compose:Replacement merge: SemanticConflict]
											[T -> sleepTime : FieldDecl "private int sleepTime = 5000;" compose:Replacement merge: SemanticConflict]
											[T -> retryTimes : FieldDecl "private int retryTimes = 0;" compose:Replacement merge: SemanticConflict]
											[T -> cycleRetryTimes : FieldDecl "private int cycleRetryTimes = 0;" compose:Replacement merge: SemanticConflict]
											[T -> retrySleepTime : FieldDecl "private int retrySleepTime = 1000;" compose:Replacement merge: SemanticConflict]
											[T -> timeOut : FieldDecl "private int timeOut = 5000;" compose:Replacement merge: SemanticConflict]
											[T -> DEFAULT_STATUS_CODE_SET : FieldDecl "private static final Set<Integer> DEFAULT_STATUS_CODE_SET = new HashSet<Integer>();" compose:Replacement merge: SemanticConflict]
											[T -> acceptStatCode : FieldDecl "private Set<Integer> acceptStatCode = DEFAULT_STATUS_CODE_SET;" compose:Replacement merge: SemanticConflict]
											[T -> headers : FieldDecl "private Map<String, String> headers = new HashMap<String, String>();" compose:Replacement merge: SemanticConflict]
											[T -> httpProxy : FieldDecl "private HttpHost httpProxy;" compose:Replacement merge: SemanticConflict]
											[T -> usernamePasswordCredentials : FieldDecl "private UsernamePasswordCredentials usernamePasswordCredentials;" compose:Replacement merge: SemanticConflict]
											[T -> httpProxyPool : FieldDecl "private ProxyPool httpProxyPool;" compose:Replacement merge: SemanticConflict]
											[T -> useGzip : FieldDecl "private boolean useGzip = true;" compose:Replacement merge: SemanticConflict]
											[NT -> HeaderConst : InnerClassDecl]
												[T -> - : Modifiers "public static" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
												[T -> HeaderConst : Id "HeaderConst" compose:Replacement merge: Default]
												[T -> REFERER : FieldDecl "public static final String REFERER = "Referer";" compose:Replacement merge: SemanticConflict]
											[T -> auto3 : InitializerDecl "static {         DEFAULT_STATUS_CODE_SET.add(200);     }" compose:Replacement merge: Default]
											[T -> me({FormalParametersInternal}) : MethodDecl "public static Site me() {         return new Site();     }" compose:Replacement merge: LineBased]
											[T -> addCookie(String-String-String-String) : MethodDecl "public Site addCookie(String name, String value) {         defaultCookies.put(name, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> addCookie(String-String-String-String-String-String) : MethodDecl "public Site addCookie(String domain, String name, String value) {         cookies.put(domain, name, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> setUserAgent(String-String) : MethodDecl "public Site setUserAgent(String userAgent) {         this.userAgent = userAgent;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCookies({FormalParametersInternal}) : MethodDecl "public Map<String, String> getCookies() {         return defaultCookies;     }" compose:Replacement merge: LineBased]
											[T -> getAllCookies({FormalParametersInternal}) : MethodDecl "public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();     }" compose:Replacement merge: LineBased]
											[T -> getUserAgent({FormalParametersInternal}) : MethodDecl "public String getUserAgent() {         return userAgent;     }" compose:Replacement merge: LineBased]
											[T -> getDomain({FormalParametersInternal}) : MethodDecl "public String getDomain() {         return domain;     }" compose:Replacement merge: LineBased]
											[T -> setDomain(String-String) : MethodDecl "public Site setDomain(String domain) {         this.domain = domain;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setCharset(String-String) : MethodDecl "public Site setCharset(String charset) {         this.charset = charset;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCharset({FormalParametersInternal}) : MethodDecl "public String getCharset() {         return charset;     }" compose:Replacement merge: LineBased]
											[T -> getTimeOut({FormalParametersInternal}) : MethodDecl "public int getTimeOut() {         return timeOut;     }" compose:Replacement merge: LineBased]
											[T -> setTimeOut(int-int) : MethodDecl "public Site setTimeOut(int timeOut) {         this.timeOut = timeOut;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setAcceptStatCode(Set<Integer>-Set<Integer>) : MethodDecl "public Site setAcceptStatCode(Set<Integer> acceptStatCode) {         this.acceptStatCode = acceptStatCode;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getAcceptStatCode({FormalParametersInternal}) : MethodDecl "public Set<Integer> getAcceptStatCode() {         return acceptStatCode;     }" compose:Replacement merge: LineBased]
											[T -> getStartUrls({FormalParametersInternal}) : MethodDecl "@Deprecated     public List<String> getStartUrls() {         return UrlUtils.convertToUrls(startRequests);     }" compose:Replacement merge: LineBased]
											[T -> getStartRequests({FormalParametersInternal}) : MethodDecl "public List<Request> getStartRequests() {         return startRequests;     }" compose:Replacement merge: LineBased]
											[T -> addStartUrl(String-String) : MethodDecl "public Site addStartUrl(String startUrl) {         return addStartRequest(new Request(startUrl));     }" compose:Replacement merge: LineBased]
											[T -> addStartRequest(Request-Request) : MethodDecl "public Site addStartRequest(Request startRequest) {         this.startRequests.add(startRequest);         if (domain == null && startRequest.getUrl() != null) {             domain = UrlUtils.getDomain(startRequest.getUrl());         }         return this;     }" compose:Replacement merge: LineBased]
											[T -> setSleepTime(int-int) : MethodDecl "public Site setSleepTime(int sleepTime) {         this.sleepTime = sleepTime;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getSleepTime({FormalParametersInternal}) : MethodDecl "public int getSleepTime() {         return sleepTime;     }" compose:Replacement merge: LineBased]
											[T -> getRetryTimes({FormalParametersInternal}) : MethodDecl "public int getRetryTimes() {         return retryTimes;     }" compose:Replacement merge: LineBased]
											[T -> getHeaders({FormalParametersInternal}) : MethodDecl "public Map<String, String> getHeaders() {         return headers;     }" compose:Replacement merge: LineBased]
											[T -> addHeader(String-String-String-String) : MethodDecl "public Site addHeader(String key, String value) {         headers.put(key, value);         return this;     }" compose:Replacement merge: LineBased]
											[T -> setRetryTimes(int-int) : MethodDecl "public Site setRetryTimes(int retryTimes) {         this.retryTimes = retryTimes;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getCycleRetryTimes({FormalParametersInternal}) : MethodDecl "public int getCycleRetryTimes() {         return cycleRetryTimes;     }" compose:Replacement merge: LineBased]
											[T -> setCycleRetryTimes(int-int) : MethodDecl "public Site setCycleRetryTimes(int cycleRetryTimes) {         this.cycleRetryTimes = cycleRetryTimes;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxy({FormalParametersInternal}) : MethodDecl "public HttpHost getHttpProxy() {         return httpProxy;     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxy(HttpHost-HttpHost) : MethodDecl "public Site setHttpProxy(HttpHost httpProxy) {         this.httpProxy = httpProxy;         return this;     }" compose:Replacement merge: LineBased]
											[T -> isUseGzip({FormalParametersInternal}) : MethodDecl "public boolean isUseGzip() {         return useGzip;     }" compose:Replacement merge: LineBased]
											[T -> getRetrySleepTime({FormalParametersInternal}) : MethodDecl "public int getRetrySleepTime() {         return retrySleepTime;     }" compose:Replacement merge: LineBased]
											[T -> setRetrySleepTime(int-int) : MethodDecl "public Site setRetrySleepTime(int retrySleepTime) {         this.retrySleepTime = retrySleepTime;         return this;     }" compose:Replacement merge: LineBased]
											[T -> setUseGzip(boolean-boolean) : MethodDecl "public Site setUseGzip(boolean useGzip) {         this.useGzip = useGzip;         return this;     }" compose:Replacement merge: LineBased]
											[T -> toTask({FormalParametersInternal}) : MethodDecl "public Task toTask() {         return new Task() {             @Override             public String getUUID() {                 return Site.this.getDomain();             }              @Override             public Site getSite() {                 return Site.this;             }         };     }" compose:Replacement merge: LineBased]
											[T -> equals(Object-Object) : MethodDecl "@Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;          Site site = (Site) o;          if (cycleRetryTimes != site.cycleRetryTimes) return false;         if (retryTimes != site.retryTimes) return false;         if (sleepTime != site.sleepTime) return false;         if (timeOut != site.timeOut) return false;         if (acceptStatCode != null ? !acceptStatCode.equals(site.acceptStatCode) : site.acceptStatCode != null)             return false;         if (charset != null ? !charset.equals(site.charset) : site.charset != null) return false;         if (defaultCookies != null ? !defaultCookies.equals(site.defaultCookies) : site.defaultCookies != null)             return false;         if (domain != null ? !domain.equals(site.domain) : site.domain != null) return false;         if (headers != null ? !headers.equals(site.headers) : site.headers != null) return false;         if (startRequests != null ? !startRequests.equals(site.startRequests) : site.startRequests != null)             return false;         if (userAgent != null ? !userAgent.equals(site.userAgent) : site.userAgent != null) return false;          return true;     }" compose:Replacement merge: LineBased]
											[T -> hashCode({FormalParametersInternal}) : MethodDecl "@Override     public int hashCode() {         int result = domain != null ? domain.hashCode() : 0;         result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);         result = 31 * result + (defaultCookies != null ? defaultCookies.hashCode() : 0);         result = 31 * result + (charset != null ? charset.hashCode() : 0);         result = 31 * result + (startRequests != null ? startRequests.hashCode() : 0);         result = 31 * result + sleepTime;         result = 31 * result + retryTimes;         result = 31 * result + cycleRetryTimes;         result = 31 * result + timeOut;         result = 31 * result + (acceptStatCode != null ? acceptStatCode.hashCode() : 0);         result = 31 * result + (headers != null ? headers.hashCode() : 0);         return result;     }" compose:Replacement merge: LineBased]
											[T -> toString({FormalParametersInternal}) : MethodDecl "@Override     public String toString() {         return "Site{" +                 "domain='" + domain + '\'' +                 ", userAgent='" + userAgent + '\'' +                 ", cookies=" + defaultCookies +                 ", charset='" + charset + '\'' +                 ", startRequests=" + startRequests +                 ", sleepTime=" + sleepTime +                 ", retryTimes=" + retryTimes +                 ", cycleRetryTimes=" + cycleRetryTimes +                 ", timeOut=" + timeOut +                 ", acceptStatCode=" + acceptStatCode +                 ", headers=" + headers +                 '}';     }" compose:Replacement merge: LineBased]
											[T -> setHttpProxyPool(List<String[]>-List<String[]>) : MethodDecl "public Site setHttpProxyPool(List<String[]> httpProxyList) {         this.httpProxyPool=new ProxyPool(httpProxyList);         return this;     }" compose:Replacement merge: LineBased]
											[T -> enableHttpProxyPool({FormalParametersInternal}) : MethodDecl "public Site enableHttpProxyPool() {         this.httpProxyPool=new ProxyPool();         return this;     }" compose:Replacement merge: LineBased]
											[T -> getUsernamePasswordCredentials({FormalParametersInternal}) : MethodDecl "public UsernamePasswordCredentials getUsernamePasswordCredentials() {         return usernamePasswordCredentials;     }" compose:Replacement merge: LineBased]
											[T -> setUsernamePasswordCredentials(UsernamePasswordCredentials-UsernamePasswordCredentials) : MethodDecl "public Site setUsernamePasswordCredentials(UsernamePasswordCredentials usernamePasswordCredentials) {         this.usernamePasswordCredentials = usernamePasswordCredentials;         return this;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxyPool({FormalParametersInternal}) : MethodDecl "public ProxyPool getHttpProxyPool() {         return httpProxyPool;     }" compose:Replacement merge: LineBased]
											[T -> getHttpProxyFromPool({FormalParametersInternal}) : MethodDecl "public HttpHost getHttpProxyFromPool() {         return httpProxyPool.getProxy();     }" compose:Replacement merge: LineBased]
											[T -> returnHttpProxyToPool(HttpHost-HttpHost-int-int) : MethodDecl "public void returnHttpProxyToPool(HttpHost proxy,int statusCode) {         httpProxyPool.returnProxy(proxy,statusCode);     }" compose:Replacement merge: LineBased]
											[T -> setProxyReuseInterval(int-int) : MethodDecl "public Site setProxyReuseInterval(int reuseInterval) {         this.httpProxyPool.setReuseInterval(reuseInterval);         return this;     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> webmagic-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> us : Folder]
						[NT -> codecraft : Folder]
							[NT -> webmagic : Folder]
								[NT -> Site.java.merge : .java.merge-File]
									[T -> Site.java : .java-Content "package us.codecraft.webmagic;  import com.google.common.collect.HashBasedTable; import com.google.common.collect.Table; import org.apache.http.HttpHost;  import us.codecraft.webmagic.proxy.Proxy; import us.codecraft.webmagic.proxy.SimpleProxyPool; import us.codecraft.webmagic.proxy.ProxyPool; import us.codecraft.webmagic.utils.UrlUtils;  import java.util.*;  /**  * Object contains setting for crawler.<br>  *  * @author code4crafter@gmail.com <br>  * @see us.codecraft.webmagic.processor.PageProcessor  * @since 0.1.0  */ public class Site {      private String domain;      private String userAgent;      private Map<String, String> defaultCookies = new LinkedHashMap<String, String>();      private Table<String, String, String> cookies = HashBasedTable.create();      private String charset;      /**      * startUrls is the urls the crawler to start with.      */     private List<Request> startRequests = new ArrayList<Request>();      private int sleepTime = 5000;      private int retryTimes = 0;      private int cycleRetryTimes = 0;      private int retrySleepTime = 1000;      private int timeOut = 5000;      private static final Set<Integer> DEFAULT_STATUS_CODE_SET = new HashSet<Integer>();      private Set<Integer> acceptStatCode = DEFAULT_STATUS_CODE_SET;      private Map<String, String> headers = new HashMap<String, String>();      private HttpHost httpProxy;      private ProxyPool httpProxyPool;      private boolean useGzip = true;      /**      * @see us.codecraft.webmagic.utils.HttpConstant.Header      * @deprecated      */     public static interface HeaderConst {          public static final String REFERER = "Referer";     }       static {         DEFAULT_STATUS_CODE_SET.add(200);     }      /**      * new a Site      *      * @return new site      */     public static Site me() {         return new Site();     }      /**      * Add a cookie with domain {@link #getDomain()}      *      * @param name name      * @param value value      * @return this      */     public Site addCookie(String name, String value) {         defaultCookies.put(name, value);         return this;     }      /**      * Add a cookie with specific domain.      *      * @param domain domain      * @param name name      * @param value value      * @return this      */     public Site addCookie(String domain, String name, String value) {         cookies.put(domain, name, value);         return this;     }      /**      * set user agent      *      * @param userAgent userAgent      * @return this      */     public Site setUserAgent(String userAgent) {         this.userAgent = userAgent;         return this;     }      /**      * get cookies      *      * @return get cookies      */     public Map<String, String> getCookies() {         return defaultCookies;     }      /**      * get cookies of all domains      *      * @return get cookies      */     public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();     }      /**      * get user agent      *      * @return user agent      */     public String getUserAgent() {         return userAgent;     }      /**      * get domain      *      * @return get domain      */     public String getDomain() {         return domain;     }      /**      * set the domain of site.      *      * @param domain domain      * @return this      */     public Site setDomain(String domain) {         this.domain = domain;         return this;     }      /**      * Set charset of page manually.<br>      * When charset is not set or set to null, it can be auto detected by Http header.      *      * @param charset charset      * @return this      */     public Site setCharset(String charset) {         this.charset = charset;         return this;     }      /**      * get charset set manually      *      * @return charset      */     public String getCharset() {         return charset;     }      public int getTimeOut() {         return timeOut;     }      /**      * set timeout for downloader in ms      *      * @param timeOut timeOut      * @return this      */     public Site setTimeOut(int timeOut) {         this.timeOut = timeOut;         return this;     }      /**      * Set acceptStatCode.<br>      * When status code of http response is in acceptStatCodes, it will be processed.<br>      * {200} by default.<br>      * It is not necessarily to be set.<br>      *      * @param acceptStatCode acceptStatCode      * @return this      */     public Site setAcceptStatCode(Set<Integer> acceptStatCode) {         this.acceptStatCode = acceptStatCode;         return this;     }      /**      * get acceptStatCode      *      * @return acceptStatCode      */     public Set<Integer> getAcceptStatCode() {         return acceptStatCode;     }      /**      * get start urls      *      * @return start urls      * @see #getStartRequests      * @deprecated      */     @Deprecated     public List<String> getStartUrls() {         return UrlUtils.convertToUrls(startRequests);     }      public List<Request> getStartRequests() {         return startRequests;     }      /**      * Add a url to start url.<br>      * Because urls are more a Spider's property than Site, move it to {@link Spider#addUrl(String...)}}      *      * @param startUrl startUrl      * @return this      * @see Spider#addUrl(String...)      * @deprecated      */     public Site addStartUrl(String startUrl) {         return addStartRequest(new Request(startUrl));     }      /**      * Add a url to start url.<br>      * Because urls are more a Spider's property than Site, move it to {@link Spider#addRequest(Request...)}}      *      * @param startRequest startRequest      * @return this      * @see Spider#addRequest(Request...)      * @deprecated      */     public Site addStartRequest(Request startRequest) {         this.startRequests.add(startRequest);         if (domain == null && startRequest.getUrl() != null) {             domain = UrlUtils.getDomain(startRequest.getUrl());         }         return this;     }      /**      * Set the interval between the processing of two pages.<br>      * Time unit is micro seconds.<br>      *      * @param sleepTime sleepTime      * @return this      */     public Site setSleepTime(int sleepTime) {         this.sleepTime = sleepTime;         return this;     }      /**      * Get the interval between the processing of two pages.<br>      * Time unit is micro seconds.<br>      *      * @return the interval between the processing of two pages,      */     public int getSleepTime() {         return sleepTime;     }      /**      * Get retry times immediately when download fail, 0 by default.<br>      *      * @return retry times when download fail      */     public int getRetryTimes() {         return retryTimes;     }      public Map<String, String> getHeaders() {         return headers;     }      /**      * Put an Http header for downloader. <br>      * Use {@link #addCookie(String, String)} for cookie and {@link #setUserAgent(String)} for user-agent. <br>      *      * @param key   key of http header, there are some keys constant in {@link HeaderConst}      * @param value value of header      * @return this      */     public Site addHeader(String key, String value) {         headers.put(key, value);         return this;     }      /**      * Set retry times when download fail, 0 by default.<br>      *      * @param retryTimes retryTimes      * @return this      */     public Site setRetryTimes(int retryTimes) {         this.retryTimes = retryTimes;         return this;     }      /**      * When cycleRetryTimes is more than 0, it will add back to scheduler and try download again. <br>      *      * @return retry times when download fail      */     public int getCycleRetryTimes() {         return cycleRetryTimes;     }      /**      * Set cycleRetryTimes times when download fail, 0 by default. <br>      *      * @param cycleRetryTimes cycleRetryTimes      * @return this      */     public Site setCycleRetryTimes(int cycleRetryTimes) {         this.cycleRetryTimes = cycleRetryTimes;         return this;     }      public HttpHost getHttpProxy() {         return httpProxy;     }      /**      * set up httpProxy for this site      *      * @param httpProxy httpProxy      * @return this      */     public Site setHttpProxy(HttpHost httpProxy) {         this.httpProxy = httpProxy;         return this;     }      public boolean isUseGzip() {         return useGzip;     }      public int getRetrySleepTime() {         return retrySleepTime;     }      /**      * Set retry sleep times when download fail, 1000 by default. <br>      *      * @param retrySleepTime retrySleepTime      * @return this      */     public Site setRetrySleepTime(int retrySleepTime) {         this.retrySleepTime = retrySleepTime;         return this;     }      /**      * Whether use gzip. <br>      * Default is true, you can set it to false to disable gzip.      *      * @param useGzip useGzip      * @return this      */     public Site setUseGzip(boolean useGzip) {         this.useGzip = useGzip;         return this;     }      public Task toTask() {         return new Task() {             @Override             public String getUUID() {                 return Site.this.getDomain();             }              @Override             public Site getSite() {                 return Site.this;             }         };     }      @Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;          Site site = (Site) o;          if (cycleRetryTimes != site.cycleRetryTimes) return false;         if (retryTimes != site.retryTimes) return false;         if (sleepTime != site.sleepTime) return false;         if (timeOut != site.timeOut) return false;         if (acceptStatCode != null ? !acceptStatCode.equals(site.acceptStatCode) : site.acceptStatCode != null)             return false;         if (charset != null ? !charset.equals(site.charset) : site.charset != null) return false;         if (defaultCookies != null ? !defaultCookies.equals(site.defaultCookies) : site.defaultCookies != null)             return false;         if (domain != null ? !domain.equals(site.domain) : site.domain != null) return false;         if (headers != null ? !headers.equals(site.headers) : site.headers != null) return false;         if (startRequests != null ? !startRequests.equals(site.startRequests) : site.startRequests != null)             return false;         if (userAgent != null ? !userAgent.equals(site.userAgent) : site.userAgent != null) return false;          return true;     }      @Override     public int hashCode() {         int result = domain != null ? domain.hashCode() : 0;         result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);         result = 31 * result + (defaultCookies != null ? defaultCookies.hashCode() : 0);         result = 31 * result + (charset != null ? charset.hashCode() : 0);         result = 31 * result + (startRequests != null ? startRequests.hashCode() : 0);         result = 31 * result + sleepTime;         result = 31 * result + retryTimes;         result = 31 * result + cycleRetryTimes;         result = 31 * result + timeOut;         result = 31 * result + (acceptStatCode != null ? acceptStatCode.hashCode() : 0);         result = 31 * result + (headers != null ? headers.hashCode() : 0);         return result;     }      @Override     public String toString() {         return "Site{" +                 "domain='" + domain + '\'' +                 ", userAgent='" + userAgent + '\'' +                 ", cookies=" + defaultCookies +                 ", charset='" + charset + '\'' +                 ", startRequests=" + startRequests +                 ", sleepTime=" + sleepTime +                 ", retryTimes=" + retryTimes +                 ", cycleRetryTimes=" + cycleRetryTimes +                 ", timeOut=" + timeOut +                 ", acceptStatCode=" + acceptStatCode +                 ", headers=" + headers +                 '}';     }      /**      * Set httpProxyPool, String[0]:ip, String[1]:port <br>      *      * @param httpProxyList httpProxyList      * @return this      */     public Site setHttpProxyPool(ProxyPool proxyPool) {         this.httpProxyPool = proxyPool;         return this;     }      public Site setHttpProxyPool(List<String[]> httpProxyList, boolean isUseLastProxy) {         this.httpProxyPool=new SimpleProxyPool(httpProxyList, isUseLastProxy);         return this;     }      public Site enableHttpProxyPool() {         this.httpProxyPool=new SimpleProxyPool();         return this;     }      public ProxyPool getHttpProxyPool() {         return httpProxyPool;     }      public Proxy getHttpProxyFromPool() {         return httpProxyPool.getProxy();     }      public void returnHttpProxyToPool(HttpHost proxy,int statusCode) {         httpProxyPool.returnProxy(proxy,statusCode);     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> webmagic-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> us : Folder]
						[NT -> codecraft : Folder]
							[NT -> webmagic : Folder]
								[NT -> Site.java.merge : .java.merge-File]
									[T -> Site.java : .java-Content "package us.codecraft.webmagic;  import com.google.common.collect.HashBasedTable; import com.google.common.collect.Table; import org.apache.http.HttpHost;  import us.codecraft.webmagic.proxy.ProxyPool; import us.codecraft.webmagic.utils.UrlUtils;  import java.util.*;  /**  * Object contains setting for crawler.<br>  *  * @author code4crafter@gmail.com <br>  * @see us.codecraft.webmagic.processor.PageProcessor  * @since 0.1.0  */ public class Site {      private String domain;      private String userAgent;      private Map<String, String> defaultCookies = new LinkedHashMap<String, String>();      private Table<String, String, String> cookies = HashBasedTable.create();      private String charset;      /**      * startUrls is the urls the crawler to start with.      */     private List<Request> startRequests = new ArrayList<Request>();      private int sleepTime = 5000;      private int retryTimes = 0;      private int cycleRetryTimes = 0;      private int retrySleepTime = 1000;      private int timeOut = 5000;      private static final Set<Integer> DEFAULT_STATUS_CODE_SET = new HashSet<Integer>();      private Set<Integer> acceptStatCode = DEFAULT_STATUS_CODE_SET;      private Map<String, String> headers = new HashMap<String, String>();      private HttpHost httpProxy;      private ProxyPool httpProxyPool;      private boolean useGzip = true;      /**      * @see us.codecraft.webmagic.utils.HttpConstant.Header      * @deprecated      */     public static interface HeaderConst {          public static final String REFERER = "Referer";     }       static {         DEFAULT_STATUS_CODE_SET.add(200);     }      /**      * new a Site      *      * @return new site      */     public static Site me() {         return new Site();     }      /**      * Add a cookie with domain {@link #getDomain()}      *      * @param name name      * @param value value      * @return this      */     public Site addCookie(String name, String value) {         defaultCookies.put(name, value);         return this;     }      /**      * Add a cookie with specific domain.      *      * @param domain domain      * @param name name      * @param value value      * @return this      */     public Site addCookie(String domain, String name, String value) {         cookies.put(domain, name, value);         return this;     }      /**      * set user agent      *      * @param userAgent userAgent      * @return this      */     public Site setUserAgent(String userAgent) {         this.userAgent = userAgent;         return this;     }      /**      * get cookies      *      * @return get cookies      */     public Map<String, String> getCookies() {         return defaultCookies;     }      /**      * get cookies of all domains      *      * @return get cookies      */     public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();     }      /**      * get user agent      *      * @return user agent      */     public String getUserAgent() {         return userAgent;     }      /**      * get domain      *      * @return get domain      */     public String getDomain() {         return domain;     }      /**      * set the domain of site.      *      * @param domain domain      * @return this      */     public Site setDomain(String domain) {         this.domain = domain;         return this;     }      /**      * Set charset of page manually.<br>      * When charset is not set or set to null, it can be auto detected by Http header.      *      * @param charset charset      * @return this      */     public Site setCharset(String charset) {         this.charset = charset;         return this;     }      /**      * get charset set manually      *      * @return charset      */     public String getCharset() {         return charset;     }      public int getTimeOut() {         return timeOut;     }      /**      * set timeout for downloader in ms      *      * @param timeOut timeOut      * @return this      */     public Site setTimeOut(int timeOut) {         this.timeOut = timeOut;         return this;     }      /**      * Set acceptStatCode.<br>      * When status code of http response is in acceptStatCodes, it will be processed.<br>      * {200} by default.<br>      * It is not necessarily to be set.<br>      *      * @param acceptStatCode acceptStatCode      * @return this      */     public Site setAcceptStatCode(Set<Integer> acceptStatCode) {         this.acceptStatCode = acceptStatCode;         return this;     }      /**      * get acceptStatCode      *      * @return acceptStatCode      */     public Set<Integer> getAcceptStatCode() {         return acceptStatCode;     }      /**      * get start urls      *      * @return start urls      * @see #getStartRequests      * @deprecated      */     @Deprecated     public List<String> getStartUrls() {         return UrlUtils.convertToUrls(startRequests);     }      public List<Request> getStartRequests() {         return startRequests;     }      /**      * Add a url to start url.<br>      * Because urls are more a Spider's property than Site, move it to {@link Spider#addUrl(String...)}}      *      * @param startUrl startUrl      * @return this      * @see Spider#addUrl(String...)      * @deprecated      */     public Site addStartUrl(String startUrl) {         return addStartRequest(new Request(startUrl));     }      /**      * Add a url to start url.<br>      * Because urls are more a Spider's property than Site, move it to {@link Spider#addRequest(Request...)}}      *      * @param startRequest startRequest      * @return this      * @see Spider#addRequest(Request...)      * @deprecated      */     public Site addStartRequest(Request startRequest) {         this.startRequests.add(startRequest);         if (domain == null && startRequest.getUrl() != null) {             domain = UrlUtils.getDomain(startRequest.getUrl());         }         return this;     }      /**      * Set the interval between the processing of two pages.<br>      * Time unit is micro seconds.<br>      *      * @param sleepTime sleepTime      * @return this      */     public Site setSleepTime(int sleepTime) {         this.sleepTime = sleepTime;         return this;     }      /**      * Get the interval between the processing of two pages.<br>      * Time unit is micro seconds.<br>      *      * @return the interval between the processing of two pages,      */     public int getSleepTime() {         return sleepTime;     }      /**      * Get retry times immediately when download fail, 0 by default.<br>      *      * @return retry times when download fail      */     public int getRetryTimes() {         return retryTimes;     }      public Map<String, String> getHeaders() {         return headers;     }      /**      * Put an Http header for downloader. <br>      * Use {@link #addCookie(String, String)} for cookie and {@link #setUserAgent(String)} for user-agent. <br>      *      * @param key   key of http header, there are some keys constant in {@link HeaderConst}      * @param value value of header      * @return this      */     public Site addHeader(String key, String value) {         headers.put(key, value);         return this;     }      /**      * Set retry times when download fail, 0 by default.<br>      *      * @param retryTimes retryTimes      * @return this      */     public Site setRetryTimes(int retryTimes) {         this.retryTimes = retryTimes;         return this;     }      /**      * When cycleRetryTimes is more than 0, it will add back to scheduler and try download again. <br>      *      * @return retry times when download fail      */     public int getCycleRetryTimes() {         return cycleRetryTimes;     }      /**      * Set cycleRetryTimes times when download fail, 0 by default. <br>      *      * @param cycleRetryTimes cycleRetryTimes      * @return this      */     public Site setCycleRetryTimes(int cycleRetryTimes) {         this.cycleRetryTimes = cycleRetryTimes;         return this;     }      public HttpHost getHttpProxy() {         return httpProxy;     }      /**      * set up httpProxy for this site      *      * @param httpProxy httpProxy      * @return this      */     public Site setHttpProxy(HttpHost httpProxy) {         this.httpProxy = httpProxy;         return this;     }      public boolean isUseGzip() {         return useGzip;     }      public int getRetrySleepTime() {         return retrySleepTime;     }      /**      * Set retry sleep times when download fail, 1000 by default. <br>      *      * @param retrySleepTime retrySleepTime      * @return this      */     public Site setRetrySleepTime(int retrySleepTime) {         this.retrySleepTime = retrySleepTime;         return this;     }      /**      * Whether use gzip. <br>      * Default is true, you can set it to false to disable gzip.      *      * @param useGzip useGzip      * @return this      */     public Site setUseGzip(boolean useGzip) {         this.useGzip = useGzip;         return this;     }      public Task toTask() {         return new Task() {             @Override             public String getUUID() {                 return Site.this.getDomain();             }              @Override             public Site getSite() {                 return Site.this;             }         };     }      @Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;          Site site = (Site) o;          if (cycleRetryTimes != site.cycleRetryTimes) return false;         if (retryTimes != site.retryTimes) return false;         if (sleepTime != site.sleepTime) return false;         if (timeOut != site.timeOut) return false;         if (acceptStatCode != null ? !acceptStatCode.equals(site.acceptStatCode) : site.acceptStatCode != null)             return false;         if (charset != null ? !charset.equals(site.charset) : site.charset != null) return false;         if (defaultCookies != null ? !defaultCookies.equals(site.defaultCookies) : site.defaultCookies != null)             return false;         if (domain != null ? !domain.equals(site.domain) : site.domain != null) return false;         if (headers != null ? !headers.equals(site.headers) : site.headers != null) return false;         if (startRequests != null ? !startRequests.equals(site.startRequests) : site.startRequests != null)             return false;         if (userAgent != null ? !userAgent.equals(site.userAgent) : site.userAgent != null) return false;          return true;     }      @Override     public int hashCode() {         int result = domain != null ? domain.hashCode() : 0;         result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);         result = 31 * result + (defaultCookies != null ? defaultCookies.hashCode() : 0);         result = 31 * result + (charset != null ? charset.hashCode() : 0);         result = 31 * result + (startRequests != null ? startRequests.hashCode() : 0);         result = 31 * result + sleepTime;         result = 31 * result + retryTimes;         result = 31 * result + cycleRetryTimes;         result = 31 * result + timeOut;         result = 31 * result + (acceptStatCode != null ? acceptStatCode.hashCode() : 0);         result = 31 * result + (headers != null ? headers.hashCode() : 0);         return result;     }      @Override     public String toString() {         return "Site{" +                 "domain='" + domain + '\'' +                 ", userAgent='" + userAgent + '\'' +                 ", cookies=" + defaultCookies +                 ", charset='" + charset + '\'' +                 ", startRequests=" + startRequests +                 ", sleepTime=" + sleepTime +                 ", retryTimes=" + retryTimes +                 ", cycleRetryTimes=" + cycleRetryTimes +                 ", timeOut=" + timeOut +                 ", acceptStatCode=" + acceptStatCode +                 ", headers=" + headers +                 '}';     }      /**      * Set httpProxyPool, String[0]:ip, String[1]:port <br>      *      * @param httpProxyList httpProxyList      * @return this      */     public Site setHttpProxyPool(List<String[]> httpProxyList) {         this.httpProxyPool=new ProxyPool(httpProxyList);         return this;     }      public Site enableHttpProxyPool() {         this.httpProxyPool=new ProxyPool();         return this;     }      public ProxyPool getHttpProxyPool() {         return httpProxyPool;     }      public HttpHost getHttpProxyFromPool() {         return httpProxyPool.getProxy();     }      public void returnHttpProxyToPool(HttpHost proxy,int statusCode) {         httpProxyPool.returnProxy(proxy,statusCode);     }      public Site setProxyReuseInterval(int reuseInterval) {         this.httpProxyPool.setReuseInterval(reuseInterval);         return this;     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> webmagic-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> us : Folder]
						[NT -> codecraft : Folder]
							[NT -> webmagic : Folder]
								[NT -> Site.java.merge : .java.merge-File]
									[T -> Site.java : .java-Content "package us.codecraft.webmagic;  import com.google.common.collect.HashBasedTable; import com.google.common.collect.Table; import org.apache.http.HttpHost;  import org.apache.http.auth.UsernamePasswordCredentials; import us.codecraft.webmagic.proxy.ProxyPool; import us.codecraft.webmagic.utils.UrlUtils;  import java.util.*;  /**  * Object contains setting for crawler.<br>  *  * @author code4crafter@gmail.com <br>  * @see us.codecraft.webmagic.processor.PageProcessor  * @since 0.1.0  */ public class Site {      private String domain;      private String userAgent;      private Map<String, String> defaultCookies = new LinkedHashMap<String, String>();      private Table<String, String, String> cookies = HashBasedTable.create();      private String charset;      /**      * startUrls is the urls the crawler to start with.      */     private List<Request> startRequests = new ArrayList<Request>();      private int sleepTime = 5000;      private int retryTimes = 0;      private int cycleRetryTimes = 0;      private int retrySleepTime = 1000;      private int timeOut = 5000;      private static final Set<Integer> DEFAULT_STATUS_CODE_SET = new HashSet<Integer>();      private Set<Integer> acceptStatCode = DEFAULT_STATUS_CODE_SET;      private Map<String, String> headers = new HashMap<String, String>();      private HttpHost httpProxy;      private UsernamePasswordCredentials usernamePasswordCredentials; //代理用户名密码设置      private ProxyPool httpProxyPool;      private boolean useGzip = true;      /**      * @see us.codecraft.webmagic.utils.HttpConstant.Header      * @deprecated      */     public static interface HeaderConst {          public static final String REFERER = "Referer";     }       static {         DEFAULT_STATUS_CODE_SET.add(200);     }      /**      * new a Site      *      * @return new site      */     public static Site me() {         return new Site();     }      /**      * Add a cookie with domain {@link #getDomain()}      *      * @param name name      * @param value value      * @return this      */     public Site addCookie(String name, String value) {         defaultCookies.put(name, value);         return this;     }      /**      * Add a cookie with specific domain.      *      * @param domain domain      * @param name name      * @param value value      * @return this      */     public Site addCookie(String domain, String name, String value) {         cookies.put(domain, name, value);         return this;     }      /**      * set user agent      *      * @param userAgent userAgent      * @return this      */     public Site setUserAgent(String userAgent) {         this.userAgent = userAgent;         return this;     }      /**      * get cookies      *      * @return get cookies      */     public Map<String, String> getCookies() {         return defaultCookies;     }      /**      * get cookies of all domains      *      * @return get cookies      */     public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();     }      /**      * get user agent      *      * @return user agent      */     public String getUserAgent() {         return userAgent;     }      /**      * get domain      *      * @return get domain      */     public String getDomain() {         return domain;     }      /**      * set the domain of site.      *      * @param domain domain      * @return this      */     public Site setDomain(String domain) {         this.domain = domain;         return this;     }      /**      * Set charset of page manually.<br>      * When charset is not set or set to null, it can be auto detected by Http header.      *      * @param charset charset      * @return this      */     public Site setCharset(String charset) {         this.charset = charset;         return this;     }      /**      * get charset set manually      *      * @return charset      */     public String getCharset() {         return charset;     }      public int getTimeOut() {         return timeOut;     }      /**      * set timeout for downloader in ms      *      * @param timeOut timeOut      * @return this      */     public Site setTimeOut(int timeOut) {         this.timeOut = timeOut;         return this;     }      /**      * Set acceptStatCode.<br>      * When status code of http response is in acceptStatCodes, it will be processed.<br>      * {200} by default.<br>      * It is not necessarily to be set.<br>      *      * @param acceptStatCode acceptStatCode      * @return this      */     public Site setAcceptStatCode(Set<Integer> acceptStatCode) {         this.acceptStatCode = acceptStatCode;         return this;     }      /**      * get acceptStatCode      *      * @return acceptStatCode      */     public Set<Integer> getAcceptStatCode() {         return acceptStatCode;     }      /**      * get start urls      *      * @return start urls      * @see #getStartRequests      * @deprecated      */     @Deprecated     public List<String> getStartUrls() {         return UrlUtils.convertToUrls(startRequests);     }      public List<Request> getStartRequests() {         return startRequests;     }      /**      * Add a url to start url.<br>      * Because urls are more a Spider's property than Site, move it to {@link Spider#addUrl(String...)}}      *      * @param startUrl startUrl      * @return this      * @see Spider#addUrl(String...)      * @deprecated      */     public Site addStartUrl(String startUrl) {         return addStartRequest(new Request(startUrl));     }      /**      * Add a url to start url.<br>      * Because urls are more a Spider's property than Site, move it to {@link Spider#addRequest(Request...)}}      *      * @param startRequest startRequest      * @return this      * @see Spider#addRequest(Request...)      * @deprecated      */     public Site addStartRequest(Request startRequest) {         this.startRequests.add(startRequest);         if (domain == null && startRequest.getUrl() != null) {             domain = UrlUtils.getDomain(startRequest.getUrl());         }         return this;     }      /**      * Set the interval between the processing of two pages.<br>      * Time unit is micro seconds.<br>      *      * @param sleepTime sleepTime      * @return this      */     public Site setSleepTime(int sleepTime) {         this.sleepTime = sleepTime;         return this;     }      /**      * Get the interval between the processing of two pages.<br>      * Time unit is micro seconds.<br>      *      * @return the interval between the processing of two pages,      */     public int getSleepTime() {         return sleepTime;     }      /**      * Get retry times immediately when download fail, 0 by default.<br>      *      * @return retry times when download fail      */     public int getRetryTimes() {         return retryTimes;     }      public Map<String, String> getHeaders() {         return headers;     }      /**      * Put an Http header for downloader. <br>      * Use {@link #addCookie(String, String)} for cookie and {@link #setUserAgent(String)} for user-agent. <br>      *      * @param key   key of http header, there are some keys constant in {@link HeaderConst}      * @param value value of header      * @return this      */     public Site addHeader(String key, String value) {         headers.put(key, value);         return this;     }      /**      * Set retry times when download fail, 0 by default.<br>      *      * @param retryTimes retryTimes      * @return this      */     public Site setRetryTimes(int retryTimes) {         this.retryTimes = retryTimes;         return this;     }      /**      * When cycleRetryTimes is more than 0, it will add back to scheduler and try download again. <br>      *      * @return retry times when download fail      */     public int getCycleRetryTimes() {         return cycleRetryTimes;     }      /**      * Set cycleRetryTimes times when download fail, 0 by default. <br>      *      * @param cycleRetryTimes cycleRetryTimes      * @return this      */     public Site setCycleRetryTimes(int cycleRetryTimes) {         this.cycleRetryTimes = cycleRetryTimes;         return this;     }      public HttpHost getHttpProxy() {         return httpProxy;     }      /**      * set up httpProxy for this site      *      * @param httpProxy httpProxy      * @return this      */     public Site setHttpProxy(HttpHost httpProxy) {         this.httpProxy = httpProxy;         return this;     }      public boolean isUseGzip() {         return useGzip;     }      public int getRetrySleepTime() {         return retrySleepTime;     }      /**      * Set retry sleep times when download fail, 1000 by default. <br>      *      * @param retrySleepTime retrySleepTime      * @return this      */     public Site setRetrySleepTime(int retrySleepTime) {         this.retrySleepTime = retrySleepTime;         return this;     }      /**      * Whether use gzip. <br>      * Default is true, you can set it to false to disable gzip.      *      * @param useGzip useGzip      * @return this      */     public Site setUseGzip(boolean useGzip) {         this.useGzip = useGzip;         return this;     }      public Task toTask() {         return new Task() {             @Override             public String getUUID() {                 return Site.this.getDomain();             }              @Override             public Site getSite() {                 return Site.this;             }         };     }      @Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;          Site site = (Site) o;          if (cycleRetryTimes != site.cycleRetryTimes) return false;         if (retryTimes != site.retryTimes) return false;         if (sleepTime != site.sleepTime) return false;         if (timeOut != site.timeOut) return false;         if (acceptStatCode != null ? !acceptStatCode.equals(site.acceptStatCode) : site.acceptStatCode != null)             return false;         if (charset != null ? !charset.equals(site.charset) : site.charset != null) return false;         if (defaultCookies != null ? !defaultCookies.equals(site.defaultCookies) : site.defaultCookies != null)             return false;         if (domain != null ? !domain.equals(site.domain) : site.domain != null) return false;         if (headers != null ? !headers.equals(site.headers) : site.headers != null) return false;         if (startRequests != null ? !startRequests.equals(site.startRequests) : site.startRequests != null)             return false;         if (userAgent != null ? !userAgent.equals(site.userAgent) : site.userAgent != null) return false;          return true;     }      @Override     public int hashCode() {         int result = domain != null ? domain.hashCode() : 0;         result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);         result = 31 * result + (defaultCookies != null ? defaultCookies.hashCode() : 0);         result = 31 * result + (charset != null ? charset.hashCode() : 0);         result = 31 * result + (startRequests != null ? startRequests.hashCode() : 0);         result = 31 * result + sleepTime;         result = 31 * result + retryTimes;         result = 31 * result + cycleRetryTimes;         result = 31 * result + timeOut;         result = 31 * result + (acceptStatCode != null ? acceptStatCode.hashCode() : 0);         result = 31 * result + (headers != null ? headers.hashCode() : 0);         return result;     }      @Override     public String toString() {         return "Site{" +                 "domain='" + domain + '\'' +                 ", userAgent='" + userAgent + '\'' +                 ", cookies=" + defaultCookies +                 ", charset='" + charset + '\'' +                 ", startRequests=" + startRequests +                 ", sleepTime=" + sleepTime +                 ", retryTimes=" + retryTimes +                 ", cycleRetryTimes=" + cycleRetryTimes +                 ", timeOut=" + timeOut +                 ", acceptStatCode=" + acceptStatCode +                 ", headers=" + headers +                 '}';     }      /**      * Set httpProxyPool, String[0]:ip, String[1]:port <br>      *      * @param httpProxyList httpProxyList      * @return this      */     public Site setHttpProxyPool(List<String[]> httpProxyList) {         this.httpProxyPool=new ProxyPool(httpProxyList);         return this;     }      public Site enableHttpProxyPool() {         this.httpProxyPool=new ProxyPool();         return this;     }      public UsernamePasswordCredentials getUsernamePasswordCredentials() {         return usernamePasswordCredentials;     }      public Site setUsernamePasswordCredentials(UsernamePasswordCredentials usernamePasswordCredentials) {         this.usernamePasswordCredentials = usernamePasswordCredentials;         return this;     }      public ProxyPool getHttpProxyPool() {         return httpProxyPool;     }      public HttpHost getHttpProxyFromPool() {         return httpProxyPool.getProxy();     }      public void returnHttpProxyToPool(HttpHost proxy,int statusCode) {         httpProxyPool.returnProxy(proxy,statusCode);     }      public Site setProxyReuseInterval(int reuseInterval) {         this.httpProxyPool.setReuseInterval(reuseInterval);         return this;     }  } " compose:StringConcatenation merge: LineBased]
