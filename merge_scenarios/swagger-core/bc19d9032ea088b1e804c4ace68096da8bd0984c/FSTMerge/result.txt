Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameters.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameters.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameters.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameters.java
[NT -> left : Feature]
	[NT -> modules : Folder]
		[NT -> swagger-models : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> io : Folder]
							[NT -> swagger : Folder]
								[NT -> oas : Folder]
									[NT -> models : Folder]
										[NT -> links : Folder]
											[NT -> LinkParameters.java : Java-File]
[NT -> base : Feature]
	[NT -> modules : Folder]
		[NT -> swagger-models : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> io : Folder]
							[NT -> swagger : Folder]
								[NT -> oas : Folder]
									[NT -> models : Folder]
										[NT -> links : Folder]
											[NT -> LinkParameters.java : Java-File]
[NT -> left : Feature]
	[NT -> modules : Folder]
		[NT -> swagger-models : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> io : Folder]
							[NT -> swagger : Folder]
								[NT -> oas : Folder]
									[NT -> models : Folder]
										[NT -> links : Folder]
											[NT -> LinkParameters.java.merge : .java.merge-File]
												[T -> LinkParameters.java : .java-Content "/**  * Copyright 2017 SmartBear Software  * <p>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * <p>  * http://www.apache.org/licenses/LICENSE-2.0  * <p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package io.swagger.oas.models.links;  import java.util.Objects;  /**  * LinkParameters  *  * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#linkOParametersbject"  */   public class LinkParameters {   public LinkParameters() { }   private java.util.Map<String, Object> extensions = null;     @Override   public boolean equals(java.lang.Object o) {     if (this == o) {       return true;     }     if (o == null || getClass() != o.getClass()) {       return false;     }     LinkParameters linkParameters = (LinkParameters) o;     return Objects.equals(this.extensions, linkParameters.extensions);   }    @Override   public int hashCode() {     return Objects.hash(extensions);   }     public java.util.Map<String, Object> getExtensions() {     return extensions;   }    public void addExtension(String name, Object value) {     if(this.extensions == null) {       this.extensions = new java.util.HashMap<>();     }     this.extensions.put(name, value);   }    public void setExtensions(java.util.Map<String, Object> extensions) {     this.extensions = extensions;   }    @Override   public String toString() {     StringBuilder sb = new StringBuilder();     sb.append("class LinkParameters {\n");          sb.append("}");     return sb.toString();   }    /**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */   private String toIndentedString(java.lang.Object o) {     if (o == null) {       return "null";     }     return o.toString().replace("\n", "\n    ");   }    }  " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> modules : Folder]
		[NT -> swagger-models : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> io : Folder]
							[NT -> swagger : Folder]
								[NT -> oas : Folder]
									[NT -> models : Folder]
										[NT -> links : Folder]
											[NT -> LinkParameters.java.merge : .java.merge-File]
												[T -> LinkParameters.java : .java-Content "/**  * Copyright 2017 SmartBear Software  * <p>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * <p>  * http://www.apache.org/licenses/LICENSE-2.0  * <p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package io.swagger.oas.models.links;  import java.util.Objects;  /**  * LinkParameters  *  * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#linkOParametersbject"  */   public class LinkParameters {   public LinkParameters() { }   private java.util.Map<String, Object> extensions = null;     @Override   public boolean equals(java.lang.Object o) {     if (this == o) {       return true;     }     if (o == null || getClass() != o.getClass()) {       return false;     }     return true;   }    @Override   public int hashCode() {     return Objects.hash();   }     public java.util.Map<String, Object> getExtensions() {     return extensions;   }    public void addExtension(String name, Object value) {     if(this.extensions == null) {       this.extensions = new java.util.HashMap<>();     }     this.extensions.put(name, value);   }    public void setExtensions(java.util.Map<String, Object> extensions) {     this.extensions = extensions;   }    @Override   public String toString() {     StringBuilder sb = new StringBuilder();     sb.append("class LinkParameters {\n");          sb.append("}");     return sb.toString();   }    /**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */   private String toIndentedString(java.lang.Object o) {     if (o == null) {       return "null";     }     return o.toString().replace("\n", "\n    ");   }    }  " compose:StringConcatenation merge: LineBased]
