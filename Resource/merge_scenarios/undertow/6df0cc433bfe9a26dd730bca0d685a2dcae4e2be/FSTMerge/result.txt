Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/core/src/main/java/io/undertow/UndertowMessages.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/core/src/main/java/io/undertow/UndertowMessages.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/core/src/main/java/io/undertow/UndertowMessages.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/core/src/main/java/io/undertow/UndertowMessages.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/core/src/main/java/io/undertow/UndertowMessages.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/core/src/main/java/io/undertow/UndertowMessages.java
[NT -> left : Feature]
	[NT -> core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> io : Folder]
						[NT -> undertow : Folder]
							[NT -> UndertowMessages.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package io.undertow;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.net.SocketAddress{ImportPackage} : ImportDeclaration "import java.net.SocketAddress;" compose:Replacement merge: Default]
									[T -> java.nio.channels.ClosedChannelException{ImportPackage} : ImportDeclaration "import java.nio.channels.ClosedChannelException;" compose:Replacement merge: Default]
									[T -> io.undertow.predicate.PredicateBuilder{ImportPackage} : ImportDeclaration "import io.undertow.predicate.PredicateBuilder;" compose:Replacement merge: Default]
									[T -> io.undertow.protocols.http2.HpackException{ImportPackage} : ImportDeclaration "import io.undertow.protocols.http2.HpackException;" compose:Replacement merge: Default]
									[T -> io.undertow.server.handlers.builder.HandlerBuilder{ImportPackage} : ImportDeclaration "import io.undertow.server.handlers.builder.HandlerBuilder;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.Messages{ImportPackage} : ImportDeclaration "import org.jboss.logging.Messages;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.Cause{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.Cause;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.Message{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.Message;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.MessageBundle{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.MessageBundle;" compose:Replacement merge: Default]
									[T -> javax.net.ssl.SSLPeerUnverifiedException{ImportPackage} : ImportDeclaration "import javax.net.ssl.SSLPeerUnverifiedException;" compose:Replacement merge: Default]
									[NT -> UndertowMessages : ClassDeclaration]
										[T -> - : Modifiers "@MessageBundle(projectCode = "UT") public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
										[T -> UndertowMessages : Id "UndertowMessages" compose:Replacement merge: Default]
										[T -> MESSAGES : FieldDecl "UndertowMessages MESSAGES = Messages.getBundle(UndertowMessages.class);" compose:Replacement merge: SemanticConflict]
										[T -> maximumConcurrentRequestsMustBeLargerThanZero({FormalParametersInternal}) : MethodDecl "@Message(id = 1, value = "Maximum concurrent requests must be larger than zero.")     IllegalArgumentException maximumConcurrentRequestsMustBeLargerThanZero();" compose:Replacement merge: LineBased]
										[T -> responseAlreadyStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 2, value = "The response has already been started")     IllegalStateException responseAlreadyStarted();" compose:Replacement merge: LineBased]
										[T -> responseChannelAlreadyProvided({FormalParametersInternal}) : MethodDecl "@Message(id = 4, value = "getResponseChannel() has already been called")     IllegalStateException responseChannelAlreadyProvided();" compose:Replacement merge: LineBased]
										[T -> requestChannelAlreadyProvided({FormalParametersInternal}) : MethodDecl "@Message(id = 5, value = "getRequestChannel() has already been called")     IllegalStateException requestChannelAlreadyProvided();" compose:Replacement merge: LineBased]
										[T -> handlerCannotBeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 8, value = "Handler cannot be null")     IllegalArgumentException handlerCannotBeNull();" compose:Replacement merge: LineBased]
										[T -> pathMustBeSpecified({FormalParametersInternal}) : MethodDecl "@Message(id = 9, value = "Path must be specified")     IllegalArgumentException pathMustBeSpecified();" compose:Replacement merge: LineBased]
										[T -> sessionNotFound(String-String) : MethodDecl "@Message(id = 10, value = "Session not found %s")     IllegalStateException sessionNotFound(final String session);" compose:Replacement merge: LineBased]
										[T -> sessionManagerMustNotBeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 11, value = "Session manager must not be null")     IllegalStateException sessionManagerMustNotBeNull();" compose:Replacement merge: LineBased]
										[T -> sessionManagerNotFound({FormalParametersInternal}) : MethodDecl "@Message(id = 12, value = "Session manager was not attached to the request. Make sure that the SessionAttachmentHandler is installed in the handler chain")     IllegalStateException sessionManagerNotFound();" compose:Replacement merge: LineBased]
										[T -> argumentCannotBeNull(String-String) : MethodDecl "@Message(id = 13, value = "Argument %s cannot be null")     IllegalArgumentException argumentCannotBeNull(final String argument);" compose:Replacement merge: LineBased]
										[T -> closeCalledWithDataStillToBeFlushed({FormalParametersInternal}) : MethodDecl "@Message(id = 14, value = "close() called with data still to be flushed. Please call shutdownWrites() and then call flush() until it returns true before calling close()")     IOException closeCalledWithDataStillToBeFlushed();" compose:Replacement merge: LineBased]
										[T -> cookieHandlerNotPresent({FormalParametersInternal}) : MethodDecl "@Message(id = 16, value = "Could not add cookie as cookie handler was not present in the handler chain")     IllegalStateException cookieHandlerNotPresent();" compose:Replacement merge: LineBased]
										[T -> formValueIsAFile({FormalParametersInternal}) : MethodDecl "@Message(id = 17, value = "Form value is a file, use getFile() instead")     IllegalStateException formValueIsAFile();" compose:Replacement merge: LineBased]
										[T -> formValueIsAString({FormalParametersInternal}) : MethodDecl "@Message(id = 18, value = "Form value is a String, use getValue() instead")     IllegalStateException formValueIsAString();" compose:Replacement merge: LineBased]
										[T -> requestEntityWasTooLarge(SocketAddress-SocketAddress-long-long) : MethodDecl "@Message(id = 19, value = "Connection from %s terminated as request entity was larger than %s")     IOException requestEntityWasTooLarge(SocketAddress address, long size);" compose:Replacement merge: LineBased]
										[T -> requestEntityWasTooLarge(long-long) : MethodDecl "@Message(id = 20, value = "Connection terminated as request was larger than %s")     IOException requestEntityWasTooLarge(long size);" compose:Replacement merge: LineBased]
										[T -> sessionAlreadyInvalidated({FormalParametersInternal}) : MethodDecl "@Message(id = 21, value = "Session already invalidated")     IllegalStateException sessionAlreadyInvalidated();" compose:Replacement merge: LineBased]
										[T -> hashAlgorithmNotFound(String-String) : MethodDecl "@Message(id = 22, value = "The specified hash algorithm '%s' can not be found.")     IllegalArgumentException hashAlgorithmNotFound(String algorithmName);" compose:Replacement merge: LineBased]
										[T -> invalidBase64Token(IOException-IOException) : MethodDecl "@Message(id = 23, value = "An invalid Base64 token has been received.")     IllegalArgumentException invalidBase64Token(@Cause final IOException cause);" compose:Replacement merge: LineBased]
										[T -> invalidNonceReceived({FormalParametersInternal}) : MethodDecl "@Message(id = 24, value = "An invalidly formatted nonce has been received.")     IllegalArgumentException invalidNonceReceived();" compose:Replacement merge: LineBased]
										[T -> unexpectedTokenInHeader(String-String) : MethodDecl "@Message(id = 25, value = "Unexpected token '%s' within header.")     IllegalArgumentException unexpectedTokenInHeader(final String name);" compose:Replacement merge: LineBased]
										[T -> invalidHeader({FormalParametersInternal}) : MethodDecl "@Message(id = 26, value = "Invalid header received.")     IllegalArgumentException invalidHeader();" compose:Replacement merge: LineBased]
										[T -> couldNotFindSessionCookieConfig({FormalParametersInternal}) : MethodDecl "@Message(id = 27, value = "Could not find session cookie config in the request")     IllegalStateException couldNotFindSessionCookieConfig();" compose:Replacement merge: LineBased]
										[T -> sessionAlreadyExists(String-String) : MethodDecl "@Message(id = 28, value = "Session %s already exists")     IllegalStateException sessionAlreadyExists(final String id);" compose:Replacement merge: LineBased]
										[T -> chunkedChannelClosedMidChunk({FormalParametersInternal}) : MethodDecl "@Message(id = 29, value = "Channel was closed mid chunk, if you have attempted to write chunked data you cannot shutdown the channel until after it has all been written.")     IOException chunkedChannelClosedMidChunk();" compose:Replacement merge: LineBased]
										[T -> userAuthenticated(String-String) : MethodDecl "@Message(id = 30, value = "User %s successfully authenticated.")     String userAuthenticated(final String userName);" compose:Replacement merge: LineBased]
										[T -> userLoggedOut(String-String) : MethodDecl "@Message(id = 31, value = "User %s has logged out.")     String userLoggedOut(final String userName);" compose:Replacement merge: LineBased]
										[T -> authTypeCannotBeCombined(String-String-String-String) : MethodDecl "@Message(id = 33, value = "Authentication type %s cannot be combined with %s")     IllegalStateException authTypeCannotBeCombined(String type, String existing);" compose:Replacement merge: LineBased]
										[T -> streamIsClosed({FormalParametersInternal}) : MethodDecl "@Message(id = 34, value = "Stream is closed")     IOException streamIsClosed();" compose:Replacement merge: LineBased]
										[T -> startBlockingHasNotBeenCalled({FormalParametersInternal}) : MethodDecl "@Message(id = 35, value = "Cannot get stream as startBlocking has not been invoked")     IllegalStateException startBlockingHasNotBeenCalled();" compose:Replacement merge: LineBased]
										[T -> connectionTerminatedReadingMultiPartData({FormalParametersInternal}) : MethodDecl "@Message(id = 36, value = "Connection terminated parsing multipart data")     IOException connectionTerminatedReadingMultiPartData();" compose:Replacement merge: LineBased]
										[T -> failedToParsePath({FormalParametersInternal}) : MethodDecl "@Message(id = 37, value = "Failed to parse path in HTTP request")     RuntimeException failedToParsePath();" compose:Replacement merge: LineBased]
										[T -> authenticationFailed(String-String) : MethodDecl "@Message(id = 38, value = "Authentication failed, requested user name '%s'")     String authenticationFailed(final String userName);" compose:Replacement merge: LineBased]
										[T -> tooManyQueryParameters(int-int) : MethodDecl "@Message(id = 39, value = "To many query parameters, cannot have more than %s query parameters")     RuntimeException tooManyQueryParameters(int noParams);" compose:Replacement merge: LineBased]
										[T -> tooManyHeaders(int-int) : MethodDecl "@Message(id = 40, value = "To many headers, cannot have more than %s header")     RuntimeException tooManyHeaders(int noParams);" compose:Replacement merge: LineBased]
										[T -> channelIsClosed({FormalParametersInternal}) : MethodDecl "@Message(id = 41, value = "Channel is closed")     ClosedChannelException channelIsClosed();" compose:Replacement merge: LineBased]
										[T -> couldNotDecodeTrailers({FormalParametersInternal}) : MethodDecl "@Message(id = 42, value = "Could not decode trailers in HTTP request")     IOException couldNotDecodeTrailers();" compose:Replacement merge: LineBased]
										[T -> dataAlreadyQueued({FormalParametersInternal}) : MethodDecl "@Message(id = 43, value = "Data is already being sent. You must wait for the completion callback to be be invoked before calling send() again")     IllegalStateException dataAlreadyQueued();" compose:Replacement merge: LineBased]
										[T -> moreThanOnePredicateWithName(String-String-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>) : MethodDecl "@Message(id = 44, value = "More than one predicate with name %s. Builder class %s and %s")     IllegalStateException moreThanOnePredicateWithName(String name, Class<? extends PredicateBuilder> aClass, Class<? extends PredicateBuilder> existing);" compose:Replacement merge: LineBased]
										[T -> errorParsingPredicateString(String-String-String-String) : MethodDecl "@Message(id = 45, value = "Error parsing predicated handler string %s:%n%s")     IllegalArgumentException errorParsingPredicateString(String reason, String s);" compose:Replacement merge: LineBased]
										[T -> tooManyCookies(int-int) : MethodDecl "@Message(id = 46, value = "The number of cookies sent exceeded the maximum of %s")     IllegalStateException tooManyCookies(int maxCookies);" compose:Replacement merge: LineBased]
										[T -> tooManyParameters(int-int) : MethodDecl "@Message(id = 47, value = "The number of parameters exceeded the maximum of %s")     IllegalStateException tooManyParameters(int maxValues);" compose:Replacement merge: LineBased]
										[T -> noRequestActive({FormalParametersInternal}) : MethodDecl "@Message(id = 48, value = "No request is currently active")     IllegalStateException noRequestActive();" compose:Replacement merge: LineBased]
										[T -> authMechanismOutcomeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 50, value = "AuthenticationMechanism Outcome is null")     IllegalStateException authMechanismOutcomeNull();" compose:Replacement merge: LineBased]
										[T -> notAValidIpPattern(String-String) : MethodDecl "@Message(id = 51, value = "Not a valid IP pattern %s")     IllegalArgumentException notAValidIpPattern(String peer);" compose:Replacement merge: LineBased]
										[T -> noSessionData({FormalParametersInternal}) : MethodDecl "@Message(id = 52, value = "Session data requested when non session based authentication in use")     IllegalStateException noSessionData();" compose:Replacement merge: LineBased]
										[T -> listenerAlreadyRegistered(String-String) : MethodDecl "@Message(id = 53, value = "Listener %s already registered")     IllegalArgumentException listenerAlreadyRegistered(String name);" compose:Replacement merge: LineBased]
										[T -> maxFileSizeExceeded(long-long) : MethodDecl "@Message(id = 54, value = "The maximum size %s for an individual file in a multipart request was exceeded")     IOException maxFileSizeExceeded(long maxIndividualFileSize);" compose:Replacement merge: LineBased]
										[T -> couldNotSetAttribute(String-String-String-String) : MethodDecl "@Message(id = 55, value = "Could not set attribute %s to %s as it is read only")     String couldNotSetAttribute(String attributeName, String newValue);" compose:Replacement merge: LineBased]
										[T -> couldNotParseUriTemplate(String-String-int-int) : MethodDecl "@Message(id = 56, value = "Could not parse URI template %s, exception at char %s")     RuntimeException couldNotParseUriTemplate(String path, int i);" compose:Replacement merge: LineBased]
										[T -> mismatchedBraces(String-String) : MethodDecl "@Message(id = 57, value = "Mismatched braces in attribute string %s")     RuntimeException mismatchedBraces(String valueString);" compose:Replacement merge: LineBased]
										[T -> moreThanOneHandlerWithName(String-String-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>) : MethodDecl "@Message(id = 58, value = "More than one handler with name %s. Builder class %s and %s")     IllegalStateException moreThanOneHandlerWithName(String name, Class<? extends HandlerBuilder> aClass, Class<? extends HandlerBuilder> existing);" compose:Replacement merge: LineBased]
										[T -> invalidSyntax(String-String) : MethodDecl "@Message(id = 59, value = "Invalid syntax %s")     IllegalArgumentException invalidSyntax(String line);" compose:Replacement merge: LineBased]
										[T -> errorParsingHandlerString(String-String-String-String) : MethodDecl "@Message(id = 60, value = "Error parsing handler string %s:%n%s")     IllegalArgumentException errorParsingHandlerString(String reason, String s);" compose:Replacement merge: LineBased]
										[T -> outOfBandResponseOnlyAllowedFor100Continue({FormalParametersInternal}) : MethodDecl "@Message(id = 61, value = "Out of band responses only allowed for 100-continue requests")     IllegalArgumentException outOfBandResponseOnlyAllowedFor100Continue();" compose:Replacement merge: LineBased]
										[T -> ajpDoesNotSupportHTTPUpgrade({FormalParametersInternal}) : MethodDecl "@Message(id = 62, value = "AJP does not support HTTP upgrade")     IllegalStateException ajpDoesNotSupportHTTPUpgrade();" compose:Replacement merge: LineBased]
										[T -> fileSystemWatcherAlreadyStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 63, value = "File system watcher already started")     IllegalStateException fileSystemWatcherAlreadyStarted();" compose:Replacement merge: LineBased]
										[T -> fileSystemWatcherNotStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 64, value = "File system watcher not started")     IllegalStateException fileSystemWatcherNotStarted();" compose:Replacement merge: LineBased]
										[T -> sslWasNull({FormalParametersInternal}) : MethodDecl "@Message(id = 65, value = "SSL must be specified to connect to a https URL")     IOException sslWasNull();" compose:Replacement merge: LineBased]
										[T -> wrongMagicNumber(int-int) : MethodDecl "@Message(id = 66, value = "Incorrect magic number %s for AJP packet header")     IOException wrongMagicNumber(int number);" compose:Replacement merge: LineBased]
										[T -> peerUnverified({FormalParametersInternal}) : MethodDecl "@Message(id = 67, value = "No client cert was provided")     SSLPeerUnverifiedException peerUnverified();" compose:Replacement merge: LineBased]
										[T -> servletPathMatchFailed({FormalParametersInternal}) : MethodDecl "@Message(id = 68, value = "Servlet path match failed")     IllegalArgumentException servletPathMatchFailed();" compose:Replacement merge: LineBased]
										[T -> couldNotParseCookie(String-String) : MethodDecl "@Message(id = 69, value = "Could not parse set cookie header %s")     IllegalArgumentException couldNotParseCookie(String headerValue);" compose:Replacement merge: LineBased]
										[T -> canOnlyBeCalledByIoThread({FormalParametersInternal}) : MethodDecl "@Message(id = 70, value = "method can only be called by IO thread")     IllegalStateException canOnlyBeCalledByIoThread();" compose:Replacement merge: LineBased]
										[T -> matcherAlreadyContainsTemplate(String-String-String-String) : MethodDecl "@Message(id = 71, value = "Cannot add path template %s, matcher already contains an equivalent pattern %s")     IllegalStateException matcherAlreadyContainsTemplate(String templateString, String templateString1);" compose:Replacement merge: LineBased]
										[T -> failedToDecodeURL(String-String-String-String-Exception-Exception) : MethodDecl "@Message(id = 72, value = "Failed to decode url %s to charset %s")     IllegalArgumentException failedToDecodeURL(String s, String enc, @Cause Exception e);" compose:Replacement merge: LineBased]
										[T -> resourceChangeListenerNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 73, value = "Resource change listeners are not supported")     IllegalArgumentException resourceChangeListenerNotSupported();" compose:Replacement merge: LineBased]
										[T -> couldNotRenegotiate({FormalParametersInternal}) : MethodDecl "@Message(id = 74, value = "Could not renegotiate SSL connection to require client certificate, as client had sent more data")     IllegalStateException couldNotRenegotiate();" compose:Replacement merge: LineBased]
										[T -> objectWasFreed({FormalParametersInternal}) : MethodDecl "@Message(id = 75, value = "Object was freed")     IllegalStateException objectWasFreed();" compose:Replacement merge: LineBased]
										[T -> handlerNotShutdown({FormalParametersInternal}) : MethodDecl "@Message(id = 76, value = "Handler not shutdown")     IllegalStateException handlerNotShutdown();" compose:Replacement merge: LineBased]
										[T -> upgradeNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 77, value = "The underlying transport does not support HTTP upgrade")     IllegalStateException upgradeNotSupported();" compose:Replacement merge: LineBased]
										[T -> renegotiationNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 78, value = "Renegotiation not supported")     IOException renegotiationNotSupported();" compose:Replacement merge: LineBased]
										[T -> notAValidUserAgentPattern(String-String) : MethodDecl "@Message(id = 79, value = "Not a valid user agent pattern %s")     IllegalArgumentException notAValidUserAgentPattern(String userAgent);" compose:Replacement merge: LineBased]
										[T -> notAValidRegularExpressionPattern(String-String) : MethodDecl "@Message(id = 80, value = "Not a valid regular expression pattern %s")     IllegalArgumentException notAValidRegularExpressionPattern(String pattern);" compose:Replacement merge: LineBased]
										[T -> badRequest({FormalParametersInternal}) : MethodDecl "@Message(id = 81, value = "Bad request")     RuntimeException badRequest();" compose:Replacement merge: LineBased]
										[T -> hostAlreadyRegistered(Object-Object) : MethodDecl "@Message(id = 82, value = "Host %s already registered")     RuntimeException hostAlreadyRegistered(Object host);" compose:Replacement merge: LineBased]
										[T -> hostHasNotBeenRegistered(Object-Object) : MethodDecl "@Message(id = 83, value = "Host %s has not been registered")     RuntimeException hostHasNotBeenRegistered(Object host);" compose:Replacement merge: LineBased]
										[T -> extraDataWrittenAfterChunkEnd({FormalParametersInternal}) : MethodDecl "@Message(id = 84, value = "Attempted to write additional data after the last chunk")     IOException extraDataWrittenAfterChunkEnd();" compose:Replacement merge: LineBased]
										[T -> couldNotGenerateUniqueSessionId({FormalParametersInternal}) : MethodDecl "@Message(id = 85, value = "Could not generate unique session id")     RuntimeException couldNotGenerateUniqueSessionId();" compose:Replacement merge: LineBased]
										[T -> mustProvideHeapBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 86, value = "SPDY needs to be provided with a heap buffer pool, for use in compressing and decompressing headers.")     IllegalArgumentException mustProvideHeapBuffer();" compose:Replacement merge: LineBased]
										[T -> unexpectedFrameType(int-int) : MethodDecl "@Message(id = 87, value = "Unexpected SPDY frame type %s")     IOException unexpectedFrameType(int type);" compose:Replacement merge: LineBased]
										[T -> controlFrameCannotHaveBodyContent({FormalParametersInternal}) : MethodDecl "@Message(id = 88, value = "SPDY control frames cannot have body content")     IOException controlFrameCannotHaveBodyContent();" compose:Replacement merge: LineBased]
										[T -> spdyNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 89, value = "SPDY not supported")     IOException spdyNotSupported();" compose:Replacement merge: LineBased]
										[T -> jettyNPNNotAvailable({FormalParametersInternal}) : MethodDecl "@Message(id = 90, value = "Jetty NPN not available")     IOException jettyNPNNotAvailable();" compose:Replacement merge: LineBased]
										[T -> bufferAlreadyFreed({FormalParametersInternal}) : MethodDecl "@Message(id = 91, value = "Buffer has already been freed")     IllegalStateException bufferAlreadyFreed();" compose:Replacement merge: LineBased]
										[T -> headersTooLargeToFitInHeapBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 92, value = "A SPDY header was too large to fit in a response buffer, if you want to support larger headers please increase the buffer size")     IllegalStateException headersTooLargeToFitInHeapBuffer();" compose:Replacement merge: LineBased]
										[T -> spdyStreamWasReset({FormalParametersInternal}) : MethodDecl "@Message(id = 93, value = "A SPDY stream was reset by the remote endpoint")     IOException spdyStreamWasReset();" compose:Replacement merge: LineBased]
										[T -> awaitCalledFromIoThread({FormalParametersInternal}) : MethodDecl "@Message(id = 94, value = "Blocking await method called from IO thread. Blocking IO must be dispatched to a worker thread or deadlocks will result.")     IOException awaitCalledFromIoThread();" compose:Replacement merge: LineBased]
										[T -> recursiveCallToFlushingSenders({FormalParametersInternal}) : MethodDecl "@Message(id = 95, value = "Recursive call to flushSenders()")     RuntimeException recursiveCallToFlushingSenders();" compose:Replacement merge: LineBased]
										[T -> fixedLengthOverflow({FormalParametersInternal}) : MethodDecl "@Message(id = 96, value = "More data was written to the channel than specified in the content-length")     IllegalStateException fixedLengthOverflow();" compose:Replacement merge: LineBased]
										[T -> ajpRequestAlreadyInProgress({FormalParametersInternal}) : MethodDecl "@Message(id = 97, value = "AJP request already in progress")     IllegalStateException ajpRequestAlreadyInProgress();" compose:Replacement merge: LineBased]
										[T -> httpPingDataMustBeLength8({FormalParametersInternal}) : MethodDecl "@Message(id = 98, value = "HTTP ping data must be 8 bytes in length")     String httpPingDataMustBeLength8();" compose:Replacement merge: LineBased]
										[T -> invalidPingSize({FormalParametersInternal}) : MethodDecl "@Message(id = 99, value = "Received a ping of size other than 8")     String invalidPingSize();" compose:Replacement merge: LineBased]
										[T -> streamIdMustBeZeroForFrameType(int-int) : MethodDecl "@Message(id = 100, value = "stream id must be zero for frame type %s")     String streamIdMustBeZeroForFrameType(int frameType);" compose:Replacement merge: LineBased]
										[T -> streamIdMustNotBeZeroForFrameType(int-int) : MethodDecl "@Message(id = 101, value = "stream id must not be zero for frame type %s")     String streamIdMustNotBeZeroForFrameType(int frameType);" compose:Replacement merge: LineBased]
										[T -> rstStreamReceivedForIdleStream({FormalParametersInternal}) : MethodDecl "@Message(id = 102, value = "RST_STREAM received for idle stream")     String rstStreamReceivedForIdleStream();" compose:Replacement merge: LineBased]
										[T -> http2StreamWasReset({FormalParametersInternal}) : MethodDecl "@Message(id = 103, value = "Http2 stream was reset")     IOException http2StreamWasReset();" compose:Replacement merge: LineBased]
										[T -> incorrectHttp2Preface({FormalParametersInternal}) : MethodDecl "@Message(id = 104, value = "Incorrect HTTP2 preface")     IOException incorrectHttp2Preface();" compose:Replacement merge: LineBased]
										[T -> http2FrameTooLarge({FormalParametersInternal}) : MethodDecl "@Message(id = 105, value = "HTTP2 frame to large")     IOException http2FrameTooLarge();" compose:Replacement merge: LineBased]
										[T -> http2ContinuationFrameNotExpected({FormalParametersInternal}) : MethodDecl "@Message(id = 106, value = "HTTP2 continuation frame received without a corresponding headers or push promise frame")     IOException http2ContinuationFrameNotExpected();" compose:Replacement merge: LineBased]
										[T -> huffmanEncodedHpackValueDidNotEndWithEOS({FormalParametersInternal}) : MethodDecl "@Message(id = 107, value = "Huffman encoded value in HPACK headers did not end with EOS padding")     HpackException huffmanEncodedHpackValueDidNotEndWithEOS();" compose:Replacement merge: LineBased]
										[T -> integerEncodedOverTooManyOctets(int-int) : MethodDecl "@Message(id = 108, value = "HPACK variable length integer encoded over too many octects, max is %s")     HpackException integerEncodedOverTooManyOctets(int maxIntegerOctets);" compose:Replacement merge: LineBased]
										[T -> zeroNotValidHeaderTableIndex({FormalParametersInternal}) : MethodDecl "@Message(id = 109, value = "Zero is not a valid header table index")     HpackException zeroNotValidHeaderTableIndex();" compose:Replacement merge: LineBased]
										[T -> cannotSendContinueResponse({FormalParametersInternal}) : MethodDecl "@Message(id = 110, value = "Cannot send 100-Continue, getResponseChannel() has already been called")     IOException cannotSendContinueResponse();" compose:Replacement merge: LineBased]
										[T -> parserDidNotMakeProgress({FormalParametersInternal}) : MethodDecl "@Message(id = 111, value = "Parser did not make progress")     IOException parserDidNotMakeProgress();" compose:Replacement merge: LineBased]
										[T -> headersStreamCanOnlyBeCreatedByClient({FormalParametersInternal}) : MethodDecl "@Message(id = 112, value = "Only client side can call createStream, if you wish to send a PUSH_PROMISE frame use createPushPromiseStream instead")     IOException headersStreamCanOnlyBeCreatedByClient();" compose:Replacement merge: LineBased]
										[T -> pushPromiseCanOnlyBeCreatedByServer({FormalParametersInternal}) : MethodDecl "@Message(id = 113, value = "Only the server side can send a push promise stream")     IOException pushPromiseCanOnlyBeCreatedByServer();" compose:Replacement merge: LineBased]
										[T -> invalidAclRule(String-String) : MethodDecl "@Message(id = 114, value = "Invalid IP access control rule %s. Format is: [ip-match] allow|deny")     IllegalArgumentException invalidAclRule(String rule);" compose:Replacement merge: LineBased]
										[T -> serverReceivedPushPromise({FormalParametersInternal}) : MethodDecl "@Message(id = 115, value = "Server received PUSH_PROMISE frame from client")     IOException serverReceivedPushPromise();" compose:Replacement merge: LineBased]
										[T -> connectNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 116, value = "CONNECT not supported by this connector")     IllegalStateException connectNotSupported();" compose:Replacement merge: LineBased]
										[T -> notAConnectRequest({FormalParametersInternal}) : MethodDecl "@Message(id = 117, value = "Request was not a CONNECT request")     IllegalStateException notAConnectRequest();" compose:Replacement merge: LineBased]
										[T -> cannotResetBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 118, value = "Cannot reset buffer, response has already been commited")     IllegalStateException cannotResetBuffer();" compose:Replacement merge: LineBased]
										[T -> http2PriRequestFailed({FormalParametersInternal}) : MethodDecl "@Message(id = 119, value = "HTTP2 via prior knowledge failed")     IOException http2PriRequestFailed();" compose:Replacement merge: LineBased]
										[T -> outOfBandResponseNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 120, value = "Out of band responses are not allowed for this connector")     IllegalStateException outOfBandResponseNotSupported();" compose:Replacement merge: LineBased]
										[T -> tooManySessions(int-int) : MethodDecl "@Message(id = 121, value = "Session was rejected as the maximum number of sessions (%s) has been hit")     IllegalStateException tooManySessions(int maxSessions);" compose:Replacement merge: LineBased]
										[T -> proxyConnectionFailed(int-int) : MethodDecl "@Message(id = 122, value = "CONNECT attempt failed as target proxy returned %s")     IOException proxyConnectionFailed(int responseCode);" compose:Replacement merge: LineBased]
										[T -> mcmpMessageRejectedDueToSuspiciousCharacters(String-String) : MethodDecl "@Message(id = 123, value = "MCMP message %s rejected due to suspicious characters")     RuntimeException mcmpMessageRejectedDueToSuspiciousCharacters(String data);" compose:Replacement merge: LineBased]
										[T -> rengotiationTimedOut({FormalParametersInternal}) : MethodDecl "@Message(id = 124, value = "renegotiation timed out")     IllegalStateException rengotiationTimedOut();" compose:Replacement merge: LineBased]
										[T -> requestBodyAlreadyRead({FormalParametersInternal}) : MethodDecl "@Message(id = 125, value = "Request body already read")     IllegalStateException requestBodyAlreadyRead();" compose:Replacement merge: LineBased]
										[T -> blockingIoFromIOThread({FormalParametersInternal}) : MethodDecl "@Message(id = 126, value = "Attempted to do blocking IO from the IO thread. This is prohibited as it may result in deadlocks")     IllegalStateException blockingIoFromIOThread();" compose:Replacement merge: LineBased]
										[T -> responseComplete({FormalParametersInternal}) : MethodDecl "@Message(id = 127, value = "Response has already been sent")     IllegalStateException responseComplete();" compose:Replacement merge: LineBased]
										[T -> couldNotReadContentLengthData({FormalParametersInternal}) : MethodDecl "@Message(id = 128, value = "Remote peer closed connection before all data could be read")     IOException couldNotReadContentLengthData();" compose:Replacement merge: LineBased]
										[T -> failedToSendAfterBeingSafe({FormalParametersInternal}) : MethodDecl "@Message(id = 129, value = "Failed to send after being safe to send")     IllegalStateException failedToSendAfterBeingSafe();" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> io : Folder]
						[NT -> undertow : Folder]
							[NT -> UndertowMessages.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package io.undertow;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.net.SocketAddress{ImportPackage} : ImportDeclaration "import java.net.SocketAddress;" compose:Replacement merge: Default]
									[T -> java.nio.channels.ClosedChannelException{ImportPackage} : ImportDeclaration "import java.nio.channels.ClosedChannelException;" compose:Replacement merge: Default]
									[T -> io.undertow.predicate.PredicateBuilder{ImportPackage} : ImportDeclaration "import io.undertow.predicate.PredicateBuilder;" compose:Replacement merge: Default]
									[T -> io.undertow.protocols.http2.HpackException{ImportPackage} : ImportDeclaration "import io.undertow.protocols.http2.HpackException;" compose:Replacement merge: Default]
									[T -> io.undertow.server.handlers.builder.HandlerBuilder{ImportPackage} : ImportDeclaration "import io.undertow.server.handlers.builder.HandlerBuilder;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.Messages{ImportPackage} : ImportDeclaration "import org.jboss.logging.Messages;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.Cause{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.Cause;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.Message{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.Message;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.MessageBundle{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.MessageBundle;" compose:Replacement merge: Default]
									[T -> javax.net.ssl.SSLPeerUnverifiedException{ImportPackage} : ImportDeclaration "import javax.net.ssl.SSLPeerUnverifiedException;" compose:Replacement merge: Default]
									[NT -> UndertowMessages : ClassDeclaration]
										[T -> - : Modifiers "@MessageBundle(projectCode = "UT") public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
										[T -> UndertowMessages : Id "UndertowMessages" compose:Replacement merge: Default]
										[T -> MESSAGES : FieldDecl "UndertowMessages MESSAGES = Messages.getBundle(UndertowMessages.class);" compose:Replacement merge: SemanticConflict]
										[T -> maximumConcurrentRequestsMustBeLargerThanZero({FormalParametersInternal}) : MethodDecl "@Message(id = 1, value = "Maximum concurrent requests must be larger than zero.")     IllegalArgumentException maximumConcurrentRequestsMustBeLargerThanZero();" compose:Replacement merge: LineBased]
										[T -> responseAlreadyStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 2, value = "The response has already been started")     IllegalStateException responseAlreadyStarted();" compose:Replacement merge: LineBased]
										[T -> responseChannelAlreadyProvided({FormalParametersInternal}) : MethodDecl "@Message(id = 4, value = "getResponseChannel() has already been called")     IllegalStateException responseChannelAlreadyProvided();" compose:Replacement merge: LineBased]
										[T -> requestChannelAlreadyProvided({FormalParametersInternal}) : MethodDecl "@Message(id = 5, value = "getRequestChannel() has already been called")     IllegalStateException requestChannelAlreadyProvided();" compose:Replacement merge: LineBased]
										[T -> handlerCannotBeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 8, value = "Handler cannot be null")     IllegalArgumentException handlerCannotBeNull();" compose:Replacement merge: LineBased]
										[T -> pathMustBeSpecified({FormalParametersInternal}) : MethodDecl "@Message(id = 9, value = "Path must be specified")     IllegalArgumentException pathMustBeSpecified();" compose:Replacement merge: LineBased]
										[T -> sessionNotFound(String-String) : MethodDecl "@Message(id = 10, value = "Session not found %s")     IllegalStateException sessionNotFound(final String session);" compose:Replacement merge: LineBased]
										[T -> sessionManagerMustNotBeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 11, value = "Session manager must not be null")     IllegalStateException sessionManagerMustNotBeNull();" compose:Replacement merge: LineBased]
										[T -> sessionManagerNotFound({FormalParametersInternal}) : MethodDecl "@Message(id = 12, value = "Session manager was not attached to the request. Make sure that the SessionAttachmentHandler is installed in the handler chain")     IllegalStateException sessionManagerNotFound();" compose:Replacement merge: LineBased]
										[T -> argumentCannotBeNull(String-String) : MethodDecl "@Message(id = 13, value = "Argument %s cannot be null")     IllegalArgumentException argumentCannotBeNull(final String argument);" compose:Replacement merge: LineBased]
										[T -> closeCalledWithDataStillToBeFlushed({FormalParametersInternal}) : MethodDecl "@Message(id = 14, value = "close() called with data still to be flushed. Please call shutdownWrites() and then call flush() until it returns true before calling close()")     IOException closeCalledWithDataStillToBeFlushed();" compose:Replacement merge: LineBased]
										[T -> cookieHandlerNotPresent({FormalParametersInternal}) : MethodDecl "@Message(id = 16, value = "Could not add cookie as cookie handler was not present in the handler chain")     IllegalStateException cookieHandlerNotPresent();" compose:Replacement merge: LineBased]
										[T -> formValueIsAFile({FormalParametersInternal}) : MethodDecl "@Message(id = 17, value = "Form value is a file, use getFile() instead")     IllegalStateException formValueIsAFile();" compose:Replacement merge: LineBased]
										[T -> formValueIsAString({FormalParametersInternal}) : MethodDecl "@Message(id = 18, value = "Form value is a String, use getValue() instead")     IllegalStateException formValueIsAString();" compose:Replacement merge: LineBased]
										[T -> requestEntityWasTooLarge(SocketAddress-SocketAddress-long-long) : MethodDecl "@Message(id = 19, value = "Connection from %s terminated as request entity was larger than %s")     IOException requestEntityWasTooLarge(SocketAddress address, long size);" compose:Replacement merge: LineBased]
										[T -> requestEntityWasTooLarge(long-long) : MethodDecl "@Message(id = 20, value = "Connection terminated as request was larger than %s")     IOException requestEntityWasTooLarge(long size);" compose:Replacement merge: LineBased]
										[T -> sessionAlreadyInvalidated({FormalParametersInternal}) : MethodDecl "@Message(id = 21, value = "Session already invalidated")     IllegalStateException sessionAlreadyInvalidated();" compose:Replacement merge: LineBased]
										[T -> hashAlgorithmNotFound(String-String) : MethodDecl "@Message(id = 22, value = "The specified hash algorithm '%s' can not be found.")     IllegalArgumentException hashAlgorithmNotFound(String algorithmName);" compose:Replacement merge: LineBased]
										[T -> invalidBase64Token(IOException-IOException) : MethodDecl "@Message(id = 23, value = "An invalid Base64 token has been received.")     IllegalArgumentException invalidBase64Token(@Cause final IOException cause);" compose:Replacement merge: LineBased]
										[T -> invalidNonceReceived({FormalParametersInternal}) : MethodDecl "@Message(id = 24, value = "An invalidly formatted nonce has been received.")     IllegalArgumentException invalidNonceReceived();" compose:Replacement merge: LineBased]
										[T -> unexpectedTokenInHeader(String-String) : MethodDecl "@Message(id = 25, value = "Unexpected token '%s' within header.")     IllegalArgumentException unexpectedTokenInHeader(final String name);" compose:Replacement merge: LineBased]
										[T -> invalidHeader({FormalParametersInternal}) : MethodDecl "@Message(id = 26, value = "Invalid header received.")     IllegalArgumentException invalidHeader();" compose:Replacement merge: LineBased]
										[T -> couldNotFindSessionCookieConfig({FormalParametersInternal}) : MethodDecl "@Message(id = 27, value = "Could not find session cookie config in the request")     IllegalStateException couldNotFindSessionCookieConfig();" compose:Replacement merge: LineBased]
										[T -> sessionAlreadyExists(String-String) : MethodDecl "@Message(id = 28, value = "Session %s already exists")     IllegalStateException sessionAlreadyExists(final String id);" compose:Replacement merge: LineBased]
										[T -> chunkedChannelClosedMidChunk({FormalParametersInternal}) : MethodDecl "@Message(id = 29, value = "Channel was closed mid chunk, if you have attempted to write chunked data you cannot shutdown the channel until after it has all been written.")     IOException chunkedChannelClosedMidChunk();" compose:Replacement merge: LineBased]
										[T -> userAuthenticated(String-String) : MethodDecl "@Message(id = 30, value = "User %s successfully authenticated.")     String userAuthenticated(final String userName);" compose:Replacement merge: LineBased]
										[T -> userLoggedOut(String-String) : MethodDecl "@Message(id = 31, value = "User %s has logged out.")     String userLoggedOut(final String userName);" compose:Replacement merge: LineBased]
										[T -> authTypeCannotBeCombined(String-String-String-String) : MethodDecl "@Message(id = 33, value = "Authentication type %s cannot be combined with %s")     IllegalStateException authTypeCannotBeCombined(String type, String existing);" compose:Replacement merge: LineBased]
										[T -> streamIsClosed({FormalParametersInternal}) : MethodDecl "@Message(id = 34, value = "Stream is closed")     IOException streamIsClosed();" compose:Replacement merge: LineBased]
										[T -> startBlockingHasNotBeenCalled({FormalParametersInternal}) : MethodDecl "@Message(id = 35, value = "Cannot get stream as startBlocking has not been invoked")     IllegalStateException startBlockingHasNotBeenCalled();" compose:Replacement merge: LineBased]
										[T -> connectionTerminatedReadingMultiPartData({FormalParametersInternal}) : MethodDecl "@Message(id = 36, value = "Connection terminated parsing multipart data")     IOException connectionTerminatedReadingMultiPartData();" compose:Replacement merge: LineBased]
										[T -> failedToParsePath({FormalParametersInternal}) : MethodDecl "@Message(id = 37, value = "Failed to parse path in HTTP request")     RuntimeException failedToParsePath();" compose:Replacement merge: LineBased]
										[T -> authenticationFailed(String-String) : MethodDecl "@Message(id = 38, value = "Authentication failed, requested user name '%s'")     String authenticationFailed(final String userName);" compose:Replacement merge: LineBased]
										[T -> tooManyQueryParameters(int-int) : MethodDecl "@Message(id = 39, value = "To many query parameters, cannot have more than %s query parameters")     RuntimeException tooManyQueryParameters(int noParams);" compose:Replacement merge: LineBased]
										[T -> tooManyHeaders(int-int) : MethodDecl "@Message(id = 40, value = "To many headers, cannot have more than %s header")     RuntimeException tooManyHeaders(int noParams);" compose:Replacement merge: LineBased]
										[T -> channelIsClosed({FormalParametersInternal}) : MethodDecl "@Message(id = 41, value = "Channel is closed")     ClosedChannelException channelIsClosed();" compose:Replacement merge: LineBased]
										[T -> couldNotDecodeTrailers({FormalParametersInternal}) : MethodDecl "@Message(id = 42, value = "Could not decode trailers in HTTP request")     IOException couldNotDecodeTrailers();" compose:Replacement merge: LineBased]
										[T -> dataAlreadyQueued({FormalParametersInternal}) : MethodDecl "@Message(id = 43, value = "Data is already being sent. You must wait for the completion callback to be be invoked before calling send() again")     IllegalStateException dataAlreadyQueued();" compose:Replacement merge: LineBased]
										[T -> moreThanOnePredicateWithName(String-String-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>) : MethodDecl "@Message(id = 44, value = "More than one predicate with name %s. Builder class %s and %s")     IllegalStateException moreThanOnePredicateWithName(String name, Class<? extends PredicateBuilder> aClass, Class<? extends PredicateBuilder> existing);" compose:Replacement merge: LineBased]
										[T -> errorParsingPredicateString(String-String-String-String) : MethodDecl "@Message(id = 45, value = "Error parsing predicated handler string %s:%n%s")     IllegalArgumentException errorParsingPredicateString(String reason, String s);" compose:Replacement merge: LineBased]
										[T -> tooManyCookies(int-int) : MethodDecl "@Message(id = 46, value = "The number of cookies sent exceeded the maximum of %s")     IllegalStateException tooManyCookies(int maxCookies);" compose:Replacement merge: LineBased]
										[T -> tooManyParameters(int-int) : MethodDecl "@Message(id = 47, value = "The number of parameters exceeded the maximum of %s")     IllegalStateException tooManyParameters(int maxValues);" compose:Replacement merge: LineBased]
										[T -> noRequestActive({FormalParametersInternal}) : MethodDecl "@Message(id = 48, value = "No request is currently active")     IllegalStateException noRequestActive();" compose:Replacement merge: LineBased]
										[T -> authMechanismOutcomeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 50, value = "AuthenticationMechanism Outcome is null")     IllegalStateException authMechanismOutcomeNull();" compose:Replacement merge: LineBased]
										[T -> notAValidIpPattern(String-String) : MethodDecl "@Message(id = 51, value = "Not a valid IP pattern %s")     IllegalArgumentException notAValidIpPattern(String peer);" compose:Replacement merge: LineBased]
										[T -> noSessionData({FormalParametersInternal}) : MethodDecl "@Message(id = 52, value = "Session data requested when non session based authentication in use")     IllegalStateException noSessionData();" compose:Replacement merge: LineBased]
										[T -> listenerAlreadyRegistered(String-String) : MethodDecl "@Message(id = 53, value = "Listener %s already registered")     IllegalArgumentException listenerAlreadyRegistered(String name);" compose:Replacement merge: LineBased]
										[T -> maxFileSizeExceeded(long-long) : MethodDecl "@Message(id = 54, value = "The maximum size %s for an individual file in a multipart request was exceeded")     IOException maxFileSizeExceeded(long maxIndividualFileSize);" compose:Replacement merge: LineBased]
										[T -> couldNotSetAttribute(String-String-String-String) : MethodDecl "@Message(id = 55, value = "Could not set attribute %s to %s as it is read only")     String couldNotSetAttribute(String attributeName, String newValue);" compose:Replacement merge: LineBased]
										[T -> couldNotParseUriTemplate(String-String-int-int) : MethodDecl "@Message(id = 56, value = "Could not parse URI template %s, exception at char %s")     RuntimeException couldNotParseUriTemplate(String path, int i);" compose:Replacement merge: LineBased]
										[T -> mismatchedBraces(String-String) : MethodDecl "@Message(id = 57, value = "Mismatched braces in attribute string %s")     RuntimeException mismatchedBraces(String valueString);" compose:Replacement merge: LineBased]
										[T -> moreThanOneHandlerWithName(String-String-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>) : MethodDecl "@Message(id = 58, value = "More than one handler with name %s. Builder class %s and %s")     IllegalStateException moreThanOneHandlerWithName(String name, Class<? extends HandlerBuilder> aClass, Class<? extends HandlerBuilder> existing);" compose:Replacement merge: LineBased]
										[T -> invalidSyntax(String-String) : MethodDecl "@Message(id = 59, value = "Invalid syntax %s")     IllegalArgumentException invalidSyntax(String line);" compose:Replacement merge: LineBased]
										[T -> errorParsingHandlerString(String-String-String-String) : MethodDecl "@Message(id = 60, value = "Error parsing handler string %s:%n%s")     IllegalArgumentException errorParsingHandlerString(String reason, String s);" compose:Replacement merge: LineBased]
										[T -> outOfBandResponseOnlyAllowedFor100Continue({FormalParametersInternal}) : MethodDecl "@Message(id = 61, value = "Out of band responses only allowed for 100-continue requests")     IllegalArgumentException outOfBandResponseOnlyAllowedFor100Continue();" compose:Replacement merge: LineBased]
										[T -> ajpDoesNotSupportHTTPUpgrade({FormalParametersInternal}) : MethodDecl "@Message(id = 62, value = "AJP does not support HTTP upgrade")     IllegalStateException ajpDoesNotSupportHTTPUpgrade();" compose:Replacement merge: LineBased]
										[T -> fileSystemWatcherAlreadyStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 63, value = "File system watcher already started")     IllegalStateException fileSystemWatcherAlreadyStarted();" compose:Replacement merge: LineBased]
										[T -> fileSystemWatcherNotStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 64, value = "File system watcher not started")     IllegalStateException fileSystemWatcherNotStarted();" compose:Replacement merge: LineBased]
										[T -> sslWasNull({FormalParametersInternal}) : MethodDecl "@Message(id = 65, value = "SSL must be specified to connect to a https URL")     IOException sslWasNull();" compose:Replacement merge: LineBased]
										[T -> wrongMagicNumber(int-int) : MethodDecl "@Message(id = 66, value = "Incorrect magic number %s for AJP packet header")     IOException wrongMagicNumber(int number);" compose:Replacement merge: LineBased]
										[T -> peerUnverified({FormalParametersInternal}) : MethodDecl "@Message(id = 67, value = "No client cert was provided")     SSLPeerUnverifiedException peerUnverified();" compose:Replacement merge: LineBased]
										[T -> servletPathMatchFailed({FormalParametersInternal}) : MethodDecl "@Message(id = 68, value = "Servlet path match failed")     IllegalArgumentException servletPathMatchFailed();" compose:Replacement merge: LineBased]
										[T -> couldNotParseCookie(String-String) : MethodDecl "@Message(id = 69, value = "Could not parse set cookie header %s")     IllegalArgumentException couldNotParseCookie(String headerValue);" compose:Replacement merge: LineBased]
										[T -> canOnlyBeCalledByIoThread({FormalParametersInternal}) : MethodDecl "@Message(id = 70, value = "method can only be called by IO thread")     IllegalStateException canOnlyBeCalledByIoThread();" compose:Replacement merge: LineBased]
										[T -> matcherAlreadyContainsTemplate(String-String-String-String) : MethodDecl "@Message(id = 71, value = "Cannot add path template %s, matcher already contains an equivalent pattern %s")     IllegalStateException matcherAlreadyContainsTemplate(String templateString, String templateString1);" compose:Replacement merge: LineBased]
										[T -> failedToDecodeURL(String-String-String-String-Exception-Exception) : MethodDecl "@Message(id = 72, value = "Failed to decode url %s to charset %s")     IllegalArgumentException failedToDecodeURL(String s, String enc, @Cause Exception e);" compose:Replacement merge: LineBased]
										[T -> resourceChangeListenerNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 73, value = "Resource change listeners are not supported")     IllegalArgumentException resourceChangeListenerNotSupported();" compose:Replacement merge: LineBased]
										[T -> couldNotRenegotiate({FormalParametersInternal}) : MethodDecl "@Message(id = 74, value = "Could not renegotiate SSL connection to require client certificate, as client had sent more data")     IllegalStateException couldNotRenegotiate();" compose:Replacement merge: LineBased]
										[T -> objectWasFreed({FormalParametersInternal}) : MethodDecl "@Message(id = 75, value = "Object was freed")     IllegalStateException objectWasFreed();" compose:Replacement merge: LineBased]
										[T -> handlerNotShutdown({FormalParametersInternal}) : MethodDecl "@Message(id = 76, value = "Handler not shutdown")     IllegalStateException handlerNotShutdown();" compose:Replacement merge: LineBased]
										[T -> upgradeNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 77, value = "The underlying transport does not support HTTP upgrade")     IllegalStateException upgradeNotSupported();" compose:Replacement merge: LineBased]
										[T -> renegotiationNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 78, value = "Renegotiation not supported")     IOException renegotiationNotSupported();" compose:Replacement merge: LineBased]
										[T -> notAValidUserAgentPattern(String-String) : MethodDecl "@Message(id = 79, value = "Not a valid user agent pattern %s")     IllegalArgumentException notAValidUserAgentPattern(String userAgent);" compose:Replacement merge: LineBased]
										[T -> notAValidRegularExpressionPattern(String-String) : MethodDecl "@Message(id = 80, value = "Not a valid regular expression pattern %s")     IllegalArgumentException notAValidRegularExpressionPattern(String pattern);" compose:Replacement merge: LineBased]
										[T -> badRequest({FormalParametersInternal}) : MethodDecl "@Message(id = 81, value = "Bad request")     RuntimeException badRequest();" compose:Replacement merge: LineBased]
										[T -> hostAlreadyRegistered(Object-Object) : MethodDecl "@Message(id = 82, value = "Host %s already registered")     RuntimeException hostAlreadyRegistered(Object host);" compose:Replacement merge: LineBased]
										[T -> hostHasNotBeenRegistered(Object-Object) : MethodDecl "@Message(id = 83, value = "Host %s has not been registered")     RuntimeException hostHasNotBeenRegistered(Object host);" compose:Replacement merge: LineBased]
										[T -> extraDataWrittenAfterChunkEnd({FormalParametersInternal}) : MethodDecl "@Message(id = 84, value = "Attempted to write additional data after the last chunk")     IOException extraDataWrittenAfterChunkEnd();" compose:Replacement merge: LineBased]
										[T -> couldNotGenerateUniqueSessionId({FormalParametersInternal}) : MethodDecl "@Message(id = 85, value = "Could not generate unique session id")     RuntimeException couldNotGenerateUniqueSessionId();" compose:Replacement merge: LineBased]
										[T -> mustProvideHeapBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 86, value = "SPDY needs to be provided with a heap buffer pool, for use in compressing and decompressing headers.")     IllegalArgumentException mustProvideHeapBuffer();" compose:Replacement merge: LineBased]
										[T -> unexpectedFrameType(int-int) : MethodDecl "@Message(id = 87, value = "Unexpected SPDY frame type %s")     IOException unexpectedFrameType(int type);" compose:Replacement merge: LineBased]
										[T -> controlFrameCannotHaveBodyContent({FormalParametersInternal}) : MethodDecl "@Message(id = 88, value = "SPDY control frames cannot have body content")     IOException controlFrameCannotHaveBodyContent();" compose:Replacement merge: LineBased]
										[T -> spdyNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 89, value = "SPDY not supported")     IOException spdyNotSupported();" compose:Replacement merge: LineBased]
										[T -> jettyNPNNotAvailable({FormalParametersInternal}) : MethodDecl "@Message(id = 90, value = "Jetty NPN not available")     IOException jettyNPNNotAvailable();" compose:Replacement merge: LineBased]
										[T -> bufferAlreadyFreed({FormalParametersInternal}) : MethodDecl "@Message(id = 91, value = "Buffer has already been freed")     IllegalStateException bufferAlreadyFreed();" compose:Replacement merge: LineBased]
										[T -> headersTooLargeToFitInHeapBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 92, value = "A SPDY header was too large to fit in a response buffer, if you want to support larger headers please increase the buffer size")     IllegalStateException headersTooLargeToFitInHeapBuffer();" compose:Replacement merge: LineBased]
										[T -> spdyStreamWasReset({FormalParametersInternal}) : MethodDecl "@Message(id = 93, value = "A SPDY stream was reset by the remote endpoint")     IOException spdyStreamWasReset();" compose:Replacement merge: LineBased]
										[T -> awaitCalledFromIoThread({FormalParametersInternal}) : MethodDecl "@Message(id = 94, value = "Blocking await method called from IO thread. Blocking IO must be dispatched to a worker thread or deadlocks will result.")     IOException awaitCalledFromIoThread();" compose:Replacement merge: LineBased]
										[T -> recursiveCallToFlushingSenders({FormalParametersInternal}) : MethodDecl "@Message(id = 95, value = "Recursive call to flushSenders()")     RuntimeException recursiveCallToFlushingSenders();" compose:Replacement merge: LineBased]
										[T -> fixedLengthOverflow({FormalParametersInternal}) : MethodDecl "@Message(id = 96, value = "More data was written to the channel than specified in the content-length")     IllegalStateException fixedLengthOverflow();" compose:Replacement merge: LineBased]
										[T -> ajpRequestAlreadyInProgress({FormalParametersInternal}) : MethodDecl "@Message(id = 97, value = "AJP request already in progress")     IllegalStateException ajpRequestAlreadyInProgress();" compose:Replacement merge: LineBased]
										[T -> httpPingDataMustBeLength8({FormalParametersInternal}) : MethodDecl "@Message(id = 98, value = "HTTP ping data must be 8 bytes in length")     String httpPingDataMustBeLength8();" compose:Replacement merge: LineBased]
										[T -> invalidPingSize({FormalParametersInternal}) : MethodDecl "@Message(id = 99, value = "Received a ping of size other than 8")     String invalidPingSize();" compose:Replacement merge: LineBased]
										[T -> streamIdMustBeZeroForFrameType(int-int) : MethodDecl "@Message(id = 100, value = "stream id must be zero for frame type %s")     String streamIdMustBeZeroForFrameType(int frameType);" compose:Replacement merge: LineBased]
										[T -> streamIdMustNotBeZeroForFrameType(int-int) : MethodDecl "@Message(id = 101, value = "stream id must not be zero for frame type %s")     String streamIdMustNotBeZeroForFrameType(int frameType);" compose:Replacement merge: LineBased]
										[T -> rstStreamReceivedForIdleStream({FormalParametersInternal}) : MethodDecl "@Message(id = 102, value = "RST_STREAM received for idle stream")     String rstStreamReceivedForIdleStream();" compose:Replacement merge: LineBased]
										[T -> http2StreamWasReset({FormalParametersInternal}) : MethodDecl "@Message(id = 103, value = "Http2 stream was reset")     IOException http2StreamWasReset();" compose:Replacement merge: LineBased]
										[T -> incorrectHttp2Preface({FormalParametersInternal}) : MethodDecl "@Message(id = 104, value = "Incorrect HTTP2 preface")     IOException incorrectHttp2Preface();" compose:Replacement merge: LineBased]
										[T -> http2FrameTooLarge({FormalParametersInternal}) : MethodDecl "@Message(id = 105, value = "HTTP2 frame to large")     IOException http2FrameTooLarge();" compose:Replacement merge: LineBased]
										[T -> http2ContinuationFrameNotExpected({FormalParametersInternal}) : MethodDecl "@Message(id = 106, value = "HTTP2 continuation frame received without a corresponding headers or push promise frame")     IOException http2ContinuationFrameNotExpected();" compose:Replacement merge: LineBased]
										[T -> huffmanEncodedHpackValueDidNotEndWithEOS({FormalParametersInternal}) : MethodDecl "@Message(id = 107, value = "Huffman encoded value in HPACK headers did not end with EOS padding")     HpackException huffmanEncodedHpackValueDidNotEndWithEOS();" compose:Replacement merge: LineBased]
										[T -> integerEncodedOverTooManyOctets(int-int) : MethodDecl "@Message(id = 108, value = "HPACK variable length integer encoded over too many octects, max is %s")     HpackException integerEncodedOverTooManyOctets(int maxIntegerOctets);" compose:Replacement merge: LineBased]
										[T -> zeroNotValidHeaderTableIndex({FormalParametersInternal}) : MethodDecl "@Message(id = 109, value = "Zero is not a valid header table index")     HpackException zeroNotValidHeaderTableIndex();" compose:Replacement merge: LineBased]
										[T -> cannotSendContinueResponse({FormalParametersInternal}) : MethodDecl "@Message(id = 110, value = "Cannot send 100-Continue, getResponseChannel() has already been called")     IOException cannotSendContinueResponse();" compose:Replacement merge: LineBased]
										[T -> parserDidNotMakeProgress({FormalParametersInternal}) : MethodDecl "@Message(id = 111, value = "Parser did not make progress")     IOException parserDidNotMakeProgress();" compose:Replacement merge: LineBased]
										[T -> headersStreamCanOnlyBeCreatedByClient({FormalParametersInternal}) : MethodDecl "@Message(id = 112, value = "Only client side can call createStream, if you wish to send a PUSH_PROMISE frame use createPushPromiseStream instead")     IOException headersStreamCanOnlyBeCreatedByClient();" compose:Replacement merge: LineBased]
										[T -> pushPromiseCanOnlyBeCreatedByServer({FormalParametersInternal}) : MethodDecl "@Message(id = 113, value = "Only the server side can send a push promise stream")     IOException pushPromiseCanOnlyBeCreatedByServer();" compose:Replacement merge: LineBased]
										[T -> invalidAclRule(String-String) : MethodDecl "@Message(id = 114, value = "Invalid IP access control rule %s. Format is: [ip-match] allow|deny")     IllegalArgumentException invalidAclRule(String rule);" compose:Replacement merge: LineBased]
										[T -> serverReceivedPushPromise({FormalParametersInternal}) : MethodDecl "@Message(id = 115, value = "Server received PUSH_PROMISE frame from client")     IOException serverReceivedPushPromise();" compose:Replacement merge: LineBased]
										[T -> connectNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 116, value = "CONNECT not supported by this connector")     IllegalStateException connectNotSupported();" compose:Replacement merge: LineBased]
										[T -> notAConnectRequest({FormalParametersInternal}) : MethodDecl "@Message(id = 117, value = "Request was not a CONNECT request")     IllegalStateException notAConnectRequest();" compose:Replacement merge: LineBased]
										[T -> cannotResetBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 118, value = "Cannot reset buffer, response has already been commited")     IllegalStateException cannotResetBuffer();" compose:Replacement merge: LineBased]
										[T -> http2PriRequestFailed({FormalParametersInternal}) : MethodDecl "@Message(id = 119, value = "HTTP2 via prior knowledge failed")     IOException http2PriRequestFailed();" compose:Replacement merge: LineBased]
										[T -> outOfBandResponseNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 120, value = "Out of band responses are not allowed for this connector")     IllegalStateException outOfBandResponseNotSupported();" compose:Replacement merge: LineBased]
										[T -> tooManySessions(int-int) : MethodDecl "@Message(id = 121, value = "Session was rejected as the maximum number of sessions (%s) has been hit")     IllegalStateException tooManySessions(int maxSessions);" compose:Replacement merge: LineBased]
										[T -> proxyConnectionFailed(int-int) : MethodDecl "@Message(id = 122, value = "CONNECT attempt failed as target proxy returned %s")     IOException proxyConnectionFailed(int responseCode);" compose:Replacement merge: LineBased]
										[T -> mcmpMessageRejectedDueToSuspiciousCharacters(String-String) : MethodDecl "@Message(id = 123, value = "MCMP message %s rejected due to suspicious characters")     RuntimeException mcmpMessageRejectedDueToSuspiciousCharacters(String data);" compose:Replacement merge: LineBased]
										[T -> rengotiationTimedOut({FormalParametersInternal}) : MethodDecl "@Message(id = 124, value = "renegotiation timed out")     IllegalStateException rengotiationTimedOut();" compose:Replacement merge: LineBased]
										[T -> requestBodyAlreadyRead({FormalParametersInternal}) : MethodDecl "@Message(id = 125, value = "Request body already read")     IllegalStateException requestBodyAlreadyRead();" compose:Replacement merge: LineBased]
										[T -> blockingIoFromIOThread({FormalParametersInternal}) : MethodDecl "@Message(id = 126, value = "Attempted to do blocking IO from the IO thread. This is prohibited as it may result in deadlocks")     IllegalStateException blockingIoFromIOThread();" compose:Replacement merge: LineBased]
										[T -> responseComplete({FormalParametersInternal}) : MethodDecl "@Message(id = 127, value = "Response has already been sent")     IllegalStateException responseComplete();" compose:Replacement merge: LineBased]
										[T -> couldNotReadContentLengthData({FormalParametersInternal}) : MethodDecl "@Message(id = 128, value = "Remote peer closed connection before all data could be read")     IOException couldNotReadContentLengthData();" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> io : Folder]
						[NT -> undertow : Folder]
							[NT -> UndertowMessages.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package io.undertow;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.net.SocketAddress{ImportPackage} : ImportDeclaration "import java.net.SocketAddress;" compose:Replacement merge: Default]
									[T -> java.nio.channels.ClosedChannelException{ImportPackage} : ImportDeclaration "import java.nio.channels.ClosedChannelException;" compose:Replacement merge: Default]
									[T -> io.undertow.predicate.PredicateBuilder{ImportPackage} : ImportDeclaration "import io.undertow.predicate.PredicateBuilder;" compose:Replacement merge: Default]
									[T -> io.undertow.protocols.http2.HpackException{ImportPackage} : ImportDeclaration "import io.undertow.protocols.http2.HpackException;" compose:Replacement merge: Default]
									[T -> io.undertow.server.handlers.builder.HandlerBuilder{ImportPackage} : ImportDeclaration "import io.undertow.server.handlers.builder.HandlerBuilder;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.Messages{ImportPackage} : ImportDeclaration "import org.jboss.logging.Messages;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.Cause{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.Cause;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.Message{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.Message;" compose:Replacement merge: Default]
									[T -> org.jboss.logging.annotations.MessageBundle{ImportPackage} : ImportDeclaration "import org.jboss.logging.annotations.MessageBundle;" compose:Replacement merge: Default]
									[T -> javax.net.ssl.SSLPeerUnverifiedException{ImportPackage} : ImportDeclaration "import javax.net.ssl.SSLPeerUnverifiedException;" compose:Replacement merge: Default]
									[NT -> UndertowMessages : ClassDeclaration]
										[T -> - : Modifiers "@MessageBundle(projectCode = "UT") public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
										[T -> UndertowMessages : Id "UndertowMessages" compose:Replacement merge: Default]
										[T -> MESSAGES : FieldDecl "UndertowMessages MESSAGES = Messages.getBundle(UndertowMessages.class);" compose:Replacement merge: SemanticConflict]
										[T -> maximumConcurrentRequestsMustBeLargerThanZero({FormalParametersInternal}) : MethodDecl "@Message(id = 1, value = "Maximum concurrent requests must be larger than zero.")     IllegalArgumentException maximumConcurrentRequestsMustBeLargerThanZero();" compose:Replacement merge: LineBased]
										[T -> responseAlreadyStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 2, value = "The response has already been started")     IllegalStateException responseAlreadyStarted();" compose:Replacement merge: LineBased]
										[T -> responseChannelAlreadyProvided({FormalParametersInternal}) : MethodDecl "@Message(id = 4, value = "getResponseChannel() has already been called")     IllegalStateException responseChannelAlreadyProvided();" compose:Replacement merge: LineBased]
										[T -> requestChannelAlreadyProvided({FormalParametersInternal}) : MethodDecl "@Message(id = 5, value = "getRequestChannel() has already been called")     IllegalStateException requestChannelAlreadyProvided();" compose:Replacement merge: LineBased]
										[T -> handlerCannotBeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 8, value = "Handler cannot be null")     IllegalArgumentException handlerCannotBeNull();" compose:Replacement merge: LineBased]
										[T -> pathMustBeSpecified({FormalParametersInternal}) : MethodDecl "@Message(id = 9, value = "Path must be specified")     IllegalArgumentException pathMustBeSpecified();" compose:Replacement merge: LineBased]
										[T -> sessionNotFound(String-String) : MethodDecl "@Message(id = 10, value = "Session not found %s")     IllegalStateException sessionNotFound(final String session);" compose:Replacement merge: LineBased]
										[T -> sessionManagerMustNotBeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 11, value = "Session manager must not be null")     IllegalStateException sessionManagerMustNotBeNull();" compose:Replacement merge: LineBased]
										[T -> sessionManagerNotFound({FormalParametersInternal}) : MethodDecl "@Message(id = 12, value = "Session manager was not attached to the request. Make sure that the SessionAttachmentHandler is installed in the handler chain")     IllegalStateException sessionManagerNotFound();" compose:Replacement merge: LineBased]
										[T -> argumentCannotBeNull(String-String) : MethodDecl "@Message(id = 13, value = "Argument %s cannot be null")     IllegalArgumentException argumentCannotBeNull(final String argument);" compose:Replacement merge: LineBased]
										[T -> closeCalledWithDataStillToBeFlushed({FormalParametersInternal}) : MethodDecl "@Message(id = 14, value = "close() called with data still to be flushed. Please call shutdownWrites() and then call flush() until it returns true before calling close()")     IOException closeCalledWithDataStillToBeFlushed();" compose:Replacement merge: LineBased]
										[T -> cookieHandlerNotPresent({FormalParametersInternal}) : MethodDecl "@Message(id = 16, value = "Could not add cookie as cookie handler was not present in the handler chain")     IllegalStateException cookieHandlerNotPresent();" compose:Replacement merge: LineBased]
										[T -> formValueIsAFile({FormalParametersInternal}) : MethodDecl "@Message(id = 17, value = "Form value is a file, use getFile() instead")     IllegalStateException formValueIsAFile();" compose:Replacement merge: LineBased]
										[T -> formValueIsAString({FormalParametersInternal}) : MethodDecl "@Message(id = 18, value = "Form value is a String, use getValue() instead")     IllegalStateException formValueIsAString();" compose:Replacement merge: LineBased]
										[T -> requestEntityWasTooLarge(SocketAddress-SocketAddress-long-long) : MethodDecl "@Message(id = 19, value = "Connection from %s terminated as request entity was larger than %s")     IOException requestEntityWasTooLarge(SocketAddress address, long size);" compose:Replacement merge: LineBased]
										[T -> requestEntityWasTooLarge(long-long) : MethodDecl "@Message(id = 20, value = "Connection terminated as request was larger than %s")     IOException requestEntityWasTooLarge(long size);" compose:Replacement merge: LineBased]
										[T -> sessionAlreadyInvalidated({FormalParametersInternal}) : MethodDecl "@Message(id = 21, value = "Session already invalidated")     IllegalStateException sessionAlreadyInvalidated();" compose:Replacement merge: LineBased]
										[T -> hashAlgorithmNotFound(String-String) : MethodDecl "@Message(id = 22, value = "The specified hash algorithm '%s' can not be found.")     IllegalArgumentException hashAlgorithmNotFound(String algorithmName);" compose:Replacement merge: LineBased]
										[T -> invalidBase64Token(IOException-IOException) : MethodDecl "@Message(id = 23, value = "An invalid Base64 token has been received.")     IllegalArgumentException invalidBase64Token(@Cause final IOException cause);" compose:Replacement merge: LineBased]
										[T -> invalidNonceReceived({FormalParametersInternal}) : MethodDecl "@Message(id = 24, value = "An invalidly formatted nonce has been received.")     IllegalArgumentException invalidNonceReceived();" compose:Replacement merge: LineBased]
										[T -> unexpectedTokenInHeader(String-String) : MethodDecl "@Message(id = 25, value = "Unexpected token '%s' within header.")     IllegalArgumentException unexpectedTokenInHeader(final String name);" compose:Replacement merge: LineBased]
										[T -> invalidHeader({FormalParametersInternal}) : MethodDecl "@Message(id = 26, value = "Invalid header received.")     IllegalArgumentException invalidHeader();" compose:Replacement merge: LineBased]
										[T -> couldNotFindSessionCookieConfig({FormalParametersInternal}) : MethodDecl "@Message(id = 27, value = "Could not find session cookie config in the request")     IllegalStateException couldNotFindSessionCookieConfig();" compose:Replacement merge: LineBased]
										[T -> sessionAlreadyExists(String-String) : MethodDecl "@Message(id = 28, value = "Session %s already exists")     IllegalStateException sessionAlreadyExists(final String id);" compose:Replacement merge: LineBased]
										[T -> chunkedChannelClosedMidChunk({FormalParametersInternal}) : MethodDecl "@Message(id = 29, value = "Channel was closed mid chunk, if you have attempted to write chunked data you cannot shutdown the channel until after it has all been written.")     IOException chunkedChannelClosedMidChunk();" compose:Replacement merge: LineBased]
										[T -> userAuthenticated(String-String) : MethodDecl "@Message(id = 30, value = "User %s successfully authenticated.")     String userAuthenticated(final String userName);" compose:Replacement merge: LineBased]
										[T -> userLoggedOut(String-String) : MethodDecl "@Message(id = 31, value = "User %s has logged out.")     String userLoggedOut(final String userName);" compose:Replacement merge: LineBased]
										[T -> authTypeCannotBeCombined(String-String-String-String) : MethodDecl "@Message(id = 33, value = "Authentication type %s cannot be combined with %s")     IllegalStateException authTypeCannotBeCombined(String type, String existing);" compose:Replacement merge: LineBased]
										[T -> streamIsClosed({FormalParametersInternal}) : MethodDecl "@Message(id = 34, value = "Stream is closed")     IOException streamIsClosed();" compose:Replacement merge: LineBased]
										[T -> startBlockingHasNotBeenCalled({FormalParametersInternal}) : MethodDecl "@Message(id = 35, value = "Cannot get stream as startBlocking has not been invoked")     IllegalStateException startBlockingHasNotBeenCalled();" compose:Replacement merge: LineBased]
										[T -> connectionTerminatedReadingMultiPartData({FormalParametersInternal}) : MethodDecl "@Message(id = 36, value = "Connection terminated parsing multipart data")     IOException connectionTerminatedReadingMultiPartData();" compose:Replacement merge: LineBased]
										[T -> failedToParsePath({FormalParametersInternal}) : MethodDecl "@Message(id = 37, value = "Failed to parse path in HTTP request")     RuntimeException failedToParsePath();" compose:Replacement merge: LineBased]
										[T -> authenticationFailed(String-String) : MethodDecl "@Message(id = 38, value = "Authentication failed, requested user name '%s'")     String authenticationFailed(final String userName);" compose:Replacement merge: LineBased]
										[T -> tooManyQueryParameters(int-int) : MethodDecl "@Message(id = 39, value = "To many query parameters, cannot have more than %s query parameters")     RuntimeException tooManyQueryParameters(int noParams);" compose:Replacement merge: LineBased]
										[T -> tooManyHeaders(int-int) : MethodDecl "@Message(id = 40, value = "To many headers, cannot have more than %s header")     RuntimeException tooManyHeaders(int noParams);" compose:Replacement merge: LineBased]
										[T -> channelIsClosed({FormalParametersInternal}) : MethodDecl "@Message(id = 41, value = "Channel is closed")     ClosedChannelException channelIsClosed();" compose:Replacement merge: LineBased]
										[T -> couldNotDecodeTrailers({FormalParametersInternal}) : MethodDecl "@Message(id = 42, value = "Could not decode trailers in HTTP request")     IOException couldNotDecodeTrailers();" compose:Replacement merge: LineBased]
										[T -> dataAlreadyQueued({FormalParametersInternal}) : MethodDecl "@Message(id = 43, value = "Data is already being sent. You must wait for the completion callback to be be invoked before calling send() again")     IllegalStateException dataAlreadyQueued();" compose:Replacement merge: LineBased]
										[T -> moreThanOnePredicateWithName(String-String-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>-Class<?extendsPredicateBuilder>) : MethodDecl "@Message(id = 44, value = "More than one predicate with name %s. Builder class %s and %s")     IllegalStateException moreThanOnePredicateWithName(String name, Class<? extends PredicateBuilder> aClass, Class<? extends PredicateBuilder> existing);" compose:Replacement merge: LineBased]
										[T -> errorParsingPredicateString(String-String-String-String) : MethodDecl "@Message(id = 45, value = "Error parsing predicated handler string %s:%n%s")     IllegalArgumentException errorParsingPredicateString(String reason, String s);" compose:Replacement merge: LineBased]
										[T -> tooManyCookies(int-int) : MethodDecl "@Message(id = 46, value = "The number of cookies sent exceeded the maximum of %s")     IllegalStateException tooManyCookies(int maxCookies);" compose:Replacement merge: LineBased]
										[T -> tooManyParameters(int-int) : MethodDecl "@Message(id = 47, value = "The number of parameters exceeded the maximum of %s")     IllegalStateException tooManyParameters(int maxValues);" compose:Replacement merge: LineBased]
										[T -> noRequestActive({FormalParametersInternal}) : MethodDecl "@Message(id = 48, value = "No request is currently active")     IllegalStateException noRequestActive();" compose:Replacement merge: LineBased]
										[T -> authMechanismOutcomeNull({FormalParametersInternal}) : MethodDecl "@Message(id = 50, value = "AuthenticationMechanism Outcome is null")     IllegalStateException authMechanismOutcomeNull();" compose:Replacement merge: LineBased]
										[T -> notAValidIpPattern(String-String) : MethodDecl "@Message(id = 51, value = "Not a valid IP pattern %s")     IllegalArgumentException notAValidIpPattern(String peer);" compose:Replacement merge: LineBased]
										[T -> noSessionData({FormalParametersInternal}) : MethodDecl "@Message(id = 52, value = "Session data requested when non session based authentication in use")     IllegalStateException noSessionData();" compose:Replacement merge: LineBased]
										[T -> listenerAlreadyRegistered(String-String) : MethodDecl "@Message(id = 53, value = "Listener %s already registered")     IllegalArgumentException listenerAlreadyRegistered(String name);" compose:Replacement merge: LineBased]
										[T -> maxFileSizeExceeded(long-long) : MethodDecl "@Message(id = 54, value = "The maximum size %s for an individual file in a multipart request was exceeded")     IOException maxFileSizeExceeded(long maxIndividualFileSize);" compose:Replacement merge: LineBased]
										[T -> couldNotSetAttribute(String-String-String-String) : MethodDecl "@Message(id = 55, value = "Could not set attribute %s to %s as it is read only")     String couldNotSetAttribute(String attributeName, String newValue);" compose:Replacement merge: LineBased]
										[T -> couldNotParseUriTemplate(String-String-int-int) : MethodDecl "@Message(id = 56, value = "Could not parse URI template %s, exception at char %s")     RuntimeException couldNotParseUriTemplate(String path, int i);" compose:Replacement merge: LineBased]
										[T -> mismatchedBraces(String-String) : MethodDecl "@Message(id = 57, value = "Mismatched braces in attribute string %s")     RuntimeException mismatchedBraces(String valueString);" compose:Replacement merge: LineBased]
										[T -> moreThanOneHandlerWithName(String-String-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>-Class<?extendsHandlerBuilder>) : MethodDecl "@Message(id = 58, value = "More than one handler with name %s. Builder class %s and %s")     IllegalStateException moreThanOneHandlerWithName(String name, Class<? extends HandlerBuilder> aClass, Class<? extends HandlerBuilder> existing);" compose:Replacement merge: LineBased]
										[T -> invalidSyntax(String-String) : MethodDecl "@Message(id = 59, value = "Invalid syntax %s")     IllegalArgumentException invalidSyntax(String line);" compose:Replacement merge: LineBased]
										[T -> errorParsingHandlerString(String-String-String-String) : MethodDecl "@Message(id = 60, value = "Error parsing handler string %s:%n%s")     IllegalArgumentException errorParsingHandlerString(String reason, String s);" compose:Replacement merge: LineBased]
										[T -> outOfBandResponseOnlyAllowedFor100Continue({FormalParametersInternal}) : MethodDecl "@Message(id = 61, value = "Out of band responses only allowed for 100-continue requests")     IllegalArgumentException outOfBandResponseOnlyAllowedFor100Continue();" compose:Replacement merge: LineBased]
										[T -> ajpDoesNotSupportHTTPUpgrade({FormalParametersInternal}) : MethodDecl "@Message(id = 62, value = "AJP does not support HTTP upgrade")     IllegalStateException ajpDoesNotSupportHTTPUpgrade();" compose:Replacement merge: LineBased]
										[T -> fileSystemWatcherAlreadyStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 63, value = "File system watcher already started")     IllegalStateException fileSystemWatcherAlreadyStarted();" compose:Replacement merge: LineBased]
										[T -> fileSystemWatcherNotStarted({FormalParametersInternal}) : MethodDecl "@Message(id = 64, value = "File system watcher not started")     IllegalStateException fileSystemWatcherNotStarted();" compose:Replacement merge: LineBased]
										[T -> sslWasNull({FormalParametersInternal}) : MethodDecl "@Message(id = 65, value = "SSL must be specified to connect to a https URL")     IOException sslWasNull();" compose:Replacement merge: LineBased]
										[T -> wrongMagicNumber(int-int) : MethodDecl "@Message(id = 66, value = "Incorrect magic number %s for AJP packet header")     IOException wrongMagicNumber(int number);" compose:Replacement merge: LineBased]
										[T -> peerUnverified({FormalParametersInternal}) : MethodDecl "@Message(id = 67, value = "No client cert was provided")     SSLPeerUnverifiedException peerUnverified();" compose:Replacement merge: LineBased]
										[T -> servletPathMatchFailed({FormalParametersInternal}) : MethodDecl "@Message(id = 68, value = "Servlet path match failed")     IllegalArgumentException servletPathMatchFailed();" compose:Replacement merge: LineBased]
										[T -> couldNotParseCookie(String-String) : MethodDecl "@Message(id = 69, value = "Could not parse set cookie header %s")     IllegalArgumentException couldNotParseCookie(String headerValue);" compose:Replacement merge: LineBased]
										[T -> canOnlyBeCalledByIoThread({FormalParametersInternal}) : MethodDecl "@Message(id = 70, value = "method can only be called by IO thread")     IllegalStateException canOnlyBeCalledByIoThread();" compose:Replacement merge: LineBased]
										[T -> matcherAlreadyContainsTemplate(String-String-String-String) : MethodDecl "@Message(id = 71, value = "Cannot add path template %s, matcher already contains an equivalent pattern %s")     IllegalStateException matcherAlreadyContainsTemplate(String templateString, String templateString1);" compose:Replacement merge: LineBased]
										[T -> failedToDecodeURL(String-String-String-String-Exception-Exception) : MethodDecl "@Message(id = 72, value = "Failed to decode url %s to charset %s")     IllegalArgumentException failedToDecodeURL(String s, String enc, @Cause Exception e);" compose:Replacement merge: LineBased]
										[T -> resourceChangeListenerNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 73, value = "Resource change listeners are not supported")     IllegalArgumentException resourceChangeListenerNotSupported();" compose:Replacement merge: LineBased]
										[T -> couldNotRenegotiate({FormalParametersInternal}) : MethodDecl "@Message(id = 74, value = "Could not renegotiate SSL connection to require client certificate, as client had sent more data")     IllegalStateException couldNotRenegotiate();" compose:Replacement merge: LineBased]
										[T -> objectWasFreed({FormalParametersInternal}) : MethodDecl "@Message(id = 75, value = "Object was freed")     IllegalStateException objectWasFreed();" compose:Replacement merge: LineBased]
										[T -> handlerNotShutdown({FormalParametersInternal}) : MethodDecl "@Message(id = 76, value = "Handler not shutdown")     IllegalStateException handlerNotShutdown();" compose:Replacement merge: LineBased]
										[T -> upgradeNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 77, value = "The underlying transport does not support HTTP upgrade")     IllegalStateException upgradeNotSupported();" compose:Replacement merge: LineBased]
										[T -> renegotiationNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 78, value = "Renegotiation not supported")     IOException renegotiationNotSupported();" compose:Replacement merge: LineBased]
										[T -> notAValidUserAgentPattern(String-String) : MethodDecl "@Message(id = 79, value = "Not a valid user agent pattern %s")     IllegalArgumentException notAValidUserAgentPattern(String userAgent);" compose:Replacement merge: LineBased]
										[T -> notAValidRegularExpressionPattern(String-String) : MethodDecl "@Message(id = 80, value = "Not a valid regular expression pattern %s")     IllegalArgumentException notAValidRegularExpressionPattern(String pattern);" compose:Replacement merge: LineBased]
										[T -> badRequest({FormalParametersInternal}) : MethodDecl "@Message(id = 81, value = "Bad request")     RuntimeException badRequest();" compose:Replacement merge: LineBased]
										[T -> hostAlreadyRegistered(Object-Object) : MethodDecl "@Message(id = 82, value = "Host %s already registered")     RuntimeException hostAlreadyRegistered(Object host);" compose:Replacement merge: LineBased]
										[T -> hostHasNotBeenRegistered(Object-Object) : MethodDecl "@Message(id = 83, value = "Host %s has not been registered")     RuntimeException hostHasNotBeenRegistered(Object host);" compose:Replacement merge: LineBased]
										[T -> extraDataWrittenAfterChunkEnd({FormalParametersInternal}) : MethodDecl "@Message(id = 84, value = "Attempted to write additional data after the last chunk")     IOException extraDataWrittenAfterChunkEnd();" compose:Replacement merge: LineBased]
										[T -> couldNotGenerateUniqueSessionId({FormalParametersInternal}) : MethodDecl "@Message(id = 85, value = "Could not generate unique session id")     RuntimeException couldNotGenerateUniqueSessionId();" compose:Replacement merge: LineBased]
										[T -> mustProvideHeapBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 86, value = "SPDY needs to be provided with a heap buffer pool, for use in compressing and decompressing headers.")     IllegalArgumentException mustProvideHeapBuffer();" compose:Replacement merge: LineBased]
										[T -> unexpectedFrameType(int-int) : MethodDecl "@Message(id = 87, value = "Unexpected SPDY frame type %s")     IOException unexpectedFrameType(int type);" compose:Replacement merge: LineBased]
										[T -> controlFrameCannotHaveBodyContent({FormalParametersInternal}) : MethodDecl "@Message(id = 88, value = "SPDY control frames cannot have body content")     IOException controlFrameCannotHaveBodyContent();" compose:Replacement merge: LineBased]
										[T -> spdyNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 89, value = "SPDY not supported")     IOException spdyNotSupported();" compose:Replacement merge: LineBased]
										[T -> jettyNPNNotAvailable({FormalParametersInternal}) : MethodDecl "@Message(id = 90, value = "Jetty NPN not available")     IOException jettyNPNNotAvailable();" compose:Replacement merge: LineBased]
										[T -> bufferAlreadyFreed({FormalParametersInternal}) : MethodDecl "@Message(id = 91, value = "Buffer has already been freed")     IllegalStateException bufferAlreadyFreed();" compose:Replacement merge: LineBased]
										[T -> headersTooLargeToFitInHeapBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 92, value = "A SPDY header was too large to fit in a response buffer, if you want to support larger headers please increase the buffer size")     IllegalStateException headersTooLargeToFitInHeapBuffer();" compose:Replacement merge: LineBased]
										[T -> spdyStreamWasReset({FormalParametersInternal}) : MethodDecl "@Message(id = 93, value = "A SPDY stream was reset by the remote endpoint")     IOException spdyStreamWasReset();" compose:Replacement merge: LineBased]
										[T -> awaitCalledFromIoThread({FormalParametersInternal}) : MethodDecl "@Message(id = 94, value = "Blocking await method called from IO thread. Blocking IO must be dispatched to a worker thread or deadlocks will result.")     IOException awaitCalledFromIoThread();" compose:Replacement merge: LineBased]
										[T -> recursiveCallToFlushingSenders({FormalParametersInternal}) : MethodDecl "@Message(id = 95, value = "Recursive call to flushSenders()")     RuntimeException recursiveCallToFlushingSenders();" compose:Replacement merge: LineBased]
										[T -> fixedLengthOverflow({FormalParametersInternal}) : MethodDecl "@Message(id = 96, value = "More data was written to the channel than specified in the content-length")     IllegalStateException fixedLengthOverflow();" compose:Replacement merge: LineBased]
										[T -> ajpRequestAlreadyInProgress({FormalParametersInternal}) : MethodDecl "@Message(id = 97, value = "AJP request already in progress")     IllegalStateException ajpRequestAlreadyInProgress();" compose:Replacement merge: LineBased]
										[T -> httpPingDataMustBeLength8({FormalParametersInternal}) : MethodDecl "@Message(id = 98, value = "HTTP ping data must be 8 bytes in length")     String httpPingDataMustBeLength8();" compose:Replacement merge: LineBased]
										[T -> invalidPingSize({FormalParametersInternal}) : MethodDecl "@Message(id = 99, value = "Received a ping of size other than 8")     String invalidPingSize();" compose:Replacement merge: LineBased]
										[T -> streamIdMustBeZeroForFrameType(int-int) : MethodDecl "@Message(id = 100, value = "stream id must be zero for frame type %s")     String streamIdMustBeZeroForFrameType(int frameType);" compose:Replacement merge: LineBased]
										[T -> streamIdMustNotBeZeroForFrameType(int-int) : MethodDecl "@Message(id = 101, value = "stream id must not be zero for frame type %s")     String streamIdMustNotBeZeroForFrameType(int frameType);" compose:Replacement merge: LineBased]
										[T -> rstStreamReceivedForIdleStream({FormalParametersInternal}) : MethodDecl "@Message(id = 102, value = "RST_STREAM received for idle stream")     String rstStreamReceivedForIdleStream();" compose:Replacement merge: LineBased]
										[T -> http2StreamWasReset({FormalParametersInternal}) : MethodDecl "@Message(id = 103, value = "Http2 stream was reset")     IOException http2StreamWasReset();" compose:Replacement merge: LineBased]
										[T -> incorrectHttp2Preface({FormalParametersInternal}) : MethodDecl "@Message(id = 104, value = "Incorrect HTTP2 preface")     IOException incorrectHttp2Preface();" compose:Replacement merge: LineBased]
										[T -> http2FrameTooLarge({FormalParametersInternal}) : MethodDecl "@Message(id = 105, value = "HTTP2 frame to large")     IOException http2FrameTooLarge();" compose:Replacement merge: LineBased]
										[T -> http2ContinuationFrameNotExpected({FormalParametersInternal}) : MethodDecl "@Message(id = 106, value = "HTTP2 continuation frame received without a corresponding headers or push promise frame")     IOException http2ContinuationFrameNotExpected();" compose:Replacement merge: LineBased]
										[T -> huffmanEncodedHpackValueDidNotEndWithEOS({FormalParametersInternal}) : MethodDecl "@Message(id = 107, value = "Huffman encoded value in HPACK headers did not end with EOS padding")     HpackException huffmanEncodedHpackValueDidNotEndWithEOS();" compose:Replacement merge: LineBased]
										[T -> integerEncodedOverTooManyOctets(int-int) : MethodDecl "@Message(id = 108, value = "HPACK variable length integer encoded over too many octects, max is %s")     HpackException integerEncodedOverTooManyOctets(int maxIntegerOctets);" compose:Replacement merge: LineBased]
										[T -> zeroNotValidHeaderTableIndex({FormalParametersInternal}) : MethodDecl "@Message(id = 109, value = "Zero is not a valid header table index")     HpackException zeroNotValidHeaderTableIndex();" compose:Replacement merge: LineBased]
										[T -> cannotSendContinueResponse({FormalParametersInternal}) : MethodDecl "@Message(id = 110, value = "Cannot send 100-Continue, getResponseChannel() has already been called")     IOException cannotSendContinueResponse();" compose:Replacement merge: LineBased]
										[T -> parserDidNotMakeProgress({FormalParametersInternal}) : MethodDecl "@Message(id = 111, value = "Parser did not make progress")     IOException parserDidNotMakeProgress();" compose:Replacement merge: LineBased]
										[T -> headersStreamCanOnlyBeCreatedByClient({FormalParametersInternal}) : MethodDecl "@Message(id = 112, value = "Only client side can call createStream, if you wish to send a PUSH_PROMISE frame use createPushPromiseStream instead")     IOException headersStreamCanOnlyBeCreatedByClient();" compose:Replacement merge: LineBased]
										[T -> pushPromiseCanOnlyBeCreatedByServer({FormalParametersInternal}) : MethodDecl "@Message(id = 113, value = "Only the server side can send a push promise stream")     IOException pushPromiseCanOnlyBeCreatedByServer();" compose:Replacement merge: LineBased]
										[T -> invalidAclRule(String-String) : MethodDecl "@Message(id = 114, value = "Invalid IP access control rule %s. Format is: [ip-match] allow|deny")     IllegalArgumentException invalidAclRule(String rule);" compose:Replacement merge: LineBased]
										[T -> serverReceivedPushPromise({FormalParametersInternal}) : MethodDecl "@Message(id = 115, value = "Server received PUSH_PROMISE frame from client")     IOException serverReceivedPushPromise();" compose:Replacement merge: LineBased]
										[T -> connectNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 116, value = "CONNECT not supported by this connector")     IllegalStateException connectNotSupported();" compose:Replacement merge: LineBased]
										[T -> notAConnectRequest({FormalParametersInternal}) : MethodDecl "@Message(id = 117, value = "Request was not a CONNECT request")     IllegalStateException notAConnectRequest();" compose:Replacement merge: LineBased]
										[T -> cannotResetBuffer({FormalParametersInternal}) : MethodDecl "@Message(id = 118, value = "Cannot reset buffer, response has already been commited")     IllegalStateException cannotResetBuffer();" compose:Replacement merge: LineBased]
										[T -> http2PriRequestFailed({FormalParametersInternal}) : MethodDecl "@Message(id = 119, value = "HTTP2 via prior knowledge failed")     IOException http2PriRequestFailed();" compose:Replacement merge: LineBased]
										[T -> outOfBandResponseNotSupported({FormalParametersInternal}) : MethodDecl "@Message(id = 120, value = "Out of band responses are not allowed for this connector")     IllegalStateException outOfBandResponseNotSupported();" compose:Replacement merge: LineBased]
										[T -> tooManySessions(int-int) : MethodDecl "@Message(id = 121, value = "Session was rejected as the maximum number of sessions (%s) has been hit")     IllegalStateException tooManySessions(int maxSessions);" compose:Replacement merge: LineBased]
										[T -> proxyConnectionFailed(int-int) : MethodDecl "@Message(id = 122, value = "CONNECT attempt failed as target proxy returned %s")     IOException proxyConnectionFailed(int responseCode);" compose:Replacement merge: LineBased]
										[T -> mcmpMessageRejectedDueToSuspiciousCharacters(String-String) : MethodDecl "@Message(id = 123, value = "MCMP message %s rejected due to suspicious characters")     RuntimeException mcmpMessageRejectedDueToSuspiciousCharacters(String data);" compose:Replacement merge: LineBased]
										[T -> rengotiationTimedOut({FormalParametersInternal}) : MethodDecl "@Message(id = 124, value = "renegotiation timed out")     IllegalStateException rengotiationTimedOut();" compose:Replacement merge: LineBased]
										[T -> requestBodyAlreadyRead({FormalParametersInternal}) : MethodDecl "@Message(id = 125, value = "Request body already read")     IllegalStateException requestBodyAlreadyRead();" compose:Replacement merge: LineBased]
										[T -> blockingIoFromIOThread({FormalParametersInternal}) : MethodDecl "@Message(id = 126, value = "Attempted to do blocking IO from the IO thread. This is prohibited as it may result in deadlocks")     IllegalStateException blockingIoFromIOThread();" compose:Replacement merge: LineBased]
										[T -> responseComplete({FormalParametersInternal}) : MethodDecl "@Message(id = 127, value = "Response has already been sent")     IllegalStateException responseComplete();" compose:Replacement merge: LineBased]
										[T -> couldNotReadContentLengthData({FormalParametersInternal}) : MethodDecl "@Message(id = 128, value = "Remote peer closed connection before all data could be read")     IOException couldNotReadContentLengthData();" compose:Replacement merge: LineBased]
										[T -> reasonPhraseToLargeForBuffer(String-String) : MethodDecl "@Message(id = 129, value = "HTTP reason phrase was too large for the buffer. Either provide a smaller message or a bigger buffer. Phrase: %s")     IllegalStateException reasonPhraseToLargeForBuffer(String phrase);" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> io : Folder]
						[NT -> undertow : Folder]
							[NT -> UndertowMessages.java.merge : .java.merge-File]
								[T -> UndertowMessages.java : .java-Content "/*  * JBoss, Home of Professional Open Source.  * Copyright 2014 Red Hat, Inc., and individual contributors  * as indicated by the @author tags.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */  package io.undertow;  import java.io.IOException; import java.net.SocketAddress; import java.nio.channels.ClosedChannelException;  import io.undertow.predicate.PredicateBuilder; import io.undertow.protocols.http2.HpackException; import io.undertow.server.handlers.builder.HandlerBuilder; import org.jboss.logging.Messages; import org.jboss.logging.annotations.Cause; import org.jboss.logging.annotations.Message; import org.jboss.logging.annotations.MessageBundle;  import javax.net.ssl.SSLPeerUnverifiedException;  /**  * @author Stuart Douglas  */ @MessageBundle(projectCode = "UT") public interface UndertowMessages {      UndertowMessages MESSAGES = Messages.getBundle(UndertowMessages.class);      @Message(id = 1, value = "Maximum concurrent requests must be larger than zero.")     IllegalArgumentException maximumConcurrentRequestsMustBeLargerThanZero();      @Message(id = 2, value = "The response has already been started")     IllegalStateException responseAlreadyStarted();      // id = 3      @Message(id = 4, value = "getResponseChannel() has already been called")     IllegalStateException responseChannelAlreadyProvided();      @Message(id = 5, value = "getRequestChannel() has already been called")     IllegalStateException requestChannelAlreadyProvided();      // id = 6      // id = 7      @Message(id = 8, value = "Handler cannot be null")     IllegalArgumentException handlerCannotBeNull();      @Message(id = 9, value = "Path must be specified")     IllegalArgumentException pathMustBeSpecified();      @Message(id = 10, value = "Session not found %s")     IllegalStateException sessionNotFound(final String session);      @Message(id = 11, value = "Session manager must not be null")     IllegalStateException sessionManagerMustNotBeNull();      @Message(id = 12, value = "Session manager was not attached to the request. Make sure that the SessionAttachmentHandler is installed in the handler chain")     IllegalStateException sessionManagerNotFound();      @Message(id = 13, value = "Argument %s cannot be null")     IllegalArgumentException argumentCannotBeNull(final String argument);      @Message(id = 14, value = "close() called with data still to be flushed. Please call shutdownWrites() and then call flush() until it returns true before calling close()")     IOException closeCalledWithDataStillToBeFlushed();      @Message(id = 16, value = "Could not add cookie as cookie handler was not present in the handler chain")     IllegalStateException cookieHandlerNotPresent();      @Message(id = 17, value = "Form value is a file, use getFile() instead")     IllegalStateException formValueIsAFile();      @Message(id = 18, value = "Form value is a String, use getValue() instead")     IllegalStateException formValueIsAString();      @Message(id = 19, value = "Connection from %s terminated as request entity was larger than %s")     IOException requestEntityWasTooLarge(SocketAddress address, long size);      @Message(id = 20, value = "Connection terminated as request was larger than %s")     IOException requestEntityWasTooLarge(long size);      @Message(id = 21, value = "Session already invalidated")     IllegalStateException sessionAlreadyInvalidated();      @Message(id = 22, value = "The specified hash algorithm '%s' can not be found.")     IllegalArgumentException hashAlgorithmNotFound(String algorithmName);      @Message(id = 23, value = "An invalid Base64 token has been received.")     IllegalArgumentException invalidBase64Token(@Cause final IOException cause);      @Message(id = 24, value = "An invalidly formatted nonce has been received.")     IllegalArgumentException invalidNonceReceived();      @Message(id = 25, value = "Unexpected token '%s' within header.")     IllegalArgumentException unexpectedTokenInHeader(final String name);      @Message(id = 26, value = "Invalid header received.")     IllegalArgumentException invalidHeader();      @Message(id = 27, value = "Could not find session cookie config in the request")     IllegalStateException couldNotFindSessionCookieConfig();      @Message(id = 28, value = "Session %s already exists")     IllegalStateException sessionAlreadyExists(final String id);      @Message(id = 29, value = "Channel was closed mid chunk, if you have attempted to write chunked data you cannot shutdown the channel until after it has all been written.")     IOException chunkedChannelClosedMidChunk();      @Message(id = 30, value = "User %s successfully authenticated.")     String userAuthenticated(final String userName);      @Message(id = 31, value = "User %s has logged out.")     String userLoggedOut(final String userName);      @Message(id = 33, value = "Authentication type %s cannot be combined with %s")     IllegalStateException authTypeCannotBeCombined(String type, String existing);      @Message(id = 34, value = "Stream is closed")     IOException streamIsClosed();      @Message(id = 35, value = "Cannot get stream as startBlocking has not been invoked")     IllegalStateException startBlockingHasNotBeenCalled();      @Message(id = 36, value = "Connection terminated parsing multipart data")     IOException connectionTerminatedReadingMultiPartData();      @Message(id = 37, value = "Failed to parse path in HTTP request")     RuntimeException failedToParsePath();      @Message(id = 38, value = "Authentication failed, requested user name '%s'")     String authenticationFailed(final String userName);      @Message(id = 39, value = "To many query parameters, cannot have more than %s query parameters")     RuntimeException tooManyQueryParameters(int noParams);      @Message(id = 40, value = "To many headers, cannot have more than %s header")     RuntimeException tooManyHeaders(int noParams);      @Message(id = 41, value = "Channel is closed")     ClosedChannelException channelIsClosed();      @Message(id = 42, value = "Could not decode trailers in HTTP request")     IOException couldNotDecodeTrailers();      @Message(id = 43, value = "Data is already being sent. You must wait for the completion callback to be be invoked before calling send() again")     IllegalStateException dataAlreadyQueued();      @Message(id = 44, value = "More than one predicate with name %s. Builder class %s and %s")     IllegalStateException moreThanOnePredicateWithName(String name, Class<? extends PredicateBuilder> aClass, Class<? extends PredicateBuilder> existing);      @Message(id = 45, value = "Error parsing predicated handler string %s:%n%s")     IllegalArgumentException errorParsingPredicateString(String reason, String s);      @Message(id = 46, value = "The number of cookies sent exceeded the maximum of %s")     IllegalStateException tooManyCookies(int maxCookies);      @Message(id = 47, value = "The number of parameters exceeded the maximum of %s")     IllegalStateException tooManyParameters(int maxValues);      @Message(id = 48, value = "No request is currently active")     IllegalStateException noRequestActive();      @Message(id = 50, value = "AuthenticationMechanism Outcome is null")     IllegalStateException authMechanismOutcomeNull();      @Message(id = 51, value = "Not a valid IP pattern %s")     IllegalArgumentException notAValidIpPattern(String peer);      @Message(id = 52, value = "Session data requested when non session based authentication in use")     IllegalStateException noSessionData();      @Message(id = 53, value = "Listener %s already registered")     IllegalArgumentException listenerAlreadyRegistered(String name);      @Message(id = 54, value = "The maximum size %s for an individual file in a multipart request was exceeded")     IOException maxFileSizeExceeded(long maxIndividualFileSize);      @Message(id = 55, value = "Could not set attribute %s to %s as it is read only")     String couldNotSetAttribute(String attributeName, String newValue);      @Message(id = 56, value = "Could not parse URI template %s, exception at char %s")     RuntimeException couldNotParseUriTemplate(String path, int i);      @Message(id = 57, value = "Mismatched braces in attribute string %s")     RuntimeException mismatchedBraces(String valueString);      @Message(id = 58, value = "More than one handler with name %s. Builder class %s and %s")     IllegalStateException moreThanOneHandlerWithName(String name, Class<? extends HandlerBuilder> aClass, Class<? extends HandlerBuilder> existing);      @Message(id = 59, value = "Invalid syntax %s")     IllegalArgumentException invalidSyntax(String line);      @Message(id = 60, value = "Error parsing handler string %s:%n%s")     IllegalArgumentException errorParsingHandlerString(String reason, String s);      @Message(id = 61, value = "Out of band responses only allowed for 100-continue requests")     IllegalArgumentException outOfBandResponseOnlyAllowedFor100Continue();      @Message(id = 62, value = "AJP does not support HTTP upgrade")     IllegalStateException ajpDoesNotSupportHTTPUpgrade();      @Message(id = 63, value = "File system watcher already started")     IllegalStateException fileSystemWatcherAlreadyStarted();      @Message(id = 64, value = "File system watcher not started")     IllegalStateException fileSystemWatcherNotStarted();      @Message(id = 65, value = "SSL must be specified to connect to a https URL")     IOException sslWasNull();      @Message(id = 66, value = "Incorrect magic number %s for AJP packet header")     IOException wrongMagicNumber(int number);      @Message(id = 67, value = "No client cert was provided")     SSLPeerUnverifiedException peerUnverified();      @Message(id = 68, value = "Servlet path match failed")     IllegalArgumentException servletPathMatchFailed();      @Message(id = 69, value = "Could not parse set cookie header %s")     IllegalArgumentException couldNotParseCookie(String headerValue);      @Message(id = 70, value = "method can only be called by IO thread")     IllegalStateException canOnlyBeCalledByIoThread();      @Message(id = 71, value = "Cannot add path template %s, matcher already contains an equivalent pattern %s")     IllegalStateException matcherAlreadyContainsTemplate(String templateString, String templateString1);      @Message(id = 72, value = "Failed to decode url %s to charset %s")     IllegalArgumentException failedToDecodeURL(String s, String enc, @Cause Exception e);       @Message(id = 73, value = "Resource change listeners are not supported")     IllegalArgumentException resourceChangeListenerNotSupported();      @Message(id = 74, value = "Could not renegotiate SSL connection to require client certificate, as client had sent more data")     IllegalStateException couldNotRenegotiate();      @Message(id = 75, value = "Object was freed")     IllegalStateException objectWasFreed();      @Message(id = 76, value = "Handler not shutdown")     IllegalStateException handlerNotShutdown();      @Message(id = 77, value = "The underlying transport does not support HTTP upgrade")     IllegalStateException upgradeNotSupported();      @Message(id = 78, value = "Renegotiation not supported")     IOException renegotiationNotSupported();      @Message(id = 79, value = "Not a valid user agent pattern %s")     IllegalArgumentException notAValidUserAgentPattern(String userAgent);      @Message(id = 80, value = "Not a valid regular expression pattern %s")     IllegalArgumentException notAValidRegularExpressionPattern(String pattern);      @Message(id = 81, value = "Bad request")     RuntimeException badRequest();      @Message(id = 82, value = "Host %s already registered")     RuntimeException hostAlreadyRegistered(Object host);      @Message(id = 83, value = "Host %s has not been registered")     RuntimeException hostHasNotBeenRegistered(Object host);      @Message(id = 84, value = "Attempted to write additional data after the last chunk")     IOException extraDataWrittenAfterChunkEnd();      @Message(id = 85, value = "Could not generate unique session id")     RuntimeException couldNotGenerateUniqueSessionId();      @Message(id = 86, value = "SPDY needs to be provided with a heap buffer pool, for use in compressing and decompressing headers.")     IllegalArgumentException mustProvideHeapBuffer();      @Message(id = 87, value = "Unexpected SPDY frame type %s")     IOException unexpectedFrameType(int type);      @Message(id = 88, value = "SPDY control frames cannot have body content")     IOException controlFrameCannotHaveBodyContent();      @Message(id = 89, value = "SPDY not supported")     IOException spdyNotSupported();      @Message(id = 90, value = "Jetty NPN not available")     IOException jettyNPNNotAvailable();      @Message(id = 91, value = "Buffer has already been freed")     IllegalStateException bufferAlreadyFreed();      @Message(id = 92, value = "A SPDY header was too large to fit in a response buffer, if you want to support larger headers please increase the buffer size")     IllegalStateException headersTooLargeToFitInHeapBuffer();      @Message(id = 93, value = "A SPDY stream was reset by the remote endpoint")     IOException spdyStreamWasReset();      @Message(id = 94, value = "Blocking await method called from IO thread. Blocking IO must be dispatched to a worker thread or deadlocks will result.")     IOException awaitCalledFromIoThread();      @Message(id = 95, value = "Recursive call to flushSenders()")     RuntimeException recursiveCallToFlushingSenders();      @Message(id = 96, value = "More data was written to the channel than specified in the content-length")     IllegalStateException fixedLengthOverflow();      @Message(id = 97, value = "AJP request already in progress")     IllegalStateException ajpRequestAlreadyInProgress();      @Message(id = 98, value = "HTTP ping data must be 8 bytes in length")     String httpPingDataMustBeLength8();      @Message(id = 99, value = "Received a ping of size other than 8")     String invalidPingSize();      @Message(id = 100, value = "stream id must be zero for frame type %s")     String streamIdMustBeZeroForFrameType(int frameType);      @Message(id = 101, value = "stream id must not be zero for frame type %s")     String streamIdMustNotBeZeroForFrameType(int frameType);      @Message(id = 102, value = "RST_STREAM received for idle stream")     String rstStreamReceivedForIdleStream();      @Message(id = 103, value = "Http2 stream was reset")     IOException http2StreamWasReset();      @Message(id = 104, value = "Incorrect HTTP2 preface")     IOException incorrectHttp2Preface();      @Message(id = 105, value = "HTTP2 frame to large")     IOException http2FrameTooLarge();      @Message(id = 106, value = "HTTP2 continuation frame received without a corresponding headers or push promise frame")     IOException http2ContinuationFrameNotExpected();      @Message(id = 107, value = "Huffman encoded value in HPACK headers did not end with EOS padding")     HpackException huffmanEncodedHpackValueDidNotEndWithEOS();      @Message(id = 108, value = "HPACK variable length integer encoded over too many octects, max is %s")     HpackException integerEncodedOverTooManyOctets(int maxIntegerOctets);      @Message(id = 109, value = "Zero is not a valid header table index")     HpackException zeroNotValidHeaderTableIndex();       @Message(id = 110, value = "Cannot send 100-Continue, getResponseChannel() has already been called")     IOException cannotSendContinueResponse();      @Message(id = 111, value = "Parser did not make progress")     IOException parserDidNotMakeProgress();      @Message(id = 112, value = "Only client side can call createStream, if you wish to send a PUSH_PROMISE frame use createPushPromiseStream instead")     IOException headersStreamCanOnlyBeCreatedByClient();      @Message(id = 113, value = "Only the server side can send a push promise stream")     IOException pushPromiseCanOnlyBeCreatedByServer();      @Message(id = 114, value = "Invalid IP access control rule %s. Format is: [ip-match] allow|deny")     IllegalArgumentException invalidAclRule(String rule);      @Message(id = 115, value = "Server received PUSH_PROMISE frame from client")     IOException serverReceivedPushPromise();      @Message(id = 116, value = "CONNECT not supported by this connector")     IllegalStateException connectNotSupported();      @Message(id = 117, value = "Request was not a CONNECT request")     IllegalStateException notAConnectRequest();      @Message(id = 118, value = "Cannot reset buffer, response has already been commited")     IllegalStateException cannotResetBuffer();      @Message(id = 119, value = "HTTP2 via prior knowledge failed")     IOException http2PriRequestFailed();      @Message(id = 120, value = "Out of band responses are not allowed for this connector")     IllegalStateException outOfBandResponseNotSupported();      @Message(id = 121, value = "Session was rejected as the maximum number of sessions (%s) has been hit")     IllegalStateException tooManySessions(int maxSessions);      @Message(id = 122, value = "CONNECT attempt failed as target proxy returned %s")     IOException proxyConnectionFailed(int responseCode);      @Message(id = 123, value = "MCMP message %s rejected due to suspicious characters")     RuntimeException mcmpMessageRejectedDueToSuspiciousCharacters(String data);      @Message(id = 124, value = "renegotiation timed out")     IllegalStateException rengotiationTimedOut();      @Message(id = 125, value = "Request body already read")     IllegalStateException requestBodyAlreadyRead();      @Message(id = 126, value = "Attempted to do blocking IO from the IO thread. This is prohibited as it may result in deadlocks")     IllegalStateException blockingIoFromIOThread();      @Message(id = 127, value = "Response has already been sent")     IllegalStateException responseComplete();      @Message(id = 128, value = "Remote peer closed connection before all data could be read")     IOException couldNotReadContentLengthData();      @Message(id = 129, value = "Failed to send after being safe to send")     IllegalStateException failedToSendAfterBeingSafe();  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> io : Folder]
						[NT -> undertow : Folder]
							[NT -> UndertowMessages.java.merge : .java.merge-File]
								[T -> UndertowMessages.java : .java-Content "/*  * JBoss, Home of Professional Open Source.  * Copyright 2014 Red Hat, Inc., and individual contributors  * as indicated by the @author tags.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */  package io.undertow;  import java.io.IOException; import java.net.SocketAddress; import java.nio.channels.ClosedChannelException;  import io.undertow.predicate.PredicateBuilder; import io.undertow.protocols.http2.HpackException; import io.undertow.server.handlers.builder.HandlerBuilder; import org.jboss.logging.Messages; import org.jboss.logging.annotations.Cause; import org.jboss.logging.annotations.Message; import org.jboss.logging.annotations.MessageBundle;  import javax.net.ssl.SSLPeerUnverifiedException;  /**  * @author Stuart Douglas  */ @MessageBundle(projectCode = "UT") public interface UndertowMessages {      UndertowMessages MESSAGES = Messages.getBundle(UndertowMessages.class);      @Message(id = 1, value = "Maximum concurrent requests must be larger than zero.")     IllegalArgumentException maximumConcurrentRequestsMustBeLargerThanZero();      @Message(id = 2, value = "The response has already been started")     IllegalStateException responseAlreadyStarted();      // id = 3      @Message(id = 4, value = "getResponseChannel() has already been called")     IllegalStateException responseChannelAlreadyProvided();      @Message(id = 5, value = "getRequestChannel() has already been called")     IllegalStateException requestChannelAlreadyProvided();      // id = 6      // id = 7      @Message(id = 8, value = "Handler cannot be null")     IllegalArgumentException handlerCannotBeNull();      @Message(id = 9, value = "Path must be specified")     IllegalArgumentException pathMustBeSpecified();      @Message(id = 10, value = "Session not found %s")     IllegalStateException sessionNotFound(final String session);      @Message(id = 11, value = "Session manager must not be null")     IllegalStateException sessionManagerMustNotBeNull();      @Message(id = 12, value = "Session manager was not attached to the request. Make sure that the SessionAttachmentHandler is installed in the handler chain")     IllegalStateException sessionManagerNotFound();      @Message(id = 13, value = "Argument %s cannot be null")     IllegalArgumentException argumentCannotBeNull(final String argument);      @Message(id = 14, value = "close() called with data still to be flushed. Please call shutdownWrites() and then call flush() until it returns true before calling close()")     IOException closeCalledWithDataStillToBeFlushed();      @Message(id = 16, value = "Could not add cookie as cookie handler was not present in the handler chain")     IllegalStateException cookieHandlerNotPresent();      @Message(id = 17, value = "Form value is a file, use getFile() instead")     IllegalStateException formValueIsAFile();      @Message(id = 18, value = "Form value is a String, use getValue() instead")     IllegalStateException formValueIsAString();      @Message(id = 19, value = "Connection from %s terminated as request entity was larger than %s")     IOException requestEntityWasTooLarge(SocketAddress address, long size);      @Message(id = 20, value = "Connection terminated as request was larger than %s")     IOException requestEntityWasTooLarge(long size);      @Message(id = 21, value = "Session already invalidated")     IllegalStateException sessionAlreadyInvalidated();      @Message(id = 22, value = "The specified hash algorithm '%s' can not be found.")     IllegalArgumentException hashAlgorithmNotFound(String algorithmName);      @Message(id = 23, value = "An invalid Base64 token has been received.")     IllegalArgumentException invalidBase64Token(@Cause final IOException cause);      @Message(id = 24, value = "An invalidly formatted nonce has been received.")     IllegalArgumentException invalidNonceReceived();      @Message(id = 25, value = "Unexpected token '%s' within header.")     IllegalArgumentException unexpectedTokenInHeader(final String name);      @Message(id = 26, value = "Invalid header received.")     IllegalArgumentException invalidHeader();      @Message(id = 27, value = "Could not find session cookie config in the request")     IllegalStateException couldNotFindSessionCookieConfig();      @Message(id = 28, value = "Session %s already exists")     IllegalStateException sessionAlreadyExists(final String id);      @Message(id = 29, value = "Channel was closed mid chunk, if you have attempted to write chunked data you cannot shutdown the channel until after it has all been written.")     IOException chunkedChannelClosedMidChunk();      @Message(id = 30, value = "User %s successfully authenticated.")     String userAuthenticated(final String userName);      @Message(id = 31, value = "User %s has logged out.")     String userLoggedOut(final String userName);      @Message(id = 33, value = "Authentication type %s cannot be combined with %s")     IllegalStateException authTypeCannotBeCombined(String type, String existing);      @Message(id = 34, value = "Stream is closed")     IOException streamIsClosed();      @Message(id = 35, value = "Cannot get stream as startBlocking has not been invoked")     IllegalStateException startBlockingHasNotBeenCalled();      @Message(id = 36, value = "Connection terminated parsing multipart data")     IOException connectionTerminatedReadingMultiPartData();      @Message(id = 37, value = "Failed to parse path in HTTP request")     RuntimeException failedToParsePath();      @Message(id = 38, value = "Authentication failed, requested user name '%s'")     String authenticationFailed(final String userName);      @Message(id = 39, value = "To many query parameters, cannot have more than %s query parameters")     RuntimeException tooManyQueryParameters(int noParams);      @Message(id = 40, value = "To many headers, cannot have more than %s header")     RuntimeException tooManyHeaders(int noParams);      @Message(id = 41, value = "Channel is closed")     ClosedChannelException channelIsClosed();      @Message(id = 42, value = "Could not decode trailers in HTTP request")     IOException couldNotDecodeTrailers();      @Message(id = 43, value = "Data is already being sent. You must wait for the completion callback to be be invoked before calling send() again")     IllegalStateException dataAlreadyQueued();      @Message(id = 44, value = "More than one predicate with name %s. Builder class %s and %s")     IllegalStateException moreThanOnePredicateWithName(String name, Class<? extends PredicateBuilder> aClass, Class<? extends PredicateBuilder> existing);      @Message(id = 45, value = "Error parsing predicated handler string %s:%n%s")     IllegalArgumentException errorParsingPredicateString(String reason, String s);      @Message(id = 46, value = "The number of cookies sent exceeded the maximum of %s")     IllegalStateException tooManyCookies(int maxCookies);      @Message(id = 47, value = "The number of parameters exceeded the maximum of %s")     IllegalStateException tooManyParameters(int maxValues);      @Message(id = 48, value = "No request is currently active")     IllegalStateException noRequestActive();      @Message(id = 50, value = "AuthenticationMechanism Outcome is null")     IllegalStateException authMechanismOutcomeNull();      @Message(id = 51, value = "Not a valid IP pattern %s")     IllegalArgumentException notAValidIpPattern(String peer);      @Message(id = 52, value = "Session data requested when non session based authentication in use")     IllegalStateException noSessionData();      @Message(id = 53, value = "Listener %s already registered")     IllegalArgumentException listenerAlreadyRegistered(String name);      @Message(id = 54, value = "The maximum size %s for an individual file in a multipart request was exceeded")     IOException maxFileSizeExceeded(long maxIndividualFileSize);      @Message(id = 55, value = "Could not set attribute %s to %s as it is read only")     String couldNotSetAttribute(String attributeName, String newValue);      @Message(id = 56, value = "Could not parse URI template %s, exception at char %s")     RuntimeException couldNotParseUriTemplate(String path, int i);      @Message(id = 57, value = "Mismatched braces in attribute string %s")     RuntimeException mismatchedBraces(String valueString);      @Message(id = 58, value = "More than one handler with name %s. Builder class %s and %s")     IllegalStateException moreThanOneHandlerWithName(String name, Class<? extends HandlerBuilder> aClass, Class<? extends HandlerBuilder> existing);      @Message(id = 59, value = "Invalid syntax %s")     IllegalArgumentException invalidSyntax(String line);      @Message(id = 60, value = "Error parsing handler string %s:%n%s")     IllegalArgumentException errorParsingHandlerString(String reason, String s);      @Message(id = 61, value = "Out of band responses only allowed for 100-continue requests")     IllegalArgumentException outOfBandResponseOnlyAllowedFor100Continue();      @Message(id = 62, value = "AJP does not support HTTP upgrade")     IllegalStateException ajpDoesNotSupportHTTPUpgrade();      @Message(id = 63, value = "File system watcher already started")     IllegalStateException fileSystemWatcherAlreadyStarted();      @Message(id = 64, value = "File system watcher not started")     IllegalStateException fileSystemWatcherNotStarted();      @Message(id = 65, value = "SSL must be specified to connect to a https URL")     IOException sslWasNull();      @Message(id = 66, value = "Incorrect magic number %s for AJP packet header")     IOException wrongMagicNumber(int number);      @Message(id = 67, value = "No client cert was provided")     SSLPeerUnverifiedException peerUnverified();      @Message(id = 68, value = "Servlet path match failed")     IllegalArgumentException servletPathMatchFailed();      @Message(id = 69, value = "Could not parse set cookie header %s")     IllegalArgumentException couldNotParseCookie(String headerValue);      @Message(id = 70, value = "method can only be called by IO thread")     IllegalStateException canOnlyBeCalledByIoThread();      @Message(id = 71, value = "Cannot add path template %s, matcher already contains an equivalent pattern %s")     IllegalStateException matcherAlreadyContainsTemplate(String templateString, String templateString1);      @Message(id = 72, value = "Failed to decode url %s to charset %s")     IllegalArgumentException failedToDecodeURL(String s, String enc, @Cause Exception e);       @Message(id = 73, value = "Resource change listeners are not supported")     IllegalArgumentException resourceChangeListenerNotSupported();      @Message(id = 74, value = "Could not renegotiate SSL connection to require client certificate, as client had sent more data")     IllegalStateException couldNotRenegotiate();      @Message(id = 75, value = "Object was freed")     IllegalStateException objectWasFreed();      @Message(id = 76, value = "Handler not shutdown")     IllegalStateException handlerNotShutdown();      @Message(id = 77, value = "The underlying transport does not support HTTP upgrade")     IllegalStateException upgradeNotSupported();      @Message(id = 78, value = "Renegotiation not supported")     IOException renegotiationNotSupported();      @Message(id = 79, value = "Not a valid user agent pattern %s")     IllegalArgumentException notAValidUserAgentPattern(String userAgent);      @Message(id = 80, value = "Not a valid regular expression pattern %s")     IllegalArgumentException notAValidRegularExpressionPattern(String pattern);      @Message(id = 81, value = "Bad request")     RuntimeException badRequest();      @Message(id = 82, value = "Host %s already registered")     RuntimeException hostAlreadyRegistered(Object host);      @Message(id = 83, value = "Host %s has not been registered")     RuntimeException hostHasNotBeenRegistered(Object host);      @Message(id = 84, value = "Attempted to write additional data after the last chunk")     IOException extraDataWrittenAfterChunkEnd();      @Message(id = 85, value = "Could not generate unique session id")     RuntimeException couldNotGenerateUniqueSessionId();      @Message(id = 86, value = "SPDY needs to be provided with a heap buffer pool, for use in compressing and decompressing headers.")     IllegalArgumentException mustProvideHeapBuffer();      @Message(id = 87, value = "Unexpected SPDY frame type %s")     IOException unexpectedFrameType(int type);      @Message(id = 88, value = "SPDY control frames cannot have body content")     IOException controlFrameCannotHaveBodyContent();      @Message(id = 89, value = "SPDY not supported")     IOException spdyNotSupported();      @Message(id = 90, value = "Jetty NPN not available")     IOException jettyNPNNotAvailable();      @Message(id = 91, value = "Buffer has already been freed")     IllegalStateException bufferAlreadyFreed();      @Message(id = 92, value = "A SPDY header was too large to fit in a response buffer, if you want to support larger headers please increase the buffer size")     IllegalStateException headersTooLargeToFitInHeapBuffer();      @Message(id = 93, value = "A SPDY stream was reset by the remote endpoint")     IOException spdyStreamWasReset();      @Message(id = 94, value = "Blocking await method called from IO thread. Blocking IO must be dispatched to a worker thread or deadlocks will result.")     IOException awaitCalledFromIoThread();      @Message(id = 95, value = "Recursive call to flushSenders()")     RuntimeException recursiveCallToFlushingSenders();      @Message(id = 96, value = "More data was written to the channel than specified in the content-length")     IllegalStateException fixedLengthOverflow();      @Message(id = 97, value = "AJP request already in progress")     IllegalStateException ajpRequestAlreadyInProgress();      @Message(id = 98, value = "HTTP ping data must be 8 bytes in length")     String httpPingDataMustBeLength8();      @Message(id = 99, value = "Received a ping of size other than 8")     String invalidPingSize();      @Message(id = 100, value = "stream id must be zero for frame type %s")     String streamIdMustBeZeroForFrameType(int frameType);      @Message(id = 101, value = "stream id must not be zero for frame type %s")     String streamIdMustNotBeZeroForFrameType(int frameType);      @Message(id = 102, value = "RST_STREAM received for idle stream")     String rstStreamReceivedForIdleStream();      @Message(id = 103, value = "Http2 stream was reset")     IOException http2StreamWasReset();      @Message(id = 104, value = "Incorrect HTTP2 preface")     IOException incorrectHttp2Preface();      @Message(id = 105, value = "HTTP2 frame to large")     IOException http2FrameTooLarge();      @Message(id = 106, value = "HTTP2 continuation frame received without a corresponding headers or push promise frame")     IOException http2ContinuationFrameNotExpected();      @Message(id = 107, value = "Huffman encoded value in HPACK headers did not end with EOS padding")     HpackException huffmanEncodedHpackValueDidNotEndWithEOS();      @Message(id = 108, value = "HPACK variable length integer encoded over too many octects, max is %s")     HpackException integerEncodedOverTooManyOctets(int maxIntegerOctets);      @Message(id = 109, value = "Zero is not a valid header table index")     HpackException zeroNotValidHeaderTableIndex();       @Message(id = 110, value = "Cannot send 100-Continue, getResponseChannel() has already been called")     IOException cannotSendContinueResponse();      @Message(id = 111, value = "Parser did not make progress")     IOException parserDidNotMakeProgress();      @Message(id = 112, value = "Only client side can call createStream, if you wish to send a PUSH_PROMISE frame use createPushPromiseStream instead")     IOException headersStreamCanOnlyBeCreatedByClient();      @Message(id = 113, value = "Only the server side can send a push promise stream")     IOException pushPromiseCanOnlyBeCreatedByServer();      @Message(id = 114, value = "Invalid IP access control rule %s. Format is: [ip-match] allow|deny")     IllegalArgumentException invalidAclRule(String rule);      @Message(id = 115, value = "Server received PUSH_PROMISE frame from client")     IOException serverReceivedPushPromise();      @Message(id = 116, value = "CONNECT not supported by this connector")     IllegalStateException connectNotSupported();      @Message(id = 117, value = "Request was not a CONNECT request")     IllegalStateException notAConnectRequest();      @Message(id = 118, value = "Cannot reset buffer, response has already been commited")     IllegalStateException cannotResetBuffer();      @Message(id = 119, value = "HTTP2 via prior knowledge failed")     IOException http2PriRequestFailed();      @Message(id = 120, value = "Out of band responses are not allowed for this connector")     IllegalStateException outOfBandResponseNotSupported();      @Message(id = 121, value = "Session was rejected as the maximum number of sessions (%s) has been hit")     IllegalStateException tooManySessions(int maxSessions);      @Message(id = 122, value = "CONNECT attempt failed as target proxy returned %s")     IOException proxyConnectionFailed(int responseCode);      @Message(id = 123, value = "MCMP message %s rejected due to suspicious characters")     RuntimeException mcmpMessageRejectedDueToSuspiciousCharacters(String data);      @Message(id = 124, value = "renegotiation timed out")     IllegalStateException rengotiationTimedOut();      @Message(id = 125, value = "Request body already read")     IllegalStateException requestBodyAlreadyRead();      @Message(id = 126, value = "Attempted to do blocking IO from the IO thread. This is prohibited as it may result in deadlocks")     IllegalStateException blockingIoFromIOThread();      @Message(id = 127, value = "Response has already been sent")     IllegalStateException responseComplete();      @Message(id = 128, value = "Remote peer closed connection before all data could be read")     IOException couldNotReadContentLengthData();  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> io : Folder]
						[NT -> undertow : Folder]
							[NT -> UndertowMessages.java.merge : .java.merge-File]
								[T -> UndertowMessages.java : .java-Content "/*  * JBoss, Home of Professional Open Source.  * Copyright 2014 Red Hat, Inc., and individual contributors  * as indicated by the @author tags.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */  package io.undertow;  import java.io.IOException; import java.net.SocketAddress; import java.nio.channels.ClosedChannelException;  import io.undertow.predicate.PredicateBuilder; import io.undertow.protocols.http2.HpackException; import io.undertow.server.handlers.builder.HandlerBuilder; import org.jboss.logging.Messages; import org.jboss.logging.annotations.Cause; import org.jboss.logging.annotations.Message; import org.jboss.logging.annotations.MessageBundle;  import javax.net.ssl.SSLPeerUnverifiedException;  /**  * @author Stuart Douglas  */ @MessageBundle(projectCode = "UT") public interface UndertowMessages {      UndertowMessages MESSAGES = Messages.getBundle(UndertowMessages.class);      @Message(id = 1, value = "Maximum concurrent requests must be larger than zero.")     IllegalArgumentException maximumConcurrentRequestsMustBeLargerThanZero();      @Message(id = 2, value = "The response has already been started")     IllegalStateException responseAlreadyStarted();      // id = 3      @Message(id = 4, value = "getResponseChannel() has already been called")     IllegalStateException responseChannelAlreadyProvided();      @Message(id = 5, value = "getRequestChannel() has already been called")     IllegalStateException requestChannelAlreadyProvided();      // id = 6      // id = 7      @Message(id = 8, value = "Handler cannot be null")     IllegalArgumentException handlerCannotBeNull();      @Message(id = 9, value = "Path must be specified")     IllegalArgumentException pathMustBeSpecified();      @Message(id = 10, value = "Session not found %s")     IllegalStateException sessionNotFound(final String session);      @Message(id = 11, value = "Session manager must not be null")     IllegalStateException sessionManagerMustNotBeNull();      @Message(id = 12, value = "Session manager was not attached to the request. Make sure that the SessionAttachmentHandler is installed in the handler chain")     IllegalStateException sessionManagerNotFound();      @Message(id = 13, value = "Argument %s cannot be null")     IllegalArgumentException argumentCannotBeNull(final String argument);      @Message(id = 14, value = "close() called with data still to be flushed. Please call shutdownWrites() and then call flush() until it returns true before calling close()")     IOException closeCalledWithDataStillToBeFlushed();      @Message(id = 16, value = "Could not add cookie as cookie handler was not present in the handler chain")     IllegalStateException cookieHandlerNotPresent();      @Message(id = 17, value = "Form value is a file, use getFile() instead")     IllegalStateException formValueIsAFile();      @Message(id = 18, value = "Form value is a String, use getValue() instead")     IllegalStateException formValueIsAString();      @Message(id = 19, value = "Connection from %s terminated as request entity was larger than %s")     IOException requestEntityWasTooLarge(SocketAddress address, long size);      @Message(id = 20, value = "Connection terminated as request was larger than %s")     IOException requestEntityWasTooLarge(long size);      @Message(id = 21, value = "Session already invalidated")     IllegalStateException sessionAlreadyInvalidated();      @Message(id = 22, value = "The specified hash algorithm '%s' can not be found.")     IllegalArgumentException hashAlgorithmNotFound(String algorithmName);      @Message(id = 23, value = "An invalid Base64 token has been received.")     IllegalArgumentException invalidBase64Token(@Cause final IOException cause);      @Message(id = 24, value = "An invalidly formatted nonce has been received.")     IllegalArgumentException invalidNonceReceived();      @Message(id = 25, value = "Unexpected token '%s' within header.")     IllegalArgumentException unexpectedTokenInHeader(final String name);      @Message(id = 26, value = "Invalid header received.")     IllegalArgumentException invalidHeader();      @Message(id = 27, value = "Could not find session cookie config in the request")     IllegalStateException couldNotFindSessionCookieConfig();      @Message(id = 28, value = "Session %s already exists")     IllegalStateException sessionAlreadyExists(final String id);      @Message(id = 29, value = "Channel was closed mid chunk, if you have attempted to write chunked data you cannot shutdown the channel until after it has all been written.")     IOException chunkedChannelClosedMidChunk();      @Message(id = 30, value = "User %s successfully authenticated.")     String userAuthenticated(final String userName);      @Message(id = 31, value = "User %s has logged out.")     String userLoggedOut(final String userName);      @Message(id = 33, value = "Authentication type %s cannot be combined with %s")     IllegalStateException authTypeCannotBeCombined(String type, String existing);      @Message(id = 34, value = "Stream is closed")     IOException streamIsClosed();      @Message(id = 35, value = "Cannot get stream as startBlocking has not been invoked")     IllegalStateException startBlockingHasNotBeenCalled();      @Message(id = 36, value = "Connection terminated parsing multipart data")     IOException connectionTerminatedReadingMultiPartData();      @Message(id = 37, value = "Failed to parse path in HTTP request")     RuntimeException failedToParsePath();      @Message(id = 38, value = "Authentication failed, requested user name '%s'")     String authenticationFailed(final String userName);      @Message(id = 39, value = "To many query parameters, cannot have more than %s query parameters")     RuntimeException tooManyQueryParameters(int noParams);      @Message(id = 40, value = "To many headers, cannot have more than %s header")     RuntimeException tooManyHeaders(int noParams);      @Message(id = 41, value = "Channel is closed")     ClosedChannelException channelIsClosed();      @Message(id = 42, value = "Could not decode trailers in HTTP request")     IOException couldNotDecodeTrailers();      @Message(id = 43, value = "Data is already being sent. You must wait for the completion callback to be be invoked before calling send() again")     IllegalStateException dataAlreadyQueued();      @Message(id = 44, value = "More than one predicate with name %s. Builder class %s and %s")     IllegalStateException moreThanOnePredicateWithName(String name, Class<? extends PredicateBuilder> aClass, Class<? extends PredicateBuilder> existing);      @Message(id = 45, value = "Error parsing predicated handler string %s:%n%s")     IllegalArgumentException errorParsingPredicateString(String reason, String s);      @Message(id = 46, value = "The number of cookies sent exceeded the maximum of %s")     IllegalStateException tooManyCookies(int maxCookies);      @Message(id = 47, value = "The number of parameters exceeded the maximum of %s")     IllegalStateException tooManyParameters(int maxValues);      @Message(id = 48, value = "No request is currently active")     IllegalStateException noRequestActive();      @Message(id = 50, value = "AuthenticationMechanism Outcome is null")     IllegalStateException authMechanismOutcomeNull();      @Message(id = 51, value = "Not a valid IP pattern %s")     IllegalArgumentException notAValidIpPattern(String peer);      @Message(id = 52, value = "Session data requested when non session based authentication in use")     IllegalStateException noSessionData();      @Message(id = 53, value = "Listener %s already registered")     IllegalArgumentException listenerAlreadyRegistered(String name);      @Message(id = 54, value = "The maximum size %s for an individual file in a multipart request was exceeded")     IOException maxFileSizeExceeded(long maxIndividualFileSize);      @Message(id = 55, value = "Could not set attribute %s to %s as it is read only")     String couldNotSetAttribute(String attributeName, String newValue);      @Message(id = 56, value = "Could not parse URI template %s, exception at char %s")     RuntimeException couldNotParseUriTemplate(String path, int i);      @Message(id = 57, value = "Mismatched braces in attribute string %s")     RuntimeException mismatchedBraces(String valueString);      @Message(id = 58, value = "More than one handler with name %s. Builder class %s and %s")     IllegalStateException moreThanOneHandlerWithName(String name, Class<? extends HandlerBuilder> aClass, Class<? extends HandlerBuilder> existing);      @Message(id = 59, value = "Invalid syntax %s")     IllegalArgumentException invalidSyntax(String line);      @Message(id = 60, value = "Error parsing handler string %s:%n%s")     IllegalArgumentException errorParsingHandlerString(String reason, String s);      @Message(id = 61, value = "Out of band responses only allowed for 100-continue requests")     IllegalArgumentException outOfBandResponseOnlyAllowedFor100Continue();      @Message(id = 62, value = "AJP does not support HTTP upgrade")     IllegalStateException ajpDoesNotSupportHTTPUpgrade();      @Message(id = 63, value = "File system watcher already started")     IllegalStateException fileSystemWatcherAlreadyStarted();      @Message(id = 64, value = "File system watcher not started")     IllegalStateException fileSystemWatcherNotStarted();      @Message(id = 65, value = "SSL must be specified to connect to a https URL")     IOException sslWasNull();      @Message(id = 66, value = "Incorrect magic number %s for AJP packet header")     IOException wrongMagicNumber(int number);      @Message(id = 67, value = "No client cert was provided")     SSLPeerUnverifiedException peerUnverified();      @Message(id = 68, value = "Servlet path match failed")     IllegalArgumentException servletPathMatchFailed();      @Message(id = 69, value = "Could not parse set cookie header %s")     IllegalArgumentException couldNotParseCookie(String headerValue);      @Message(id = 70, value = "method can only be called by IO thread")     IllegalStateException canOnlyBeCalledByIoThread();      @Message(id = 71, value = "Cannot add path template %s, matcher already contains an equivalent pattern %s")     IllegalStateException matcherAlreadyContainsTemplate(String templateString, String templateString1);      @Message(id = 72, value = "Failed to decode url %s to charset %s")     IllegalArgumentException failedToDecodeURL(String s, String enc, @Cause Exception e);       @Message(id = 73, value = "Resource change listeners are not supported")     IllegalArgumentException resourceChangeListenerNotSupported();      @Message(id = 74, value = "Could not renegotiate SSL connection to require client certificate, as client had sent more data")     IllegalStateException couldNotRenegotiate();      @Message(id = 75, value = "Object was freed")     IllegalStateException objectWasFreed();      @Message(id = 76, value = "Handler not shutdown")     IllegalStateException handlerNotShutdown();      @Message(id = 77, value = "The underlying transport does not support HTTP upgrade")     IllegalStateException upgradeNotSupported();      @Message(id = 78, value = "Renegotiation not supported")     IOException renegotiationNotSupported();      @Message(id = 79, value = "Not a valid user agent pattern %s")     IllegalArgumentException notAValidUserAgentPattern(String userAgent);      @Message(id = 80, value = "Not a valid regular expression pattern %s")     IllegalArgumentException notAValidRegularExpressionPattern(String pattern);      @Message(id = 81, value = "Bad request")     RuntimeException badRequest();      @Message(id = 82, value = "Host %s already registered")     RuntimeException hostAlreadyRegistered(Object host);      @Message(id = 83, value = "Host %s has not been registered")     RuntimeException hostHasNotBeenRegistered(Object host);      @Message(id = 84, value = "Attempted to write additional data after the last chunk")     IOException extraDataWrittenAfterChunkEnd();      @Message(id = 85, value = "Could not generate unique session id")     RuntimeException couldNotGenerateUniqueSessionId();      @Message(id = 86, value = "SPDY needs to be provided with a heap buffer pool, for use in compressing and decompressing headers.")     IllegalArgumentException mustProvideHeapBuffer();      @Message(id = 87, value = "Unexpected SPDY frame type %s")     IOException unexpectedFrameType(int type);      @Message(id = 88, value = "SPDY control frames cannot have body content")     IOException controlFrameCannotHaveBodyContent();      @Message(id = 89, value = "SPDY not supported")     IOException spdyNotSupported();      @Message(id = 90, value = "Jetty NPN not available")     IOException jettyNPNNotAvailable();      @Message(id = 91, value = "Buffer has already been freed")     IllegalStateException bufferAlreadyFreed();      @Message(id = 92, value = "A SPDY header was too large to fit in a response buffer, if you want to support larger headers please increase the buffer size")     IllegalStateException headersTooLargeToFitInHeapBuffer();      @Message(id = 93, value = "A SPDY stream was reset by the remote endpoint")     IOException spdyStreamWasReset();      @Message(id = 94, value = "Blocking await method called from IO thread. Blocking IO must be dispatched to a worker thread or deadlocks will result.")     IOException awaitCalledFromIoThread();      @Message(id = 95, value = "Recursive call to flushSenders()")     RuntimeException recursiveCallToFlushingSenders();      @Message(id = 96, value = "More data was written to the channel than specified in the content-length")     IllegalStateException fixedLengthOverflow();      @Message(id = 97, value = "AJP request already in progress")     IllegalStateException ajpRequestAlreadyInProgress();      @Message(id = 98, value = "HTTP ping data must be 8 bytes in length")     String httpPingDataMustBeLength8();      @Message(id = 99, value = "Received a ping of size other than 8")     String invalidPingSize();      @Message(id = 100, value = "stream id must be zero for frame type %s")     String streamIdMustBeZeroForFrameType(int frameType);      @Message(id = 101, value = "stream id must not be zero for frame type %s")     String streamIdMustNotBeZeroForFrameType(int frameType);      @Message(id = 102, value = "RST_STREAM received for idle stream")     String rstStreamReceivedForIdleStream();      @Message(id = 103, value = "Http2 stream was reset")     IOException http2StreamWasReset();      @Message(id = 104, value = "Incorrect HTTP2 preface")     IOException incorrectHttp2Preface();      @Message(id = 105, value = "HTTP2 frame to large")     IOException http2FrameTooLarge();      @Message(id = 106, value = "HTTP2 continuation frame received without a corresponding headers or push promise frame")     IOException http2ContinuationFrameNotExpected();      @Message(id = 107, value = "Huffman encoded value in HPACK headers did not end with EOS padding")     HpackException huffmanEncodedHpackValueDidNotEndWithEOS();      @Message(id = 108, value = "HPACK variable length integer encoded over too many octects, max is %s")     HpackException integerEncodedOverTooManyOctets(int maxIntegerOctets);      @Message(id = 109, value = "Zero is not a valid header table index")     HpackException zeroNotValidHeaderTableIndex();       @Message(id = 110, value = "Cannot send 100-Continue, getResponseChannel() has already been called")     IOException cannotSendContinueResponse();      @Message(id = 111, value = "Parser did not make progress")     IOException parserDidNotMakeProgress();      @Message(id = 112, value = "Only client side can call createStream, if you wish to send a PUSH_PROMISE frame use createPushPromiseStream instead")     IOException headersStreamCanOnlyBeCreatedByClient();      @Message(id = 113, value = "Only the server side can send a push promise stream")     IOException pushPromiseCanOnlyBeCreatedByServer();      @Message(id = 114, value = "Invalid IP access control rule %s. Format is: [ip-match] allow|deny")     IllegalArgumentException invalidAclRule(String rule);      @Message(id = 115, value = "Server received PUSH_PROMISE frame from client")     IOException serverReceivedPushPromise();      @Message(id = 116, value = "CONNECT not supported by this connector")     IllegalStateException connectNotSupported();      @Message(id = 117, value = "Request was not a CONNECT request")     IllegalStateException notAConnectRequest();      @Message(id = 118, value = "Cannot reset buffer, response has already been commited")     IllegalStateException cannotResetBuffer();      @Message(id = 119, value = "HTTP2 via prior knowledge failed")     IOException http2PriRequestFailed();      @Message(id = 120, value = "Out of band responses are not allowed for this connector")     IllegalStateException outOfBandResponseNotSupported();      @Message(id = 121, value = "Session was rejected as the maximum number of sessions (%s) has been hit")     IllegalStateException tooManySessions(int maxSessions);      @Message(id = 122, value = "CONNECT attempt failed as target proxy returned %s")     IOException proxyConnectionFailed(int responseCode);      @Message(id = 123, value = "MCMP message %s rejected due to suspicious characters")     RuntimeException mcmpMessageRejectedDueToSuspiciousCharacters(String data);      @Message(id = 124, value = "renegotiation timed out")     IllegalStateException rengotiationTimedOut();      @Message(id = 125, value = "Request body already read")     IllegalStateException requestBodyAlreadyRead();      @Message(id = 126, value = "Attempted to do blocking IO from the IO thread. This is prohibited as it may result in deadlocks")     IllegalStateException blockingIoFromIOThread();      @Message(id = 127, value = "Response has already been sent")     IllegalStateException responseComplete();      @Message(id = 128, value = "Remote peer closed connection before all data could be read")     IOException couldNotReadContentLengthData();      @Message(id = 129, value = "HTTP reason phrase was too large for the buffer. Either provide a smaller message or a bigger buffer. Phrase: %s")     IllegalStateException reasonPhraseToLargeForBuffer(String phrase); } " compose:StringConcatenation merge: LineBased]
