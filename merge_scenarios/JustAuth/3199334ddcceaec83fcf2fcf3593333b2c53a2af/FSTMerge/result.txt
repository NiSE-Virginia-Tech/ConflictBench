Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/me/zhyd/oauth/utils/AuthChecker.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/me/zhyd/oauth/utils/AuthChecker.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/me/zhyd/oauth/utils/AuthChecker.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/me/zhyd/oauth/utils/AuthChecker.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/me/zhyd/oauth/utils/AuthChecker.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/me/zhyd/oauth/utils/AuthChecker.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> me : Folder]
					[NT -> zhyd : Folder]
						[NT -> oauth : Folder]
							[NT -> utils : Folder]
								[NT -> AuthChecker.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package me.zhyd.oauth.utils;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.config.AuthConfig{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.config.AuthConfig;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.config.AuthSource{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.config.AuthSource;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.exception.AuthException{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.exception.AuthException;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.model.AuthCallback{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.model.AuthCallback;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.model.AuthResponseStatus{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.model.AuthResponseStatus;" compose:Replacement merge: Default]
										[NT -> AuthChecker : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> AuthChecker : Id "AuthChecker" compose:Replacement merge: Default]
											[T -> isSupportedAuth(AuthConfig-AuthConfig-AuthSource-AuthSource) : MethodDecl "public static boolean isSupportedAuth(AuthConfig config, AuthSource source) {         boolean isSupported = StringUtils.isNotEmpty(config.getClientId()) && StringUtils.isNotEmpty(config.getClientSecret()) && StringUtils.isNotEmpty(config.getRedirectUri());         if (isSupported && AuthSource.ALIPAY == source) {             isSupported = StringUtils.isNotEmpty(config.getAlipayPublicKey());         }         if (isSupported && AuthSource.STACK_OVERFLOW == source) {             isSupported = StringUtils.isNotEmpty(config.getStackOverflowKey());         }         return isSupported;     }" compose:Replacement merge: LineBased]
											[T -> checkConfig(AuthConfig-AuthConfig-AuthSource-AuthSource) : MethodDecl "public static void checkConfig(AuthConfig config, AuthSource source) {         String redirectUri = config.getRedirectUri();         if (!GlobalAuthUtil.isHttpProtocol(redirectUri) && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // facebook的回调地址必须为https的链接         if (AuthSource.FACEBOOK == source && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1         if (AuthSource.ALIPAY == source && GlobalAuthUtil.isLocalHost(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }     }" compose:Replacement merge: LineBased]
											[T -> checkCode(String-String) : MethodDecl "public static void checkCode(String code) {         if (StringUtils.isEmpty(code)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_CODE);         }     }" compose:Replacement merge: LineBased]
											[T -> checkState(AuthCallback-AuthCallback) : MethodDecl "public static void checkState(AuthCallback authCallback) {         if (!authCallback.checkState()) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REQUEST);         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> me : Folder]
					[NT -> zhyd : Folder]
						[NT -> oauth : Folder]
							[NT -> utils : Folder]
								[NT -> AuthChecker.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package me.zhyd.oauth.utils;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.config.AuthConfig{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.config.AuthConfig;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.config.AuthSource{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.config.AuthSource;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.exception.AuthException{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.exception.AuthException;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.model.AuthResponseStatus{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.model.AuthResponseStatus;" compose:Replacement merge: Default]
										[NT -> AuthChecker : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> AuthChecker : Id "AuthChecker" compose:Replacement merge: Default]
											[T -> isSupportedAuth(AuthConfig-AuthConfig-AuthSource-AuthSource) : MethodDecl "public static boolean isSupportedAuth(AuthConfig config, AuthSource source) {         boolean isSupported = StringUtils.isNotEmpty(config.getClientId()) && StringUtils.isNotEmpty(config.getClientSecret()) && StringUtils.isNotEmpty(config.getRedirectUri());         if (isSupported && AuthSource.ALIPAY == source) {             isSupported = StringUtils.isNotEmpty(config.getAlipayPublicKey());         }         if (isSupported && AuthSource.STACK_OVERFLOW == source) {             isSupported = StringUtils.isNotEmpty(config.getStackOverflowKey());         }         return isSupported;     }" compose:Replacement merge: LineBased]
											[T -> checkConfig(AuthConfig-AuthConfig-AuthSource-AuthSource) : MethodDecl "public static void checkConfig(AuthConfig config, AuthSource source) {         String redirectUri = config.getRedirectUri();         if (!GlobalAuthUtil.isHttpProtocol(redirectUri) && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // facebook的回调地址必须为https的链接         if (AuthSource.FACEBOOK == source && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1         if (AuthSource.ALIPAY == source && GlobalAuthUtil.isLocalHost(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }     }" compose:Replacement merge: LineBased]
											[T -> checkCode(String-String) : MethodDecl "public static void checkCode(String code) {         if (StringUtils.isEmpty(code)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_CODE);         }     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> me : Folder]
					[NT -> zhyd : Folder]
						[NT -> oauth : Folder]
							[NT -> utils : Folder]
								[NT -> AuthChecker.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package me.zhyd.oauth.utils;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.config.AuthConfig{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.config.AuthConfig;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.config.AuthSource{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.config.AuthSource;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.exception.AuthException{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.exception.AuthException;" compose:Replacement merge: Default]
										[T -> me.zhyd.oauth.enums.AuthResponseStatus{ImportPackage} : ImportDeclaration "import me.zhyd.oauth.enums.AuthResponseStatus;" compose:Replacement merge: Default]
										[NT -> AuthChecker : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> AuthChecker : Id "AuthChecker" compose:Replacement merge: Default]
											[T -> isSupportedAuth(AuthConfig-AuthConfig-AuthSource-AuthSource) : MethodDecl "public static boolean isSupportedAuth(AuthConfig config, AuthSource source) {         boolean isSupported = StringUtils.isNotEmpty(config.getClientId()) && StringUtils.isNotEmpty(config.getClientSecret()) && StringUtils.isNotEmpty(config.getRedirectUri());         if (isSupported && AuthSource.ALIPAY == source) {             isSupported = StringUtils.isNotEmpty(config.getAlipayPublicKey());         }         if (isSupported && AuthSource.STACK_OVERFLOW == source) {             isSupported = StringUtils.isNotEmpty(config.getStackOverflowKey());         }         return isSupported;     }" compose:Replacement merge: LineBased]
											[T -> checkConfig(AuthConfig-AuthConfig-AuthSource-AuthSource) : MethodDecl "public static void checkConfig(AuthConfig config, AuthSource source) {         String redirectUri = config.getRedirectUri();         if (!GlobalAuthUtil.isHttpProtocol(redirectUri) && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // facebook的回调地址必须为https的链接         if (AuthSource.FACEBOOK == source && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1         if (AuthSource.ALIPAY == source && GlobalAuthUtil.isLocalHost(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }     }" compose:Replacement merge: LineBased]
											[T -> checkCode(String-String) : MethodDecl "public static void checkCode(String code) {         if (StringUtils.isEmpty(code)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_CODE);         }     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> me : Folder]
					[NT -> zhyd : Folder]
						[NT -> oauth : Folder]
							[NT -> utils : Folder]
								[NT -> AuthChecker.java.merge : .java.merge-File]
									[T -> AuthChecker.java : .java-Content "package me.zhyd.oauth.utils;  import me.zhyd.oauth.config.AuthConfig; import me.zhyd.oauth.config.AuthSource; import me.zhyd.oauth.exception.AuthException; import me.zhyd.oauth.model.AuthCallback; import me.zhyd.oauth.model.AuthResponseStatus;  /**  * 授权配置类的校验器  *  * @author yadong.zhang (yadong.zhang0415(a)gmail.com)  * @since 1.6.1-beta  */ public class AuthChecker {      /**      * 是否支持第三方登录      *      * @param config config      * @param source source      * @return true or false      * @since 1.6.1-beta      */     public static boolean isSupportedAuth(AuthConfig config, AuthSource source) {         boolean isSupported = StringUtils.isNotEmpty(config.getClientId()) && StringUtils.isNotEmpty(config.getClientSecret()) && StringUtils.isNotEmpty(config.getRedirectUri());         if (isSupported && AuthSource.ALIPAY == source) {             isSupported = StringUtils.isNotEmpty(config.getAlipayPublicKey());         }         if (isSupported && AuthSource.STACK_OVERFLOW == source) {             isSupported = StringUtils.isNotEmpty(config.getStackOverflowKey());         }         return isSupported;     }      /**      * 检查配置合法性。针对部分平台， 对redirect uri有特定要求。一般来说redirect uri都是http://，而对于facebook平台， redirect uri 必须是https的链接      *      * @param config config      * @param source source      * @since 1.6.1-beta      */     public static void checkConfig(AuthConfig config, AuthSource source) {         String redirectUri = config.getRedirectUri();         if (!GlobalAuthUtil.isHttpProtocol(redirectUri) && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // facebook的回调地址必须为https的链接         if (AuthSource.FACEBOOK == source && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1         if (AuthSource.ALIPAY == source && GlobalAuthUtil.isLocalHost(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }     }      /**      * 校验回调传回的code      *      * @param code 回调时传回的code      * @since 1.8.0      */     public static void checkCode(String code) {         if (StringUtils.isEmpty(code)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_CODE);         }     }      /**      * 校验回调传回的state      *      * @param authCallback 回调      */     public static void checkState(AuthCallback authCallback) {         if (!authCallback.checkState()) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REQUEST);         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> me : Folder]
					[NT -> zhyd : Folder]
						[NT -> oauth : Folder]
							[NT -> utils : Folder]
								[NT -> AuthChecker.java.merge : .java.merge-File]
									[T -> AuthChecker.java : .java-Content "package me.zhyd.oauth.utils;  import me.zhyd.oauth.config.AuthConfig; import me.zhyd.oauth.config.AuthSource; import me.zhyd.oauth.exception.AuthException; import me.zhyd.oauth.model.AuthResponseStatus;  /**  * 授权配置类的校验器  *  * @author yadong.zhang (yadong.zhang0415(a)gmail.com)  * @since 1.6.1-beta  */ public class AuthChecker {      /**      * 是否支持第三方登录      *      * @param config config      * @param source source      * @return true or false      * @since 1.6.1-beta      */     public static boolean isSupportedAuth(AuthConfig config, AuthSource source) {         boolean isSupported = StringUtils.isNotEmpty(config.getClientId()) && StringUtils.isNotEmpty(config.getClientSecret()) && StringUtils.isNotEmpty(config.getRedirectUri());         if (isSupported && AuthSource.ALIPAY == source) {             isSupported = StringUtils.isNotEmpty(config.getAlipayPublicKey());         }         if (isSupported && AuthSource.STACK_OVERFLOW == source) {             isSupported = StringUtils.isNotEmpty(config.getStackOverflowKey());         }         return isSupported;     }      /**      * 检查配置合法性。针对部分平台， 对redirect uri有特定要求。一般来说redirect uri都是http://，而对于facebook平台， redirect uri 必须是https的链接      *      * @param config config      * @param source source      * @since 1.6.1-beta      */     public static void checkConfig(AuthConfig config, AuthSource source) {         String redirectUri = config.getRedirectUri();         if (!GlobalAuthUtil.isHttpProtocol(redirectUri) && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // facebook的回调地址必须为https的链接         if (AuthSource.FACEBOOK == source && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1         if (AuthSource.ALIPAY == source && GlobalAuthUtil.isLocalHost(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }     }      /**      * 校验回调传回的code      *      * @param code 回调时传回的code      * @since 1.8.0      */     public static void checkCode(String code) {         if (StringUtils.isEmpty(code)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_CODE);         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> me : Folder]
					[NT -> zhyd : Folder]
						[NT -> oauth : Folder]
							[NT -> utils : Folder]
								[NT -> AuthChecker.java.merge : .java.merge-File]
									[T -> AuthChecker.java : .java-Content "package me.zhyd.oauth.utils;  import me.zhyd.oauth.config.AuthConfig; import me.zhyd.oauth.config.AuthSource; import me.zhyd.oauth.exception.AuthException; import me.zhyd.oauth.enums.AuthResponseStatus;  /**  * 授权配置类的校验器  *  * @author yadong.zhang (yadong.zhang0415(a)gmail.com)  * @since 1.6.1-beta  */ public class AuthChecker {      /**      * 是否支持第三方登录      *      * @param config config      * @param source source      * @return true or false      * @since 1.6.1-beta      */     public static boolean isSupportedAuth(AuthConfig config, AuthSource source) {         boolean isSupported = StringUtils.isNotEmpty(config.getClientId()) && StringUtils.isNotEmpty(config.getClientSecret()) && StringUtils.isNotEmpty(config.getRedirectUri());         if (isSupported && AuthSource.ALIPAY == source) {             isSupported = StringUtils.isNotEmpty(config.getAlipayPublicKey());         }         if (isSupported && AuthSource.STACK_OVERFLOW == source) {             isSupported = StringUtils.isNotEmpty(config.getStackOverflowKey());         }         return isSupported;     }      /**      * 检查配置合法性。针对部分平台， 对redirect uri有特定要求。一般来说redirect uri都是http://，而对于facebook平台， redirect uri 必须是https的链接      *      * @param config config      * @param source source      * @since 1.6.1-beta      */     public static void checkConfig(AuthConfig config, AuthSource source) {         String redirectUri = config.getRedirectUri();         if (!GlobalAuthUtil.isHttpProtocol(redirectUri) && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // facebook的回调地址必须为https的链接         if (AuthSource.FACEBOOK == source && !GlobalAuthUtil.isHttpsProtocol(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }         // 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1         if (AuthSource.ALIPAY == source && GlobalAuthUtil.isLocalHost(redirectUri)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI);         }     }      /**      * 校验回调传回的code      *      * @param code 回调时传回的code      * @since 1.8.0      */     public static void checkCode(String code) {         if (StringUtils.isEmpty(code)) {             throw new AuthException(AuthResponseStatus.ILLEGAL_CODE);         }     } } " compose:StringConcatenation merge: LineBased]
