Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/services/src/main/java/org/jd/gui/service/indexer/ZipFileIndexerProvider.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/services/src/main/java/org/jd/gui/service/indexer/ZipFileIndexerProvider.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/services/src/main/java/org/jd/gui/service/indexer/ZipFileIndexerProvider.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/services/src/main/java/org/jd/gui/service/indexer/ZipFileIndexerProvider.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/services/src/main/java/org/jd/gui/service/indexer/ZipFileIndexerProvider.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/services/src/main/java/org/jd/gui/service/indexer/ZipFileIndexerProvider.java
[NT -> left : Feature]
	[NT -> services : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> jd : Folder]
							[NT -> gui : Folder]
								[NT -> service : Folder]
									[NT -> indexer : Folder]
										[NT -> ZipFileIndexerProvider.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.jd.gui.service.indexer;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.API{ImportPackage} : ImportDeclaration "import org.jd.gui.api.API;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.model.Container{ImportPackage} : ImportDeclaration "import org.jd.gui.api.model.Container;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.model.Indexes{ImportPackage} : ImportDeclaration "import org.jd.gui.api.model.Indexes;" compose:Replacement merge: Default]
												[T -> org.jd.gui.spi.Indexer{ImportPackage} : ImportDeclaration "import org.jd.gui.spi.Indexer;" compose:Replacement merge: Default]
												[NT -> ZipFileIndexerProvider : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> ZipFileIndexerProvider : Id "ZipFileIndexerProvider" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends AbstractIndexerProvider" compose:Replacement merge: Default]
													[T -> getSelectors({FormalParametersInternal}) : MethodDecl "@Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear", "*:file:*.aar", "*:file:*.jmod", "*:file:*.kar"); }" compose:Replacement merge: LineBased]
													[T -> index(API-API-Container.Entry-Container.Entry-Indexes-Indexes) : MethodDecl "@Override     public void index(API api, Container.Entry entry, Indexes indexes) {         for (Container.Entry e : entry.getChildren()) {             if (e.isDirectory()) {                 index(api, e, indexes);             } else {                 Indexer indexer = api.getIndexer(e);                  if (indexer != null) {                     indexer.index(api, e, indexes);                 }             }         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> services : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> jd : Folder]
							[NT -> gui : Folder]
								[NT -> service : Folder]
									[NT -> indexer : Folder]
										[NT -> ZipFileIndexerProvider.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.jd.gui.service.indexer;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.API{ImportPackage} : ImportDeclaration "import org.jd.gui.api.API;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.model.Container{ImportPackage} : ImportDeclaration "import org.jd.gui.api.model.Container;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.model.Indexes{ImportPackage} : ImportDeclaration "import org.jd.gui.api.model.Indexes;" compose:Replacement merge: Default]
												[T -> org.jd.gui.spi.Indexer{ImportPackage} : ImportDeclaration "import org.jd.gui.spi.Indexer;" compose:Replacement merge: Default]
												[NT -> ZipFileIndexerProvider : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> ZipFileIndexerProvider : Id "ZipFileIndexerProvider" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends AbstractIndexerProvider" compose:Replacement merge: Default]
													[T -> getSelectors({FormalParametersInternal}) : MethodDecl "@Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear", "*:file:*.aar", "*:file:*.jmod"); }" compose:Replacement merge: LineBased]
													[T -> index(API-API-Container.Entry-Container.Entry-Indexes-Indexes) : MethodDecl "@Override     public void index(API api, Container.Entry entry, Indexes indexes) {         for (Container.Entry e : entry.getChildren()) {             if (e.isDirectory()) {                 index(api, e, indexes);             } else {                 Indexer indexer = api.getIndexer(e);                  if (indexer != null) {                     indexer.index(api, e, indexes);                 }             }         }     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> services : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> jd : Folder]
							[NT -> gui : Folder]
								[NT -> service : Folder]
									[NT -> indexer : Folder]
										[NT -> ZipFileIndexerProvider.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.jd.gui.service.indexer;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.API{ImportPackage} : ImportDeclaration "import org.jd.gui.api.API;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.model.Container{ImportPackage} : ImportDeclaration "import org.jd.gui.api.model.Container;" compose:Replacement merge: Default]
												[T -> org.jd.gui.api.model.Indexes{ImportPackage} : ImportDeclaration "import org.jd.gui.api.model.Indexes;" compose:Replacement merge: Default]
												[T -> org.jd.gui.spi.Indexer{ImportPackage} : ImportDeclaration "import org.jd.gui.spi.Indexer;" compose:Replacement merge: Default]
												[NT -> ZipFileIndexerProvider : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> ZipFileIndexerProvider : Id "ZipFileIndexerProvider" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends AbstractIndexerProvider" compose:Replacement merge: Default]
													[T -> getSelectors({FormalParametersInternal}) : MethodDecl "@Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear", "*:file:*.aar"); }" compose:Replacement merge: LineBased]
													[T -> index(API-API-Container.Entry-Container.Entry-Indexes-Indexes) : MethodDecl "@Override     public void index(API api, Container.Entry entry, Indexes indexes) {         for (Container.Entry e : entry.getChildren()) {             if (e.isDirectory()) {                 index(api, e, indexes);             } else {                 Indexer indexer = api.getIndexer(e);                  if (indexer != null) {                     indexer.index(api, e, indexes);                 }             }         }     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> services : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> jd : Folder]
							[NT -> gui : Folder]
								[NT -> service : Folder]
									[NT -> indexer : Folder]
										[NT -> ZipFileIndexerProvider.java.merge : .java.merge-File]
											[T -> ZipFileIndexerProvider.java : .java-Content "/*  * Copyright (c) 2008-2019 Emmanuel Dupuy.  * This project is distributed under the GPLv3 license.  * This is a Copyleft license that gives the user the right to use,  * copy and modify the code freely for non-commercial purposes.  */  package org.jd.gui.service.indexer;  import org.jd.gui.api.API; import org.jd.gui.api.model.Container; import org.jd.gui.api.model.Indexes; import org.jd.gui.spi.Indexer;  public class ZipFileIndexerProvider extends AbstractIndexerProvider {      @Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear", "*:file:*.aar", "*:file:*.jmod", "*:file:*.kar"); }      @Override     public void index(API api, Container.Entry entry, Indexes indexes) {         for (Container.Entry e : entry.getChildren()) {             if (e.isDirectory()) {                 index(api, e, indexes);             } else {                 Indexer indexer = api.getIndexer(e);                  if (indexer != null) {                     indexer.index(api, e, indexes);                 }             }         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> services : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> jd : Folder]
							[NT -> gui : Folder]
								[NT -> service : Folder]
									[NT -> indexer : Folder]
										[NT -> ZipFileIndexerProvider.java.merge : .java.merge-File]
											[T -> ZipFileIndexerProvider.java : .java-Content "/*  * Copyright (c) 2008-2019 Emmanuel Dupuy.  * This project is distributed under the GPLv3 license.  * This is a Copyleft license that gives the user the right to use,  * copy and modify the code freely for non-commercial purposes.  */  package org.jd.gui.service.indexer;  import org.jd.gui.api.API; import org.jd.gui.api.model.Container; import org.jd.gui.api.model.Indexes; import org.jd.gui.spi.Indexer;  public class ZipFileIndexerProvider extends AbstractIndexerProvider {      @Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear", "*:file:*.aar", "*:file:*.jmod"); }      @Override     public void index(API api, Container.Entry entry, Indexes indexes) {         for (Container.Entry e : entry.getChildren()) {             if (e.isDirectory()) {                 index(api, e, indexes);             } else {                 Indexer indexer = api.getIndexer(e);                  if (indexer != null) {                     indexer.index(api, e, indexes);                 }             }         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> services : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> jd : Folder]
							[NT -> gui : Folder]
								[NT -> service : Folder]
									[NT -> indexer : Folder]
										[NT -> ZipFileIndexerProvider.java.merge : .java.merge-File]
											[T -> ZipFileIndexerProvider.java : .java-Content "/*  * Copyright (c) 2008-2019 Emmanuel Dupuy.  * This project is distributed under the GPLv3 license.  * This is a Copyleft license that gives the user the right to use,  * copy and modify the code freely for non-commercial purposes.  */  package org.jd.gui.service.indexer;  import org.jd.gui.api.API; import org.jd.gui.api.model.Container; import org.jd.gui.api.model.Indexes; import org.jd.gui.spi.Indexer;  public class ZipFileIndexerProvider extends AbstractIndexerProvider {      @Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear", "*:file:*.aar"); }      @Override     public void index(API api, Container.Entry entry, Indexes indexes) {         for (Container.Entry e : entry.getChildren()) {             if (e.isDirectory()) {                 index(api, e, indexes);             } else {                 Indexer indexer = api.getIndexer(e);                  if (indexer != null) {                     indexer.index(api, e, indexes);                 }             }         }     } } " compose:StringConcatenation merge: LineBased]
