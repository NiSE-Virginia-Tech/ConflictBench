Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
[NT -> left : Feature]
	[NT -> sample : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> zhihu : Folder]
							[NT -> matisse : Folder]
								[NT -> sample : Folder]
									[NT -> SampleActivity.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.zhihu.matisse.sample;" compose:Replacement merge: Default]
											[T -> android.Manifest{ImportPackage} : ImportDeclaration "import android.Manifest;" compose:Replacement merge: Default]
											[T -> android.content.Intent{ImportPackage} : ImportDeclaration "import android.content.Intent;" compose:Replacement merge: Default]
											[T -> android.content.pm.ActivityInfo{ImportPackage} : ImportDeclaration "import android.content.pm.ActivityInfo;" compose:Replacement merge: Default]
											[T -> android.net.Uri{ImportPackage} : ImportDeclaration "import android.net.Uri;" compose:Replacement merge: Default]
											[T -> android.os.Bundle{ImportPackage} : ImportDeclaration "import android.os.Bundle;" compose:Replacement merge: Default]
											[T -> androidx.annotation.NonNull{ImportPackage} : ImportDeclaration "import androidx.annotation.NonNull;" compose:Replacement merge: Default]
											[T -> androidx.appcompat.app.AppCompatActivity{ImportPackage} : ImportDeclaration "import androidx.appcompat.app.AppCompatActivity;" compose:Replacement merge: Default]
											[T -> androidx.recyclerview.widget.LinearLayoutManager{ImportPackage} : ImportDeclaration "import androidx.recyclerview.widget.LinearLayoutManager;" compose:Replacement merge: Default]
											[T -> androidx.recyclerview.widget.RecyclerView{ImportPackage} : ImportDeclaration "import androidx.recyclerview.widget.RecyclerView;" compose:Replacement merge: Default]
											[T -> android.util.Log{ImportPackage} : ImportDeclaration "import android.util.Log;" compose:Replacement merge: Default]
											[T -> android.view.LayoutInflater{ImportPackage} : ImportDeclaration "import android.view.LayoutInflater;" compose:Replacement merge: Default]
											[T -> android.view.View{ImportPackage} : ImportDeclaration "import android.view.View;" compose:Replacement merge: Default]
											[T -> android.view.ViewGroup{ImportPackage} : ImportDeclaration "import android.view.ViewGroup;" compose:Replacement merge: Default]
											[T -> android.widget.TextView{ImportPackage} : ImportDeclaration "import android.widget.TextView;" compose:Replacement merge: Default]
											[T -> android.widget.Toast{ImportPackage} : ImportDeclaration "import android.widget.Toast;" compose:Replacement merge: Default]
											[T -> com.tbruyelle.rxpermissions2.RxPermissions{ImportPackage} : ImportDeclaration "import com.tbruyelle.rxpermissions2.RxPermissions;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.Matisse{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.Matisse;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.MimeType{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.MimeType;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.engine.impl.PicassoEngine{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.engine.impl.PicassoEngine;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.filter.Filter{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.filter.Filter;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.internal.entity.CaptureStrategy{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.internal.entity.CaptureStrategy;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.listener.OnCheckedListener{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.listener.OnCheckedListener;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.listener.OnSelectedListener{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.listener.OnSelectedListener;" compose:Replacement merge: Default]
											[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
											[T -> io.reactivex.Observer{ImportPackage} : ImportDeclaration "import io.reactivex.Observer;" compose:Replacement merge: Default]
											[T -> io.reactivex.disposables.Disposable{ImportPackage} : ImportDeclaration "import io.reactivex.disposables.Disposable;" compose:Replacement merge: Default]
											[NT -> SampleActivity : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> SampleActivity : Id "SampleActivity" compose:Replacement merge: Default]
												[T -> - : ExtendsList "extends AppCompatActivity" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements View.OnClickListener" compose:Replacement merge: SemanticConflict]
												[T -> REQUEST_CODE_CHOOSE : FieldDecl "private static final int REQUEST_CODE_CHOOSE = 23;" compose:Replacement merge: SemanticConflict]
												[T -> mAdapter : FieldDecl "private UriAdapter mAdapter;" compose:Replacement merge: SemanticConflict]
												[T -> onCreate(Bundle-Bundle) : MethodDecl "@Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         findViewById(R.id.zhihu).setOnClickListener(this);         findViewById(R.id.dracula).setOnClickListener(this);          RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview);         recyclerView.setLayoutManager(new LinearLayoutManager(this));         recyclerView.setAdapter(mAdapter = new UriAdapter());     }" compose:Replacement merge: LineBased]
												[T -> onClick(View-View) : MethodDecl "@Override     public void onClick(final View v) {         RxPermissions rxPermissions = new RxPermissions(this);         rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)                 .subscribe(new Observer<Boolean>() {                     @Override                     public void onSubscribe(Disposable d) {                      }                      @Override                     public void onNext(Boolean aBoolean) {                         if (aBoolean) {                             switch (v.getId()) {                                 case R.id.zhihu:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage(), false)                                             .countable(true)                                             .capture(true)                                             .captureStrategy(                                                     new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))                                             .maxSelectable(9)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .gridExpectedSize(                                                     getResources().getDimensionPixelSize(R.dimen.grid_expected_size))                                             .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)                                             .thumbnailScale(0.85f) //                                            .imageEngine(new GlideEngine())  // for glide-V3                                             .imageEngine(new Glide4Engine())    // for glide-V4                                             .setOnSelectedListener(new OnSelectedListener() {                                                 @Override                                                 public void onSelected(                                                         @NonNull List<Uri> uriList, @NonNull List<String> pathList) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("onSelected", "onSelected: pathList=" + pathList);                                                  }                                             })                                             .showSingleMediaType(true)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .autoHideToolbarOnSingleTap(true)                                             .setOnCheckedListener(new OnCheckedListener() {                                                 @Override                                                 public void onCheck(boolean isChecked) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("isChecked", "onCheck: isChecked=" + isChecked);                                                 }                                             })                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 case R.id.dracula:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage())                                             .theme(R.style.Matisse_Dracula)                                             .countable(false)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .maxSelectable(9)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .imageEngine(new PicassoEngine())                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 default:                                     break;                             }                             mAdapter.setData(null, null);                         } else {                             Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)                                     .show();                         }                     }                      @Override                     public void onError(Throwable e) {                      }                      @Override                     public void onComplete() {                      }                 });     }" compose:Replacement merge: LineBased]
												[T -> onActivityResult(int-int-int-int-Intent-Intent) : MethodDecl "@Override     protected void onActivityResult(int requestCode, int resultCode, Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {             mAdapter.setData(Matisse.obtainResult(data), Matisse.obtainPathResult(data));             Log.e("OnActivityResult ", String.valueOf(Matisse.obtainOriginalState(data)));         }     }" compose:Replacement merge: LineBased]
												[NT -> UriAdapter : InnerClassDecl]
													[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> UriAdapter : Id "UriAdapter" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends RecyclerView.Adapter<UriAdapter.UriViewHolder>" compose:Replacement merge: Default]
													[T -> mUris : FieldDecl "private List<Uri> mUris;" compose:Replacement merge: SemanticConflict]
													[T -> mPaths : FieldDecl "private List<String> mPaths;" compose:Replacement merge: SemanticConflict]
													[T -> setData(List<Uri>-List<Uri>-List<String>-List<String>) : MethodDecl "void setData(List<Uri> uris, List<String> paths) {             mUris = uris;             mPaths = paths;             notifyDataSetChanged();         }" compose:Replacement merge: LineBased]
													[T -> onCreateViewHolder(ViewGroup-ViewGroup-int-int) : MethodDecl "@Override         public UriViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {             return new UriViewHolder(                     LayoutInflater.from(parent.getContext()).inflate(R.layout.uri_item, parent, false));         }" compose:Replacement merge: LineBased]
													[T -> onBindViewHolder(UriViewHolder-UriViewHolder-int-int) : MethodDecl "@Override         public void onBindViewHolder(UriViewHolder holder, int position) {             holder.mUri.setText(mUris.get(position).toString());             holder.mPath.setText(mPaths.get(position));              holder.mUri.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);             holder.mPath.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);         }" compose:Replacement merge: LineBased]
													[T -> getItemCount({FormalParametersInternal}) : MethodDecl "@Override         public int getItemCount() {             return mUris == null ? 0 : mUris.size();         }" compose:Replacement merge: LineBased]
													[NT -> UriViewHolder : InnerClassDecl]
														[T -> - : Modifiers "static" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> UriViewHolder : Id "UriViewHolder" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends RecyclerView.ViewHolder" compose:Replacement merge: Default]
														[T -> mUri : FieldDecl "private TextView mUri;" compose:Replacement merge: SemanticConflict]
														[T -> mPath : FieldDecl "private TextView mPath;" compose:Replacement merge: SemanticConflict]
														[T -> UriViewHolder(View-View) : ConstructorDecl "UriViewHolder(View contentView) {                 super(contentView);                 mUri = (TextView) contentView.findViewById(R.id.uri);                 mPath = (TextView) contentView.findViewById(R.id.path);             }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> sample : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> zhihu : Folder]
							[NT -> matisse : Folder]
								[NT -> sample : Folder]
									[NT -> SampleActivity.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.zhihu.matisse.sample;" compose:Replacement merge: Default]
											[T -> android.Manifest{ImportPackage} : ImportDeclaration "import android.Manifest;" compose:Replacement merge: Default]
											[T -> android.content.Intent{ImportPackage} : ImportDeclaration "import android.content.Intent;" compose:Replacement merge: Default]
											[T -> android.content.pm.ActivityInfo{ImportPackage} : ImportDeclaration "import android.content.pm.ActivityInfo;" compose:Replacement merge: Default]
											[T -> android.net.Uri{ImportPackage} : ImportDeclaration "import android.net.Uri;" compose:Replacement merge: Default]
											[T -> android.os.Bundle{ImportPackage} : ImportDeclaration "import android.os.Bundle;" compose:Replacement merge: Default]
											[T -> androidx.annotation.NonNull{ImportPackage} : ImportDeclaration "import androidx.annotation.NonNull;" compose:Replacement merge: Default]
											[T -> androidx.appcompat.app.AppCompatActivity{ImportPackage} : ImportDeclaration "import androidx.appcompat.app.AppCompatActivity;" compose:Replacement merge: Default]
											[T -> androidx.recyclerview.widget.LinearLayoutManager{ImportPackage} : ImportDeclaration "import androidx.recyclerview.widget.LinearLayoutManager;" compose:Replacement merge: Default]
											[T -> androidx.recyclerview.widget.RecyclerView{ImportPackage} : ImportDeclaration "import androidx.recyclerview.widget.RecyclerView;" compose:Replacement merge: Default]
											[T -> android.util.Log{ImportPackage} : ImportDeclaration "import android.util.Log;" compose:Replacement merge: Default]
											[T -> android.view.LayoutInflater{ImportPackage} : ImportDeclaration "import android.view.LayoutInflater;" compose:Replacement merge: Default]
											[T -> android.view.View{ImportPackage} : ImportDeclaration "import android.view.View;" compose:Replacement merge: Default]
											[T -> android.view.ViewGroup{ImportPackage} : ImportDeclaration "import android.view.ViewGroup;" compose:Replacement merge: Default]
											[T -> android.widget.TextView{ImportPackage} : ImportDeclaration "import android.widget.TextView;" compose:Replacement merge: Default]
											[T -> android.widget.Toast{ImportPackage} : ImportDeclaration "import android.widget.Toast;" compose:Replacement merge: Default]
											[T -> com.tbruyelle.rxpermissions2.RxPermissions{ImportPackage} : ImportDeclaration "import com.tbruyelle.rxpermissions2.RxPermissions;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.Matisse{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.Matisse;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.MimeType{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.MimeType;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.engine.impl.PicassoEngine{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.engine.impl.PicassoEngine;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.filter.Filter{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.filter.Filter;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.internal.entity.CaptureStrategy{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.internal.entity.CaptureStrategy;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.listener.OnCheckedListener{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.listener.OnCheckedListener;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.listener.OnSelectedListener{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.listener.OnSelectedListener;" compose:Replacement merge: Default]
											[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
											[T -> io.reactivex.Observer{ImportPackage} : ImportDeclaration "import io.reactivex.Observer;" compose:Replacement merge: Default]
											[T -> io.reactivex.disposables.Disposable{ImportPackage} : ImportDeclaration "import io.reactivex.disposables.Disposable;" compose:Replacement merge: Default]
											[NT -> SampleActivity : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> SampleActivity : Id "SampleActivity" compose:Replacement merge: Default]
												[T -> - : ExtendsList "extends AppCompatActivity" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements View.OnClickListener" compose:Replacement merge: SemanticConflict]
												[T -> REQUEST_CODE_CHOOSE : FieldDecl "private static final int REQUEST_CODE_CHOOSE = 23;" compose:Replacement merge: SemanticConflict]
												[T -> mAdapter : FieldDecl "private UriAdapter mAdapter;" compose:Replacement merge: SemanticConflict]
												[T -> onCreate(Bundle-Bundle) : MethodDecl "@Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         findViewById(R.id.zhihu).setOnClickListener(this);         findViewById(R.id.dracula).setOnClickListener(this);          RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview);         recyclerView.setLayoutManager(new LinearLayoutManager(this));         recyclerView.setAdapter(mAdapter = new UriAdapter());     }" compose:Replacement merge: LineBased]
												[T -> onClick(View-View) : MethodDecl "@Override     public void onClick(final View v) {         RxPermissions rxPermissions = new RxPermissions(this);         rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)                 .subscribe(new Observer<Boolean>() {                     @Override                     public void onSubscribe(Disposable d) {                      }                      @Override                     public void onNext(Boolean aBoolean) {                         if (aBoolean) {                             switch (v.getId()) {                                 case R.id.zhihu:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofAll(), false)                                             .countable(true)                                             .capture(true)                                             .captureStrategy(                                                     new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))                                             .maxSelectable(9)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .gridExpectedSize(                                                     getResources().getDimensionPixelSize(R.dimen.grid_expected_size))                                             .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)                                             .thumbnailScale(0.85f) //                                            .imageEngine(new GlideEngine())  // for glide-V3                                             .imageEngine(new Glide4Engine())    // for glide-V4                                             .setOnSelectedListener(new OnSelectedListener() {                                                 @Override                                                 public void onSelected(                                                         @NonNull List<Uri> uriList, @NonNull List<String> pathList) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("onSelected", "onSelected: pathList=" + pathList);                                                  }                                             })                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .autoHideToolbarOnSingleTap(true)                                             .setOnCheckedListener(new OnCheckedListener() {                                                 @Override                                                 public void onCheck(boolean isChecked) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("isChecked", "onCheck: isChecked=" + isChecked);                                                 }                                             })                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 case R.id.dracula:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage())                                             .theme(R.style.Matisse_Dracula)                                             .countable(false)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .maxSelectable(9)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .imageEngine(new PicassoEngine())                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 default:                                     break;                             }                             mAdapter.setData(null, null);                         } else {                             Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)                                     .show();                         }                     }                      @Override                     public void onError(Throwable e) {                      }                      @Override                     public void onComplete() {                      }                 });     }" compose:Replacement merge: LineBased]
												[T -> onActivityResult(int-int-int-int-Intent-Intent) : MethodDecl "@Override     protected void onActivityResult(int requestCode, int resultCode, Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {             mAdapter.setData(Matisse.obtainResult(data), Matisse.obtainPathResult(data));             Log.e("OnActivityResult ", String.valueOf(Matisse.obtainOriginalState(data)));         }     }" compose:Replacement merge: LineBased]
												[NT -> UriAdapter : InnerClassDecl]
													[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> UriAdapter : Id "UriAdapter" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends RecyclerView.Adapter<UriAdapter.UriViewHolder>" compose:Replacement merge: Default]
													[T -> mUris : FieldDecl "private List<Uri> mUris;" compose:Replacement merge: SemanticConflict]
													[T -> mPaths : FieldDecl "private List<String> mPaths;" compose:Replacement merge: SemanticConflict]
													[T -> setData(List<Uri>-List<Uri>-List<String>-List<String>) : MethodDecl "void setData(List<Uri> uris, List<String> paths) {             mUris = uris;             mPaths = paths;             notifyDataSetChanged();         }" compose:Replacement merge: LineBased]
													[T -> onCreateViewHolder(ViewGroup-ViewGroup-int-int) : MethodDecl "@Override         public UriViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {             return new UriViewHolder(                     LayoutInflater.from(parent.getContext()).inflate(R.layout.uri_item, parent, false));         }" compose:Replacement merge: LineBased]
													[T -> onBindViewHolder(UriViewHolder-UriViewHolder-int-int) : MethodDecl "@Override         public void onBindViewHolder(UriViewHolder holder, int position) {             holder.mUri.setText(mUris.get(position).toString());             holder.mPath.setText(mPaths.get(position));              holder.mUri.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);             holder.mPath.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);         }" compose:Replacement merge: LineBased]
													[T -> getItemCount({FormalParametersInternal}) : MethodDecl "@Override         public int getItemCount() {             return mUris == null ? 0 : mUris.size();         }" compose:Replacement merge: LineBased]
													[NT -> UriViewHolder : InnerClassDecl]
														[T -> - : Modifiers "static" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> UriViewHolder : Id "UriViewHolder" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends RecyclerView.ViewHolder" compose:Replacement merge: Default]
														[T -> mUri : FieldDecl "private TextView mUri;" compose:Replacement merge: SemanticConflict]
														[T -> mPath : FieldDecl "private TextView mPath;" compose:Replacement merge: SemanticConflict]
														[T -> UriViewHolder(View-View) : ConstructorDecl "UriViewHolder(View contentView) {                 super(contentView);                 mUri = (TextView) contentView.findViewById(R.id.uri);                 mPath = (TextView) contentView.findViewById(R.id.path);             }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> sample : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> zhihu : Folder]
							[NT -> matisse : Folder]
								[NT -> sample : Folder]
									[NT -> SampleActivity.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.zhihu.matisse.sample;" compose:Replacement merge: Default]
											[T -> android.Manifest{ImportPackage} : ImportDeclaration "import android.Manifest;" compose:Replacement merge: Default]
											[T -> android.content.Intent{ImportPackage} : ImportDeclaration "import android.content.Intent;" compose:Replacement merge: Default]
											[T -> android.content.pm.ActivityInfo{ImportPackage} : ImportDeclaration "import android.content.pm.ActivityInfo;" compose:Replacement merge: Default]
											[T -> android.net.Uri{ImportPackage} : ImportDeclaration "import android.net.Uri;" compose:Replacement merge: Default]
											[T -> android.os.Bundle{ImportPackage} : ImportDeclaration "import android.os.Bundle;" compose:Replacement merge: Default]
											[T -> androidx.annotation.NonNull{ImportPackage} : ImportDeclaration "import androidx.annotation.NonNull;" compose:Replacement merge: Default]
											[T -> androidx.appcompat.app.AppCompatActivity{ImportPackage} : ImportDeclaration "import androidx.appcompat.app.AppCompatActivity;" compose:Replacement merge: Default]
											[T -> androidx.recyclerview.widget.LinearLayoutManager{ImportPackage} : ImportDeclaration "import androidx.recyclerview.widget.LinearLayoutManager;" compose:Replacement merge: Default]
											[T -> androidx.recyclerview.widget.RecyclerView{ImportPackage} : ImportDeclaration "import androidx.recyclerview.widget.RecyclerView;" compose:Replacement merge: Default]
											[T -> android.util.Log{ImportPackage} : ImportDeclaration "import android.util.Log;" compose:Replacement merge: Default]
											[T -> android.view.LayoutInflater{ImportPackage} : ImportDeclaration "import android.view.LayoutInflater;" compose:Replacement merge: Default]
											[T -> android.view.View{ImportPackage} : ImportDeclaration "import android.view.View;" compose:Replacement merge: Default]
											[T -> android.view.ViewGroup{ImportPackage} : ImportDeclaration "import android.view.ViewGroup;" compose:Replacement merge: Default]
											[T -> android.widget.TextView{ImportPackage} : ImportDeclaration "import android.widget.TextView;" compose:Replacement merge: Default]
											[T -> android.widget.Toast{ImportPackage} : ImportDeclaration "import android.widget.Toast;" compose:Replacement merge: Default]
											[T -> com.tbruyelle.rxpermissions2.RxPermissions{ImportPackage} : ImportDeclaration "import com.tbruyelle.rxpermissions2.RxPermissions;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.Matisse{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.Matisse;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.MimeType{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.MimeType;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.engine.impl.PicassoEngine{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.engine.impl.PicassoEngine;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.filter.Filter{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.filter.Filter;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.internal.entity.CaptureStrategy{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.internal.entity.CaptureStrategy;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.listener.OnCheckedListener{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.listener.OnCheckedListener;" compose:Replacement merge: Default]
											[T -> com.zhihu.matisse.listener.OnSelectedListener{ImportPackage} : ImportDeclaration "import com.zhihu.matisse.listener.OnSelectedListener;" compose:Replacement merge: Default]
											[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
											[T -> io.reactivex.Observer{ImportPackage} : ImportDeclaration "import io.reactivex.Observer;" compose:Replacement merge: Default]
											[T -> io.reactivex.disposables.Disposable{ImportPackage} : ImportDeclaration "import io.reactivex.disposables.Disposable;" compose:Replacement merge: Default]
											[NT -> SampleActivity : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> SampleActivity : Id "SampleActivity" compose:Replacement merge: Default]
												[T -> - : ExtendsList "extends AppCompatActivity" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements View.OnClickListener" compose:Replacement merge: SemanticConflict]
												[T -> REQUEST_CODE_CHOOSE : FieldDecl "private static final int REQUEST_CODE_CHOOSE = 23;" compose:Replacement merge: SemanticConflict]
												[T -> mAdapter : FieldDecl "private UriAdapter mAdapter;" compose:Replacement merge: SemanticConflict]
												[T -> onCreate(Bundle-Bundle) : MethodDecl "@Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         findViewById(R.id.zhihu).setOnClickListener(this);         findViewById(R.id.dracula).setOnClickListener(this);          RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview);         recyclerView.setLayoutManager(new LinearLayoutManager(this));         recyclerView.setAdapter(mAdapter = new UriAdapter());     }" compose:Replacement merge: LineBased]
												[T -> onClick(View-View) : MethodDecl "@Override     public void onClick(final View v) {         RxPermissions rxPermissions = new RxPermissions(this);         rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)                 .subscribe(new Observer<Boolean>() {                     @Override                     public void onSubscribe(Disposable d) {                      }                      @Override                     public void onNext(Boolean aBoolean) {                         if (aBoolean) {                             switch (v.getId()) {                                 case R.id.zhihu:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.of(MimeType.GIF), true)                                             .countable(true)                                             .capture(true)                                             .captureStrategy(                                                     new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))                                             .maxSelectable(9)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .gridExpectedSize(                                                     getResources().getDimensionPixelSize(R.dimen.grid_expected_size))                                             .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)                                             .thumbnailScale(0.85f) //                                            .imageEngine(new GlideEngine())  // for glide-V3                                             .imageEngine(new Glide4Engine())    // for glide-V4                                             .setOnSelectedListener(new OnSelectedListener() {                                                 @Override                                                 public void onSelected(                                                         @NonNull List<Uri> uriList, @NonNull List<String> pathList) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("onSelected", "onSelected: pathList=" + pathList);                                                  }                                             })                                             .showSingleMediaType(true)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .autoHideToolbarOnSingleTap(true)                                             .setOnCheckedListener(new OnCheckedListener() {                                                 @Override                                                 public void onCheck(boolean isChecked) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("isChecked", "onCheck: isChecked=" + isChecked);                                                 }                                             })                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 case R.id.dracula:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage())                                             .theme(R.style.Matisse_Dracula)                                             .countable(false)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .maxSelectable(9)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .imageEngine(new PicassoEngine())                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 default:                                     break;                             }                             mAdapter.setData(null, null);                         } else {                             Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)                                     .show();                         }                     }                      @Override                     public void onError(Throwable e) {                      }                      @Override                     public void onComplete() {                      }                 });     }" compose:Replacement merge: LineBased]
												[T -> onActivityResult(int-int-int-int-Intent-Intent) : MethodDecl "@Override     protected void onActivityResult(int requestCode, int resultCode, Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {             mAdapter.setData(Matisse.obtainResult(data), Matisse.obtainPathResult(data));             Log.e("OnActivityResult ", String.valueOf(Matisse.obtainOriginalState(data)));         }     }" compose:Replacement merge: LineBased]
												[NT -> UriAdapter : InnerClassDecl]
													[T -> - : Modifiers "private static" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> UriAdapter : Id "UriAdapter" compose:Replacement merge: Default]
													[T -> - : ExtendsList "extends RecyclerView.Adapter<UriAdapter.UriViewHolder>" compose:Replacement merge: Default]
													[T -> mUris : FieldDecl "private List<Uri> mUris;" compose:Replacement merge: SemanticConflict]
													[T -> mPaths : FieldDecl "private List<String> mPaths;" compose:Replacement merge: SemanticConflict]
													[T -> setData(List<Uri>-List<Uri>-List<String>-List<String>) : MethodDecl "void setData(List<Uri> uris, List<String> paths) {             mUris = uris;             mPaths = paths;             notifyDataSetChanged();         }" compose:Replacement merge: LineBased]
													[T -> onCreateViewHolder(ViewGroup-ViewGroup-int-int) : MethodDecl "@Override         public UriViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {             return new UriViewHolder(                     LayoutInflater.from(parent.getContext()).inflate(R.layout.uri_item, parent, false));         }" compose:Replacement merge: LineBased]
													[T -> onBindViewHolder(UriViewHolder-UriViewHolder-int-int) : MethodDecl "@Override         public void onBindViewHolder(UriViewHolder holder, int position) {             holder.mUri.setText(mUris.get(position).toString());             holder.mPath.setText(mPaths.get(position));              holder.mUri.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);             holder.mPath.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);         }" compose:Replacement merge: LineBased]
													[T -> getItemCount({FormalParametersInternal}) : MethodDecl "@Override         public int getItemCount() {             return mUris == null ? 0 : mUris.size();         }" compose:Replacement merge: LineBased]
													[NT -> UriViewHolder : InnerClassDecl]
														[T -> - : Modifiers "static" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> UriViewHolder : Id "UriViewHolder" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends RecyclerView.ViewHolder" compose:Replacement merge: Default]
														[T -> mUri : FieldDecl "private TextView mUri;" compose:Replacement merge: SemanticConflict]
														[T -> mPath : FieldDecl "private TextView mPath;" compose:Replacement merge: SemanticConflict]
														[T -> UriViewHolder(View-View) : ConstructorDecl "UriViewHolder(View contentView) {                 super(contentView);                 mUri = (TextView) contentView.findViewById(R.id.uri);                 mPath = (TextView) contentView.findViewById(R.id.path);             }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> sample : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> zhihu : Folder]
							[NT -> matisse : Folder]
								[NT -> sample : Folder]
									[NT -> SampleActivity.java.merge : .java.merge-File]
										[T -> SampleActivity.java : .java-Content "/*  * Copyright 2017 Zhihu Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package com.zhihu.matisse.sample;  import android.Manifest; import android.content.Intent; import android.content.pm.ActivityInfo; import android.net.Uri; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import android.widget.Toast;  import com.tbruyelle.rxpermissions2.RxPermissions; import com.zhihu.matisse.Matisse; import com.zhihu.matisse.MimeType; import com.zhihu.matisse.engine.impl.PicassoEngine; import com.zhihu.matisse.filter.Filter; import com.zhihu.matisse.internal.entity.CaptureStrategy; import com.zhihu.matisse.listener.OnCheckedListener; import com.zhihu.matisse.listener.OnSelectedListener;  import java.util.List;  import io.reactivex.Observer; import io.reactivex.disposables.Disposable;  public class SampleActivity extends AppCompatActivity implements View.OnClickListener {      private static final int REQUEST_CODE_CHOOSE = 23;      private UriAdapter mAdapter;      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         findViewById(R.id.zhihu).setOnClickListener(this);         findViewById(R.id.dracula).setOnClickListener(this);          RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview);         recyclerView.setLayoutManager(new LinearLayoutManager(this));         recyclerView.setAdapter(mAdapter = new UriAdapter());     }      @Override     public void onClick(final View v) {         RxPermissions rxPermissions = new RxPermissions(this);         rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)                 .subscribe(new Observer<Boolean>() {                     @Override                     public void onSubscribe(Disposable d) {                      }                      @Override                     public void onNext(Boolean aBoolean) {                         if (aBoolean) {                             switch (v.getId()) {                                 case R.id.zhihu:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage(), false)                                             .countable(true)                                             .capture(true)                                             .captureStrategy(                                                     new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))                                             .maxSelectable(9)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .gridExpectedSize(                                                     getResources().getDimensionPixelSize(R.dimen.grid_expected_size))                                             .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)                                             .thumbnailScale(0.85f) //                                            .imageEngine(new GlideEngine())  // for glide-V3                                             .imageEngine(new Glide4Engine())    // for glide-V4                                             .setOnSelectedListener(new OnSelectedListener() {                                                 @Override                                                 public void onSelected(                                                         @NonNull List<Uri> uriList, @NonNull List<String> pathList) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("onSelected", "onSelected: pathList=" + pathList);                                                  }                                             })                                             .showSingleMediaType(true)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .autoHideToolbarOnSingleTap(true)                                             .setOnCheckedListener(new OnCheckedListener() {                                                 @Override                                                 public void onCheck(boolean isChecked) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("isChecked", "onCheck: isChecked=" + isChecked);                                                 }                                             })                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 case R.id.dracula:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage())                                             .theme(R.style.Matisse_Dracula)                                             .countable(false)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .maxSelectable(9)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .imageEngine(new PicassoEngine())                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 default:                                     break;                             }                             mAdapter.setData(null, null);                         } else {                             Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)                                     .show();                         }                     }                      @Override                     public void onError(Throwable e) {                      }                      @Override                     public void onComplete() {                      }                 });     }      @Override     protected void onActivityResult(int requestCode, int resultCode, Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {             mAdapter.setData(Matisse.obtainResult(data), Matisse.obtainPathResult(data));             Log.e("OnActivityResult ", String.valueOf(Matisse.obtainOriginalState(data)));         }     }      private static class UriAdapter extends RecyclerView.Adapter<UriAdapter.UriViewHolder> {          private List<Uri> mUris;         private List<String> mPaths;          void setData(List<Uri> uris, List<String> paths) {             mUris = uris;             mPaths = paths;             notifyDataSetChanged();         }          @Override         public UriViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {             return new UriViewHolder(                     LayoutInflater.from(parent.getContext()).inflate(R.layout.uri_item, parent, false));         }          @Override         public void onBindViewHolder(UriViewHolder holder, int position) {             holder.mUri.setText(mUris.get(position).toString());             holder.mPath.setText(mPaths.get(position));              holder.mUri.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);             holder.mPath.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);         }          @Override         public int getItemCount() {             return mUris == null ? 0 : mUris.size();         }          static class UriViewHolder extends RecyclerView.ViewHolder {              private TextView mUri;             private TextView mPath;              UriViewHolder(View contentView) {                 super(contentView);                 mUri = (TextView) contentView.findViewById(R.id.uri);                 mPath = (TextView) contentView.findViewById(R.id.path);             }         }     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> sample : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> zhihu : Folder]
							[NT -> matisse : Folder]
								[NT -> sample : Folder]
									[NT -> SampleActivity.java.merge : .java.merge-File]
										[T -> SampleActivity.java : .java-Content "/*  * Copyright 2017 Zhihu Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package com.zhihu.matisse.sample;  import android.Manifest; import android.content.Intent; import android.content.pm.ActivityInfo; import android.net.Uri; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import android.widget.Toast;  import com.tbruyelle.rxpermissions2.RxPermissions; import com.zhihu.matisse.Matisse; import com.zhihu.matisse.MimeType; import com.zhihu.matisse.engine.impl.PicassoEngine; import com.zhihu.matisse.filter.Filter; import com.zhihu.matisse.internal.entity.CaptureStrategy; import com.zhihu.matisse.listener.OnCheckedListener; import com.zhihu.matisse.listener.OnSelectedListener;  import java.util.List;  import io.reactivex.Observer; import io.reactivex.disposables.Disposable;  public class SampleActivity extends AppCompatActivity implements View.OnClickListener {      private static final int REQUEST_CODE_CHOOSE = 23;      private UriAdapter mAdapter;      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         findViewById(R.id.zhihu).setOnClickListener(this);         findViewById(R.id.dracula).setOnClickListener(this);          RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview);         recyclerView.setLayoutManager(new LinearLayoutManager(this));         recyclerView.setAdapter(mAdapter = new UriAdapter());     }      @Override     public void onClick(final View v) {         RxPermissions rxPermissions = new RxPermissions(this);         rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)                 .subscribe(new Observer<Boolean>() {                     @Override                     public void onSubscribe(Disposable d) {                      }                      @Override                     public void onNext(Boolean aBoolean) {                         if (aBoolean) {                             switch (v.getId()) {                                 case R.id.zhihu:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofAll(), false)                                             .countable(true)                                             .capture(true)                                             .captureStrategy(                                                     new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))                                             .maxSelectable(9)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .gridExpectedSize(                                                     getResources().getDimensionPixelSize(R.dimen.grid_expected_size))                                             .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)                                             .thumbnailScale(0.85f) //                                            .imageEngine(new GlideEngine())  // for glide-V3                                             .imageEngine(new Glide4Engine())    // for glide-V4                                             .setOnSelectedListener(new OnSelectedListener() {                                                 @Override                                                 public void onSelected(                                                         @NonNull List<Uri> uriList, @NonNull List<String> pathList) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("onSelected", "onSelected: pathList=" + pathList);                                                  }                                             })                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .autoHideToolbarOnSingleTap(true)                                             .setOnCheckedListener(new OnCheckedListener() {                                                 @Override                                                 public void onCheck(boolean isChecked) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("isChecked", "onCheck: isChecked=" + isChecked);                                                 }                                             })                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 case R.id.dracula:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage())                                             .theme(R.style.Matisse_Dracula)                                             .countable(false)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .maxSelectable(9)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .imageEngine(new PicassoEngine())                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 default:                                     break;                             }                             mAdapter.setData(null, null);                         } else {                             Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)                                     .show();                         }                     }                      @Override                     public void onError(Throwable e) {                      }                      @Override                     public void onComplete() {                      }                 });     }      @Override     protected void onActivityResult(int requestCode, int resultCode, Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {             mAdapter.setData(Matisse.obtainResult(data), Matisse.obtainPathResult(data));             Log.e("OnActivityResult ", String.valueOf(Matisse.obtainOriginalState(data)));         }     }      private static class UriAdapter extends RecyclerView.Adapter<UriAdapter.UriViewHolder> {          private List<Uri> mUris;         private List<String> mPaths;          void setData(List<Uri> uris, List<String> paths) {             mUris = uris;             mPaths = paths;             notifyDataSetChanged();         }          @Override         public UriViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {             return new UriViewHolder(                     LayoutInflater.from(parent.getContext()).inflate(R.layout.uri_item, parent, false));         }          @Override         public void onBindViewHolder(UriViewHolder holder, int position) {             holder.mUri.setText(mUris.get(position).toString());             holder.mPath.setText(mPaths.get(position));              holder.mUri.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);             holder.mPath.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);         }          @Override         public int getItemCount() {             return mUris == null ? 0 : mUris.size();         }          static class UriViewHolder extends RecyclerView.ViewHolder {              private TextView mUri;             private TextView mPath;              UriViewHolder(View contentView) {                 super(contentView);                 mUri = (TextView) contentView.findViewById(R.id.uri);                 mPath = (TextView) contentView.findViewById(R.id.path);             }         }     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> sample : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> zhihu : Folder]
							[NT -> matisse : Folder]
								[NT -> sample : Folder]
									[NT -> SampleActivity.java.merge : .java.merge-File]
										[T -> SampleActivity.java : .java-Content "/*  * Copyright 2017 Zhihu Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package com.zhihu.matisse.sample;  import android.Manifest; import android.content.Intent; import android.content.pm.ActivityInfo; import android.net.Uri; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import android.widget.Toast;  import com.tbruyelle.rxpermissions2.RxPermissions; import com.zhihu.matisse.Matisse; import com.zhihu.matisse.MimeType; import com.zhihu.matisse.engine.impl.PicassoEngine; import com.zhihu.matisse.filter.Filter; import com.zhihu.matisse.internal.entity.CaptureStrategy; import com.zhihu.matisse.listener.OnCheckedListener; import com.zhihu.matisse.listener.OnSelectedListener;  import java.util.List;  import io.reactivex.Observer; import io.reactivex.disposables.Disposable;  public class SampleActivity extends AppCompatActivity implements View.OnClickListener {      private static final int REQUEST_CODE_CHOOSE = 23;      private UriAdapter mAdapter;      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         findViewById(R.id.zhihu).setOnClickListener(this);         findViewById(R.id.dracula).setOnClickListener(this);          RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview);         recyclerView.setLayoutManager(new LinearLayoutManager(this));         recyclerView.setAdapter(mAdapter = new UriAdapter());     }      @Override     public void onClick(final View v) {         RxPermissions rxPermissions = new RxPermissions(this);         rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)                 .subscribe(new Observer<Boolean>() {                     @Override                     public void onSubscribe(Disposable d) {                      }                      @Override                     public void onNext(Boolean aBoolean) {                         if (aBoolean) {                             switch (v.getId()) {                                 case R.id.zhihu:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.of(MimeType.GIF), true)                                             .countable(true)                                             .capture(true)                                             .captureStrategy(                                                     new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))                                             .maxSelectable(9)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .gridExpectedSize(                                                     getResources().getDimensionPixelSize(R.dimen.grid_expected_size))                                             .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)                                             .thumbnailScale(0.85f) //                                            .imageEngine(new GlideEngine())  // for glide-V3                                             .imageEngine(new Glide4Engine())    // for glide-V4                                             .setOnSelectedListener(new OnSelectedListener() {                                                 @Override                                                 public void onSelected(                                                         @NonNull List<Uri> uriList, @NonNull List<String> pathList) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("onSelected", "onSelected: pathList=" + pathList);                                                  }                                             })                                             .showSingleMediaType(true)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .autoHideToolbarOnSingleTap(true)                                             .setOnCheckedListener(new OnCheckedListener() {                                                 @Override                                                 public void onCheck(boolean isChecked) {                                                     // DO SOMETHING IMMEDIATELY HERE                                                     Log.e("isChecked", "onCheck: isChecked=" + isChecked);                                                 }                                             })                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 case R.id.dracula:                                     Matisse.from(SampleActivity.this)                                             .choose(MimeType.ofImage())                                             .theme(R.style.Matisse_Dracula)                                             .countable(false)                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))                                             .maxSelectable(9)                                             .originalEnable(true)                                             .maxOriginalSize(10)                                             .imageEngine(new PicassoEngine())                                             .forResult(REQUEST_CODE_CHOOSE);                                     break;                                 default:                                     break;                             }                             mAdapter.setData(null, null);                         } else {                             Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)                                     .show();                         }                     }                      @Override                     public void onError(Throwable e) {                      }                      @Override                     public void onComplete() {                      }                 });     }      @Override     protected void onActivityResult(int requestCode, int resultCode, Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {             mAdapter.setData(Matisse.obtainResult(data), Matisse.obtainPathResult(data));             Log.e("OnActivityResult ", String.valueOf(Matisse.obtainOriginalState(data)));         }     }      private static class UriAdapter extends RecyclerView.Adapter<UriAdapter.UriViewHolder> {          private List<Uri> mUris;         private List<String> mPaths;          void setData(List<Uri> uris, List<String> paths) {             mUris = uris;             mPaths = paths;             notifyDataSetChanged();         }          @Override         public UriViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {             return new UriViewHolder(                     LayoutInflater.from(parent.getContext()).inflate(R.layout.uri_item, parent, false));         }          @Override         public void onBindViewHolder(UriViewHolder holder, int position) {             holder.mUri.setText(mUris.get(position).toString());             holder.mPath.setText(mPaths.get(position));              holder.mUri.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);             holder.mPath.setAlpha(position % 2 == 0 ? 1.0f : 0.54f);         }          @Override         public int getItemCount() {             return mUris == null ? 0 : mUris.size();         }          static class UriViewHolder extends RecyclerView.ViewHolder {              private TextView mUri;             private TextView mPath;              UriViewHolder(View contentView) {                 super(contentView);                 mUri = (TextView) contentView.findViewById(R.id.uri);                 mPath = (TextView) contentView.findViewById(R.id.path);             }         }     }  } " compose:StringConcatenation merge: LineBased]
