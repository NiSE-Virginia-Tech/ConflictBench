Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
[NT -> left : Feature]
	[NT -> tm : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> alibaba : Folder]
							[NT -> fescar : Folder]
								[NT -> tm : Folder]
									[NT -> api : Folder]
										[NT -> TransactionalTemplate.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.alibaba.fescar.tm.api;" compose:Replacement merge: Default]
												[T -> com.alibaba.fescar.core.exception.TransactionException{ImportPackage} : ImportDeclaration "import com.alibaba.fescar.core.exception.TransactionException;" compose:Replacement merge: Default]
												[NT -> TransactionalTemplate : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> TransactionalTemplate : Id "TransactionalTemplate" compose:Replacement merge: Default]
													[T -> execute(TransactionalExecutor-TransactionalExecutor) : MethodDecl "public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {          // 1. get or create a transaction         GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();          // 2. begin transaction         try {             tx.begin(business.timeout(), business.name());          } catch (TransactionException txe) {             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.BeginFailure);          }          Object rs = null;         try {              // Do Your Business             rs = business.execute();          } catch (Throwable ex) {              // 3. any business exception, rollback.             try {                 tx.rollback();                  // 3.1 Successfully rolled back                 throw new TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);              } catch (TransactionException txe) {                 // 3.2 Failed to rollback                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.RollbackFailure, ex);              }          }          // 4. everything is fine, commit.         try {             tx.commit();          } catch (TransactionException txe) {             // 4.1 Failed to commit             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.CommitFailure);          }         return rs;     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> tm : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> alibaba : Folder]
							[NT -> fescar : Folder]
								[NT -> tm : Folder]
									[NT -> api : Folder]
										[NT -> TransactionalTemplate.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.alibaba.fescar.tm.api;" compose:Replacement merge: Default]
												[T -> com.alibaba.fescar.core.exception.TransactionException{ImportPackage} : ImportDeclaration "import com.alibaba.fescar.core.exception.TransactionException;" compose:Replacement merge: Default]
												[NT -> TransactionalTemplate : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> TransactionalTemplate : Id "TransactionalTemplate" compose:Replacement merge: Default]
													[T -> execute(TransactionalExecutor-TransactionalExecutor) : MethodDecl "public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {          // 1. get or create a transaction         GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();          // 2. begin transaction         try {             tx.begin(business.timeout(), business.name());          } catch (TransactionException txe) {             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.BeginFailure);          }          Object rs = null;         try {              // Do Your Business             rs = business.execute();          } catch (Throwable ex) {              // 3. any business exception, rollback.             try {                 tx.rollback();                  // 3.1 Successfully rolled back                 throw new TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);              } catch (TransactionException txe) {                 // 3.2 Failed to rollback                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.RollbackFailure, ex);              } finally {                 GlobalTransactionContext.clean();             }          }          // 4. everything is fine, commit.         try {             tx.commit();          } catch (TransactionException txe) {             // 4.1 Failed to commit             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.CommitFailure);          } finally {             GlobalTransactionContext.clean();         }         return rs;     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> tm : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> alibaba : Folder]
							[NT -> fescar : Folder]
								[NT -> tm : Folder]
									[NT -> api : Folder]
										[NT -> TransactionalTemplate.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.alibaba.fescar.tm.api;" compose:Replacement merge: Default]
												[T -> com.alibaba.fescar.core.exception.TransactionException{ImportPackage} : ImportDeclaration "import com.alibaba.fescar.core.exception.TransactionException;" compose:Replacement merge: Default]
												[T -> com.alibaba.fescar.tm.api.transaction.TransactionHook{ImportPackage} : ImportDeclaration "import com.alibaba.fescar.tm.api.transaction.TransactionHook;" compose:Replacement merge: Default]
												[T -> com.alibaba.fescar.tm.api.transaction.TransactionHookManager{ImportPackage} : ImportDeclaration "import com.alibaba.fescar.tm.api.transaction.TransactionHookManager;" compose:Replacement merge: Default]
												[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
												[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
												[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
												[NT -> TransactionalTemplate : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> TransactionalTemplate : Id "TransactionalTemplate" compose:Replacement merge: Default]
													[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(TransactionalTemplate.class);" compose:Replacement merge: SemanticConflict]
													[T -> execute(TransactionalExecutor-TransactionalExecutor) : MethodDecl "public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {          // 1. get or create a transaction         GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();          try {              // 2. begin transaction             try {                 triggerBeforeBegin();                 tx.begin(business.timeout(), business.name());                 triggerAfterBegin();             } catch (TransactionException txe) {                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.BeginFailure);              }             Object rs = null;             try {                  // Do Your Business                 rs = business.execute();              } catch (Throwable ex) {                  // 3. any business exception, rollback.                 try {                     triggerBeforeRollback();                     tx.rollback();                     triggerAfterRollback();                     // 3.1 Successfully rolled back                     throw new TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);                  } catch (TransactionException txe) {                     // 3.2 Failed to rollback                     throw new TransactionalExecutor.ExecutionException(tx, txe,                         TransactionalExecutor.Code.RollbackFailure, ex);                  }              }             // 4. everything is fine, commit.             try {                 triggerBeforeCommit();                 tx.commit();                 triggerAfterCommit();             } catch (TransactionException txe) {                 // 4.1 Failed to commit                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.CommitFailure);             }              return rs;         } finally {             //5. clear             triggerAfterCompletion();             cleanUp();         }     }" compose:Replacement merge: LineBased]
													[T -> triggerBeforeBegin({FormalParametersInternal}) : MethodDecl "private void triggerBeforeBegin() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.beforeBegin();             } catch (Exception e) {                 LOGGER.error("Failed execute beforeBegin in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> triggerAfterBegin({FormalParametersInternal}) : MethodDecl "private void triggerAfterBegin() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterBegin();             } catch (Exception e) {                 LOGGER.error("Failed execute afterBegin in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> triggerBeforeRollback({FormalParametersInternal}) : MethodDecl "private void triggerBeforeRollback() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.beforeRollback();             } catch (Exception e) {                 LOGGER.error("Failed execute beforeRollback in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> triggerAfterRollback({FormalParametersInternal}) : MethodDecl "private void triggerAfterRollback() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterRollback();             } catch (Exception e) {                 LOGGER.error("Failed execute afterRollback in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> triggerBeforeCommit({FormalParametersInternal}) : MethodDecl "private void triggerBeforeCommit() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.beforeCommit();             } catch (Exception e) {                 LOGGER.error("Failed execute beforeCommit in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> triggerAfterCommit({FormalParametersInternal}) : MethodDecl "private void triggerAfterCommit() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterCommit();             } catch (Exception e) {                 LOGGER.error("Failed execute afterCommit in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> triggerAfterCompletion({FormalParametersInternal}) : MethodDecl "private void triggerAfterCompletion() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterCompletion();             } catch (Exception e) {                 LOGGER.error("Failed execute afterCompletion in hook " + e.getMessage());             }         }     }" compose:Replacement merge: LineBased]
													[T -> cleanUp({FormalParametersInternal}) : MethodDecl "private void cleanUp() {         TransactionHookManager.clear();     }" compose:Replacement merge: LineBased]
													[T -> getCurrentHooks({FormalParametersInternal}) : MethodDecl "private List<TransactionHook> getCurrentHooks() {         return TransactionHookManager.getHooks();     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> tm : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> alibaba : Folder]
							[NT -> fescar : Folder]
								[NT -> tm : Folder]
									[NT -> api : Folder]
										[NT -> TransactionalTemplate.java.merge : .java.merge-File]
											[T -> TransactionalTemplate.java : .java-Content "/*  *  Copyright 1999-2018 Alibaba Group Holding Ltd.  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */  package com.alibaba.fescar.tm.api;  import com.alibaba.fescar.core.exception.TransactionException;  /**  * Template of executing business logic with a global transaction.  */ public class TransactionalTemplate {      /**      * Execute object.      *      * @param business the business      * @return the object      * @throws ExecutionException the execution exception      */     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {          // 1. get or create a transaction         GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();          // 2. begin transaction         try {             tx.begin(business.timeout(), business.name());          } catch (TransactionException txe) {             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.BeginFailure);          }          Object rs = null;         try {              // Do Your Business             rs = business.execute();          } catch (Throwable ex) {              // 3. any business exception, rollback.             try {                 tx.rollback();                  // 3.1 Successfully rolled back                 throw new TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);              } catch (TransactionException txe) {                 // 3.2 Failed to rollback                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.RollbackFailure, ex);              }          }          // 4. everything is fine, commit.         try {             tx.commit();          } catch (TransactionException txe) {             // 4.1 Failed to commit             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.CommitFailure);          }         return rs;     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> tm : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> alibaba : Folder]
							[NT -> fescar : Folder]
								[NT -> tm : Folder]
									[NT -> api : Folder]
										[NT -> TransactionalTemplate.java.merge : .java.merge-File]
											[T -> TransactionalTemplate.java : .java-Content "/*  *  Copyright 1999-2018 Alibaba Group Holding Ltd.  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */  package com.alibaba.fescar.tm.api;  import com.alibaba.fescar.core.exception.TransactionException;  /**  * Template of executing business logic with a global transaction.  */ public class TransactionalTemplate {      /**      * Execute object.      *      * @param business the business      * @return the object      * @throws ExecutionException the execution exception      */     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {          // 1. get or create a transaction         GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();          // 2. begin transaction         try {             tx.begin(business.timeout(), business.name());          } catch (TransactionException txe) {             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.BeginFailure);          }          Object rs = null;         try {              // Do Your Business             rs = business.execute();          } catch (Throwable ex) {              // 3. any business exception, rollback.             try {                 tx.rollback();                  // 3.1 Successfully rolled back                 throw new TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);              } catch (TransactionException txe) {                 // 3.2 Failed to rollback                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.RollbackFailure, ex);              } finally {                 GlobalTransactionContext.clean();             }          }          // 4. everything is fine, commit.         try {             tx.commit();          } catch (TransactionException txe) {             // 4.1 Failed to commit             throw new TransactionalExecutor.ExecutionException(tx, txe,                 TransactionalExecutor.Code.CommitFailure);          } finally {             GlobalTransactionContext.clean();         }         return rs;     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> tm : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> alibaba : Folder]
							[NT -> fescar : Folder]
								[NT -> tm : Folder]
									[NT -> api : Folder]
										[NT -> TransactionalTemplate.java.merge : .java.merge-File]
											[T -> TransactionalTemplate.java : .java-Content "/*  *  Copyright 1999-2018 Alibaba Group Holding Ltd.  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */  package com.alibaba.fescar.tm.api;  import com.alibaba.fescar.core.exception.TransactionException; import com.alibaba.fescar.tm.api.transaction.TransactionHook; import com.alibaba.fescar.tm.api.transaction.TransactionHookManager;  import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.List;  /**  * Template of executing business logic with a global transaction.  */ public class TransactionalTemplate {      private static final Logger LOGGER = LoggerFactory.getLogger(TransactionalTemplate.class);       /**      * Execute object.      *      * @param business the business      * @return the object      * @throws TransactionalExecutor.ExecutionException the execution exception      */     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {          // 1. get or create a transaction         GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();          try {              // 2. begin transaction             try {                 triggerBeforeBegin();                 tx.begin(business.timeout(), business.name());                 triggerAfterBegin();             } catch (TransactionException txe) {                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.BeginFailure);              }             Object rs = null;             try {                  // Do Your Business                 rs = business.execute();              } catch (Throwable ex) {                  // 3. any business exception, rollback.                 try {                     triggerBeforeRollback();                     tx.rollback();                     triggerAfterRollback();                     // 3.1 Successfully rolled back                     throw new TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);                  } catch (TransactionException txe) {                     // 3.2 Failed to rollback                     throw new TransactionalExecutor.ExecutionException(tx, txe,                         TransactionalExecutor.Code.RollbackFailure, ex);                  }              }             // 4. everything is fine, commit.             try {                 triggerBeforeCommit();                 tx.commit();                 triggerAfterCommit();             } catch (TransactionException txe) {                 // 4.1 Failed to commit                 throw new TransactionalExecutor.ExecutionException(tx, txe,                     TransactionalExecutor.Code.CommitFailure);             }              return rs;         } finally {             //5. clear             triggerAfterCompletion();             cleanUp();         }     }      private void triggerBeforeBegin() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.beforeBegin();             } catch (Exception e) {                 LOGGER.error("Failed execute beforeBegin in hook " + e.getMessage());             }         }     }      private void triggerAfterBegin() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterBegin();             } catch (Exception e) {                 LOGGER.error("Failed execute afterBegin in hook " + e.getMessage());             }         }     }      private void triggerBeforeRollback() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.beforeRollback();             } catch (Exception e) {                 LOGGER.error("Failed execute beforeRollback in hook " + e.getMessage());             }         }     }      private void triggerAfterRollback() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterRollback();             } catch (Exception e) {                 LOGGER.error("Failed execute afterRollback in hook " + e.getMessage());             }         }     }      private void triggerBeforeCommit() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.beforeCommit();             } catch (Exception e) {                 LOGGER.error("Failed execute beforeCommit in hook " + e.getMessage());             }         }     }      private void triggerAfterCommit() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterCommit();             } catch (Exception e) {                 LOGGER.error("Failed execute afterCommit in hook " + e.getMessage());             }         }     }      private void triggerAfterCompletion() {         for (TransactionHook hook : getCurrentHooks()) {             try {                 hook.afterCompletion();             } catch (Exception e) {                 LOGGER.error("Failed execute afterCompletion in hook " + e.getMessage());             }         }     }      private void cleanUp() {         TransactionHookManager.clear();     }      private List<TransactionHook> getCurrentHooks() {         return TransactionHookManager.getHooks();     }  } " compose:StringConcatenation merge: LineBased]
