Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/com/googlecode/greysanatomy/GreysAnatomyMain.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/com/googlecode/greysanatomy/GreysAnatomyMain.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/com/googlecode/greysanatomy/GreysAnatomyMain.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/com/googlecode/greysanatomy/GreysAnatomyMain.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/com/googlecode/greysanatomy/GreysAnatomyMain.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/com/googlecode/greysanatomy/GreysAnatomyMain.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> googlecode : Folder]
						[NT -> greysanatomy : Folder]
							[NT -> GreysAnatomyMain.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.googlecode.greysanatomy;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.console.client.ConsoleClient{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.console.client.ConsoleClient;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.exception.PIDNotMatchException{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.exception.PIDNotMatchException;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.util.HostUtils{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.util.HostUtils;" compose:Replacement merge: Default]
									[T -> joptsimple.OptionParser{ImportPackage} : ImportDeclaration "import joptsimple.OptionParser;" compose:Replacement merge: Default]
									[T -> joptsimple.OptionSet{ImportPackage} : ImportDeclaration "import joptsimple.OptionSet;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.lang.reflect.InvocationTargetException{ImportPackage} : ImportDeclaration "import java.lang.reflect.InvocationTargetException;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> java.util.logging.Level{ImportPackage} : ImportDeclaration "import java.util.logging.Level;" compose:Replacement merge: Default]
									[T -> java.util.logging.Logger{ImportPackage} : ImportDeclaration "import java.util.logging.Logger;" compose:Replacement merge: Default]
									[NT -> GreysAnatomyMain : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> GreysAnatomyMain : Id "GreysAnatomyMain" compose:Replacement merge: Default]
										[T -> logger : FieldDecl "private static final Logger logger = Logger.getLogger("greysanatomy");" compose:Replacement merge: SemanticConflict]
										[T -> JARFILE : FieldDecl "public static final String JARFILE = GreysAnatomyMain.class.getProtectionDomain().getCodeSource().getLocation().getFile();" compose:Replacement merge: SemanticConflict]
										[T -> GreysAnatomyMain(String[]-String[]) : ConstructorDecl "public GreysAnatomyMain(String[] args) throws Exception {          // ���������ļ�         Configure configure = analyzeConfiger(args);          // ����Ǳ���IP,���Լ���Agent         if (HostUtils.isLocalHostIp(configure.getTargetIp())) {             // ����agent             attachAgent(configure);         }          // �������̨         if (activeConsoleClient(configure)) {  //            logger.info("attach done! pid={}; host={}; JarFile={}", new Object[]{ //                    configer.getJavaPid(), //                    configer.getTargetIp() + ":" + configer.getTargetPort(), //                    JARFILE});           }      }" compose:Replacement merge: LineBased]
										[T -> analyzeConfiger(String[]-String[]) : MethodDecl "private Configure analyzeConfiger(String[] args) {         final OptionParser parser = new OptionParser();         parser.accepts("pid").withRequiredArg().ofType(int.class).required();         parser.accepts("target").withOptionalArg().ofType(String.class);         parser.accepts("multi").withOptionalArg().ofType(int.class);          final OptionSet os = parser.parse(args);         final Configure configure = new Configure();          if (os.has("target")) {             final String[] strSplit = ((String) os.valueOf("target")).split(":");             configure.setTargetIp(strSplit[0]);             configure.setTargetPort(Integer.valueOf(strSplit[1]));         }          if (os.has("multi")                 && (Integer) os.valueOf("multi") == 1) {             configure.setMulti(true);         } else {             configure.setMulti(false);         }          configure.setJavaPid((Integer) os.valueOf("pid"));         return configure;     }" compose:Replacement merge: LineBased]
										[T -> attachAgent(Configure-Configure) : MethodDecl "private void attachAgent(Configure configure) throws IOException, ClassNotFoundException, IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {          final ClassLoader loader = Thread.currentThread().getContextClassLoader();         final Class<?> vmdClass = loader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");         final Class<?> vmClass = loader.loadClass("com.sun.tools.attach.VirtualMachine");          Object attachVmdObj = null;         for (Object obj : (List<?>) vmClass.getMethod("list", (Class<?>[]) null).invoke(null, (Object[]) null)) {             if (((String) vmdClass.getMethod("id", (Class<?>[]) null).invoke(obj, (Object[]) null)).equals("" + configure.getJavaPid())) {                 attachVmdObj = obj;             }         }          if (null == attachVmdObj) {             throw new IllegalArgumentException("pid:" + configure.getJavaPid() + " not existed.");         }          Object vmObj = null;         try {             vmObj = vmClass.getMethod("attach", vmdClass).invoke(null, attachVmdObj);             vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, JARFILE, configure.toString());         } finally {             if (null != vmObj) {                 vmClass.getMethod("detach", (Class<?>[]) null).invoke(vmObj, (Object[]) null);             }         }      }" compose:Replacement merge: LineBased]
										[T -> activeConsoleClient(Configure-Configure) : MethodDecl "private boolean activeConsoleClient(Configure configure) throws Exception {         try {             ConsoleClient.getInstance(configure);             return true;         } catch (java.rmi.ConnectException ce) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} RMI was shutdown, console will be exit.", configure.getTargetIp(), configure.getTargetPort()));             }         } catch (PIDNotMatchException pidnme) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} PID was not match, console will be exit.", configure.getTargetIp(), configure.getTargetPort()));             }         }         return false;     }" compose:Replacement merge: LineBased]
										[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) {          try {             new GreysAnatomyMain(args);         } catch (Throwable t) {             if(logger.isLoggable(Level.SEVERE)){                 logger.log(Level.SEVERE,String.format("start greys-anatomy failed. because %s", t.getMessage()), t);             }             System.exit(-1);         }      }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> googlecode : Folder]
						[NT -> greysanatomy : Folder]
							[NT -> GreysAnatomyMain.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.googlecode.greysanatomy;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.console.client.ConsoleClient{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.console.client.ConsoleClient;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.exception.PIDNotMatchException{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.exception.PIDNotMatchException;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.util.HostUtils{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.util.HostUtils;" compose:Replacement merge: Default]
									[T -> joptsimple.OptionParser{ImportPackage} : ImportDeclaration "import joptsimple.OptionParser;" compose:Replacement merge: Default]
									[T -> joptsimple.OptionSet{ImportPackage} : ImportDeclaration "import joptsimple.OptionSet;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.lang.reflect.InvocationTargetException{ImportPackage} : ImportDeclaration "import java.lang.reflect.InvocationTargetException;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> java.util.logging.Level{ImportPackage} : ImportDeclaration "import java.util.logging.Level;" compose:Replacement merge: Default]
									[T -> java.util.logging.Logger{ImportPackage} : ImportDeclaration "import java.util.logging.Logger;" compose:Replacement merge: Default]
									[NT -> GreysAnatomyMain : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> GreysAnatomyMain : Id "GreysAnatomyMain" compose:Replacement merge: Default]
										[T -> logger : FieldDecl "private static final Logger logger = Logger.getLogger("greysanatomy");" compose:Replacement merge: SemanticConflict]
										[T -> JARFILE : FieldDecl "public static final String JARFILE = GreysAnatomyMain.class.getProtectionDomain().getCodeSource().getLocation().getFile();" compose:Replacement merge: SemanticConflict]
										[T -> GreysAnatomyMain(String[]-String[]) : ConstructorDecl "public GreysAnatomyMain(String[] args) throws Exception {          // ���������ļ�         Configer configer = analyzeConfiger(args);          // ����Ǳ���IP,���Լ���Agent         if (HostUtils.isLocalHostIp(configer.getTargetIp())) {             // ����agent             attachAgent(configer);         }          // �������̨         if (activeConsoleClient(configer)) {  //            logger.info("attach done! pid={}; host={}; JarFile={}", new Object[]{ //                    configer.getJavaPid(), //                    configer.getTargetIp() + ":" + configer.getTargetPort(), //                    JARFILE});           }      }" compose:Replacement merge: LineBased]
										[T -> analyzeConfiger(String[]-String[]) : MethodDecl "private Configer analyzeConfiger(String[] args) {         final OptionParser parser = new OptionParser();         parser.accepts("pid").withRequiredArg().ofType(int.class).required();         parser.accepts("target").withOptionalArg().ofType(String.class);         parser.accepts("multi").withOptionalArg().ofType(int.class);          final OptionSet os = parser.parse(args);         final Configer configer = new Configer();          if (os.has("target")) {             final String[] strSplit = ((String) os.valueOf("target")).split(":");             configer.setTargetIp(strSplit[0]);             configer.setTargetPort(Integer.valueOf(strSplit[1]));         }          if (os.has("multi")                 && (Integer) os.valueOf("multi") == 1) {             configer.setMulti(true);         } else {             configer.setMulti(false);         }          configer.setJavaPid((Integer) os.valueOf("pid"));         return configer;     }" compose:Replacement merge: LineBased]
										[T -> attachAgent(Configer-Configer) : MethodDecl "private void attachAgent(Configer configer) throws IOException, ClassNotFoundException, IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {          final ClassLoader loader = Thread.currentThread().getContextClassLoader();         final Class<?> vmdClass = loader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");         final Class<?> vmClass = loader.loadClass("com.sun.tools.attach.VirtualMachine");          Object attachVmdObj = null;         for (Object obj : (List<?>) vmClass.getMethod("list", (Class<?>[]) null).invoke(null, (Object[]) null)) {             if (((String) vmdClass.getMethod("id", (Class<?>[]) null).invoke(obj, (Object[]) null)).equals("" + configer.getJavaPid())) {                 attachVmdObj = obj;             }         }          if (null == attachVmdObj) {             throw new IllegalArgumentException("pid:" + configer.getJavaPid() + " not existed.");         }          Object vmObj = null;         try {             vmObj = vmClass.getMethod("attach", vmdClass).invoke(null, attachVmdObj);             vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, JARFILE, configer.toString());         } finally {             if (null != vmObj) {                 vmClass.getMethod("detach", (Class<?>[]) null).invoke(vmObj, (Object[]) null);             }         }      }" compose:Replacement merge: LineBased]
										[T -> activeConsoleClient(Configer-Configer) : MethodDecl "private boolean activeConsoleClient(Configer configer) throws Exception {         try {             ConsoleClient.getInstance(configer);             return true;         } catch (java.rmi.ConnectException ce) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} RMI was shutdown, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         } catch (PIDNotMatchException pidnme) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} PID was not match, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         }         return false;     }" compose:Replacement merge: LineBased]
										[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) {          try {             new GreysAnatomyMain(args);         } catch (Throwable t) {             if(logger.isLoggable(Level.SEVERE)){                 logger.log(Level.SEVERE,String.format("start greys-anatomy failed. because %s", t.getMessage()), t);             }             System.exit(-1);         }      }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> googlecode : Folder]
						[NT -> greysanatomy : Folder]
							[NT -> GreysAnatomyMain.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.googlecode.greysanatomy;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.console.client.ConsoleClient{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.console.client.ConsoleClient;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.exception.PIDNotMatchException{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.exception.PIDNotMatchException;" compose:Replacement merge: Default]
									[T -> com.googlecode.greysanatomy.util.HostUtils{ImportPackage} : ImportDeclaration "import com.googlecode.greysanatomy.util.HostUtils;" compose:Replacement merge: Default]
									[T -> joptsimple.OptionParser{ImportPackage} : ImportDeclaration "import joptsimple.OptionParser;" compose:Replacement merge: Default]
									[T -> joptsimple.OptionSet{ImportPackage} : ImportDeclaration "import joptsimple.OptionSet;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.lang.reflect.InvocationTargetException{ImportPackage} : ImportDeclaration "import java.lang.reflect.InvocationTargetException;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> java.util.logging.Level{ImportPackage} : ImportDeclaration "import java.util.logging.Level;" compose:Replacement merge: Default]
									[T -> java.util.logging.Logger{ImportPackage} : ImportDeclaration "import java.util.logging.Logger;" compose:Replacement merge: Default]
									[NT -> GreysAnatomyMain : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> GreysAnatomyMain : Id "GreysAnatomyMain" compose:Replacement merge: Default]
										[T -> logger : FieldDecl "private static final Logger logger = Logger.getLogger("greysanatomy");" compose:Replacement merge: SemanticConflict]
										[T -> JARFILE : FieldDecl "public static final String JARFILE = GreysAnatomyMain.class.getProtectionDomain().getCodeSource().getLocation().getFile();" compose:Replacement merge: SemanticConflict]
										[T -> GreysAnatomyMain(String[]-String[]) : ConstructorDecl "public GreysAnatomyMain(String[] args) throws Exception {          // ���������ļ�         Configer configer = analyzeConfiger(args);          // ����Ǳ���IP,���Լ���Agent         if (HostUtils.isLocalHostIp(configer.getTargetIp())) {             // ����agent             attachAgent(configer);         }          // �������̨         if (activeConsoleClient(configer)) {  //            logger.info("attach done! pid={}; host={}; JarFile={}", new Object[]{ //                    configer.getJavaPid(), //                    configer.getTargetIp() + ":" + configer.getTargetPort(), //                    JARFILE});           }      }" compose:Replacement merge: LineBased]
										[T -> analyzeConfiger(String[]-String[]) : MethodDecl "private Configer analyzeConfiger(String[] args) {         final OptionParser parser = new OptionParser();         parser.accepts("pid").withRequiredArg().ofType(int.class).required();         parser.accepts("target").withOptionalArg().ofType(String.class);         parser.accepts("multi").withOptionalArg().ofType(int.class);          final OptionSet os = parser.parse(args);         final Configer configer = new Configer();          if (os.has("target")) {             final String[] strSplit = ((String) os.valueOf("target")).split(":");             configer.setTargetIp(strSplit[0]);             configer.setTargetPort(Integer.valueOf(strSplit[1]));         }          if (os.has("multi")                 && (Integer) os.valueOf("multi") == 1) {             configer.setMulti(true);         } else {             configer.setMulti(false);         }          configer.setJavaPid((Integer) os.valueOf("pid"));         return configer;     }" compose:Replacement merge: LineBased]
										[T -> attachAgent(Configer-Configer) : MethodDecl "private void attachAgent(Configer configer) throws IOException, ClassNotFoundException, IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {          final ClassLoader loader = Thread.currentThread().getContextClassLoader();         final Class<?> vmdClass = loader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");         final Class<?> vmClass = loader.loadClass("com.sun.tools.attach.VirtualMachine");          Object attachVmdObj = null;         for (Object obj : (List<?>) vmClass.getMethod("list", (Class<?>[]) null).invoke(null, (Object[]) null)) {             if (((String) vmdClass.getMethod("id", (Class<?>[]) null).invoke(obj, (Object[]) null)).equals("" + configer.getJavaPid())) {                 attachVmdObj = obj;             }         }          if (null == attachVmdObj) {             // throw new IllegalArgumentException("pid:" + configer.getJavaPid() + " not existed.");         }          Object vmObj = null;         try {             if (null == attachVmdObj) { // ʹ�� attach(String pid) ���ַ�ʽ                 vmObj = vmClass.getMethod("attach", String.class).invoke(null, "" + configer.getJavaPid());             } else {                 vmObj = vmClass.getMethod("attach", vmdClass).invoke(null, attachVmdObj);             }             vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, JARFILE, configer.toString());         } finally {             if (null != vmObj) {                 vmClass.getMethod("detach", (Class<?>[]) null).invoke(vmObj, (Object[]) null);             }         }      }" compose:Replacement merge: LineBased]
										[T -> activeConsoleClient(Configer-Configer) : MethodDecl "private boolean activeConsoleClient(Configer configer) throws Exception {         try {             ConsoleClient.getInstance(configer);             return true;         } catch (java.rmi.ConnectException ce) {             if (logger.isLoggable(Level.WARNING)) {                 logger.warning(String.format("target{%s:%s} RMI was shutdown, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         } catch (PIDNotMatchException pidnme) {             if (logger.isLoggable(Level.WARNING)) {                 logger.warning(String.format("target{%s:%s} PID was not match, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         }         return false;     }" compose:Replacement merge: LineBased]
										[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args) {          try {             new GreysAnatomyMain(args);         } catch (Throwable t) {             if (logger.isLoggable(Level.SEVERE)) {                 logger.log(Level.SEVERE, String.format("start greys-anatomy failed. because %s", t.getMessage()), t);             }             System.exit(-1);         }      }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> googlecode : Folder]
						[NT -> greysanatomy : Folder]
							[NT -> GreysAnatomyMain.java.merge : .java.merge-File]
								[T -> GreysAnatomyMain.java : .java-Content "package com.googlecode.greysanatomy;  import com.googlecode.greysanatomy.console.client.ConsoleClient; import com.googlecode.greysanatomy.exception.PIDNotMatchException; import com.googlecode.greysanatomy.util.HostUtils; import joptsimple.OptionParser; import joptsimple.OptionSet;  import java.io.IOException; import java.lang.reflect.InvocationTargetException; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger;  /**  * Hello world!  */ public class GreysAnatomyMain {      private static final Logger logger = Logger.getLogger("greysanatomy");     public static final String JARFILE = GreysAnatomyMain.class.getProtectionDomain().getCodeSource().getLocation().getFile();      public GreysAnatomyMain(String[] args) throws Exception {          // ���������ļ�         Configure configure = analyzeConfiger(args);          // ����Ǳ���IP,���Լ���Agent         if (HostUtils.isLocalHostIp(configure.getTargetIp())) {             // ����agent             attachAgent(configure);         }          // �������̨         if (activeConsoleClient(configure)) {  //            logger.info("attach done! pid={}; host={}; JarFile={}", new Object[]{ //                    configer.getJavaPid(), //                    configer.getTargetIp() + ":" + configer.getTargetPort(), //                    JARFILE});           }      }      /**      * ����configer      *      * @param args      * @return      */     private Configure analyzeConfiger(String[] args) {         final OptionParser parser = new OptionParser();         parser.accepts("pid").withRequiredArg().ofType(int.class).required();         parser.accepts("target").withOptionalArg().ofType(String.class);         parser.accepts("multi").withOptionalArg().ofType(int.class);          final OptionSet os = parser.parse(args);         final Configure configure = new Configure();          if (os.has("target")) {             final String[] strSplit = ((String) os.valueOf("target")).split(":");             configure.setTargetIp(strSplit[0]);             configure.setTargetPort(Integer.valueOf(strSplit[1]));         }          if (os.has("multi")                 && (Integer) os.valueOf("multi") == 1) {             configure.setMulti(true);         } else {             configure.setMulti(false);         }          configure.setJavaPid((Integer) os.valueOf("pid"));         return configure;     }      /**      * ����Agent      *      * @param configure      * @throws IOException      * @throws ClassNotFoundException      * @throws NoSuchMethodException      * @throws InvocationTargetException      * @throws IllegalAccessException      * @throws SecurityException      * @throws IllegalArgumentException      */     private void attachAgent(Configure configure) throws IOException, ClassNotFoundException, IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {          final ClassLoader loader = Thread.currentThread().getContextClassLoader();         final Class<?> vmdClass = loader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");         final Class<?> vmClass = loader.loadClass("com.sun.tools.attach.VirtualMachine");          Object attachVmdObj = null;         for (Object obj : (List<?>) vmClass.getMethod("list", (Class<?>[]) null).invoke(null, (Object[]) null)) {             if (((String) vmdClass.getMethod("id", (Class<?>[]) null).invoke(obj, (Object[]) null)).equals("" + configure.getJavaPid())) {                 attachVmdObj = obj;             }         }          if (null == attachVmdObj) {             throw new IllegalArgumentException("pid:" + configure.getJavaPid() + " not existed.");         }          Object vmObj = null;         try {             vmObj = vmClass.getMethod("attach", vmdClass).invoke(null, attachVmdObj);             vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, JARFILE, configure.toString());         } finally {             if (null != vmObj) {                 vmClass.getMethod("detach", (Class<?>[]) null).invoke(vmObj, (Object[]) null);             }         }      }      /**      * �������̨�ͻ���      *      * @param configure      * @throws Exception      */     private boolean activeConsoleClient(Configure configure) throws Exception {         try {             ConsoleClient.getInstance(configure);             return true;         } catch (java.rmi.ConnectException ce) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} RMI was shutdown, console will be exit.", configure.getTargetIp(), configure.getTargetPort()));             }         } catch (PIDNotMatchException pidnme) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} PID was not match, console will be exit.", configure.getTargetIp(), configure.getTargetPort()));             }         }         return false;     }       public static void main(String[] args) {          try {             new GreysAnatomyMain(args);         } catch (Throwable t) {             if(logger.isLoggable(Level.SEVERE)){                 logger.log(Level.SEVERE,String.format("start greys-anatomy failed. because %s", t.getMessage()), t);             }             System.exit(-1);         }      } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> googlecode : Folder]
						[NT -> greysanatomy : Folder]
							[NT -> GreysAnatomyMain.java.merge : .java.merge-File]
								[T -> GreysAnatomyMain.java : .java-Content "package com.googlecode.greysanatomy;  import com.googlecode.greysanatomy.console.client.ConsoleClient; import com.googlecode.greysanatomy.exception.PIDNotMatchException; import com.googlecode.greysanatomy.util.HostUtils; import joptsimple.OptionParser; import joptsimple.OptionSet;  import java.io.IOException; import java.lang.reflect.InvocationTargetException; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger;  /**  * Hello world!  */ public class GreysAnatomyMain {      private static final Logger logger = Logger.getLogger("greysanatomy");     public static final String JARFILE = GreysAnatomyMain.class.getProtectionDomain().getCodeSource().getLocation().getFile();      public GreysAnatomyMain(String[] args) throws Exception {          // ���������ļ�         Configer configer = analyzeConfiger(args);          // ����Ǳ���IP,���Լ���Agent         if (HostUtils.isLocalHostIp(configer.getTargetIp())) {             // ����agent             attachAgent(configer);         }          // �������̨         if (activeConsoleClient(configer)) {  //            logger.info("attach done! pid={}; host={}; JarFile={}", new Object[]{ //                    configer.getJavaPid(), //                    configer.getTargetIp() + ":" + configer.getTargetPort(), //                    JARFILE});           }      }      /**      * ����configer      *      * @param args      * @return      */     private Configer analyzeConfiger(String[] args) {         final OptionParser parser = new OptionParser();         parser.accepts("pid").withRequiredArg().ofType(int.class).required();         parser.accepts("target").withOptionalArg().ofType(String.class);         parser.accepts("multi").withOptionalArg().ofType(int.class);          final OptionSet os = parser.parse(args);         final Configer configer = new Configer();          if (os.has("target")) {             final String[] strSplit = ((String) os.valueOf("target")).split(":");             configer.setTargetIp(strSplit[0]);             configer.setTargetPort(Integer.valueOf(strSplit[1]));         }          if (os.has("multi")                 && (Integer) os.valueOf("multi") == 1) {             configer.setMulti(true);         } else {             configer.setMulti(false);         }          configer.setJavaPid((Integer) os.valueOf("pid"));         return configer;     }      /**      * ����Agent      *      * @param configer      * @throws IOException      * @throws ClassNotFoundException      * @throws NoSuchMethodException      * @throws InvocationTargetException      * @throws IllegalAccessException      * @throws SecurityException      * @throws IllegalArgumentException      */     private void attachAgent(Configer configer) throws IOException, ClassNotFoundException, IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {          final ClassLoader loader = Thread.currentThread().getContextClassLoader();         final Class<?> vmdClass = loader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");         final Class<?> vmClass = loader.loadClass("com.sun.tools.attach.VirtualMachine");          Object attachVmdObj = null;         for (Object obj : (List<?>) vmClass.getMethod("list", (Class<?>[]) null).invoke(null, (Object[]) null)) {             if (((String) vmdClass.getMethod("id", (Class<?>[]) null).invoke(obj, (Object[]) null)).equals("" + configer.getJavaPid())) {                 attachVmdObj = obj;             }         }          if (null == attachVmdObj) {             throw new IllegalArgumentException("pid:" + configer.getJavaPid() + " not existed.");         }          Object vmObj = null;         try {             vmObj = vmClass.getMethod("attach", vmdClass).invoke(null, attachVmdObj);             vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, JARFILE, configer.toString());         } finally {             if (null != vmObj) {                 vmClass.getMethod("detach", (Class<?>[]) null).invoke(vmObj, (Object[]) null);             }         }      }      /**      * �������̨�ͻ���      *      * @param configer      * @throws Exception      */     private boolean activeConsoleClient(Configer configer) throws Exception {         try {             ConsoleClient.getInstance(configer);             return true;         } catch (java.rmi.ConnectException ce) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} RMI was shutdown, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         } catch (PIDNotMatchException pidnme) {             if(logger.isLoggable(Level.WARNING)){                 logger.warning(String.format("target{%s:%s} PID was not match, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         }         return false;     }       public static void main(String[] args) {          try {             new GreysAnatomyMain(args);         } catch (Throwable t) {             if(logger.isLoggable(Level.SEVERE)){                 logger.log(Level.SEVERE,String.format("start greys-anatomy failed. because %s", t.getMessage()), t);             }             System.exit(-1);         }      } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> googlecode : Folder]
						[NT -> greysanatomy : Folder]
							[NT -> GreysAnatomyMain.java.merge : .java.merge-File]
								[T -> GreysAnatomyMain.java : .java-Content "package com.googlecode.greysanatomy;  import com.googlecode.greysanatomy.console.client.ConsoleClient; import com.googlecode.greysanatomy.exception.PIDNotMatchException; import com.googlecode.greysanatomy.util.HostUtils; import joptsimple.OptionParser; import joptsimple.OptionSet;  import java.io.IOException; import java.lang.reflect.InvocationTargetException; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger;  /**  * Hello world!  */ public class GreysAnatomyMain {      private static final Logger logger = Logger.getLogger("greysanatomy");     public static final String JARFILE = GreysAnatomyMain.class.getProtectionDomain().getCodeSource().getLocation().getFile();      public GreysAnatomyMain(String[] args) throws Exception {          // ���������ļ�         Configer configer = analyzeConfiger(args);          // ����Ǳ���IP,���Լ���Agent         if (HostUtils.isLocalHostIp(configer.getTargetIp())) {             // ����agent             attachAgent(configer);         }          // �������̨         if (activeConsoleClient(configer)) {  //            logger.info("attach done! pid={}; host={}; JarFile={}", new Object[]{ //                    configer.getJavaPid(), //                    configer.getTargetIp() + ":" + configer.getTargetPort(), //                    JARFILE});           }      }      /**      * ����configer      *      * @param args      * @return      */     private Configer analyzeConfiger(String[] args) {         final OptionParser parser = new OptionParser();         parser.accepts("pid").withRequiredArg().ofType(int.class).required();         parser.accepts("target").withOptionalArg().ofType(String.class);         parser.accepts("multi").withOptionalArg().ofType(int.class);          final OptionSet os = parser.parse(args);         final Configer configer = new Configer();          if (os.has("target")) {             final String[] strSplit = ((String) os.valueOf("target")).split(":");             configer.setTargetIp(strSplit[0]);             configer.setTargetPort(Integer.valueOf(strSplit[1]));         }          if (os.has("multi")                 && (Integer) os.valueOf("multi") == 1) {             configer.setMulti(true);         } else {             configer.setMulti(false);         }          configer.setJavaPid((Integer) os.valueOf("pid"));         return configer;     }      /**      * ����Agent      *      * @param configer      * @throws IOException      * @throws ClassNotFoundException      * @throws NoSuchMethodException      * @throws InvocationTargetException      * @throws IllegalAccessException      * @throws SecurityException      * @throws IllegalArgumentException      */     private void attachAgent(Configer configer) throws IOException, ClassNotFoundException, IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {          final ClassLoader loader = Thread.currentThread().getContextClassLoader();         final Class<?> vmdClass = loader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");         final Class<?> vmClass = loader.loadClass("com.sun.tools.attach.VirtualMachine");          Object attachVmdObj = null;         for (Object obj : (List<?>) vmClass.getMethod("list", (Class<?>[]) null).invoke(null, (Object[]) null)) {             if (((String) vmdClass.getMethod("id", (Class<?>[]) null).invoke(obj, (Object[]) null)).equals("" + configer.getJavaPid())) {                 attachVmdObj = obj;             }         }          if (null == attachVmdObj) {             // throw new IllegalArgumentException("pid:" + configer.getJavaPid() + " not existed.");         }          Object vmObj = null;         try {             if (null == attachVmdObj) { // ʹ�� attach(String pid) ���ַ�ʽ                 vmObj = vmClass.getMethod("attach", String.class).invoke(null, "" + configer.getJavaPid());             } else {                 vmObj = vmClass.getMethod("attach", vmdClass).invoke(null, attachVmdObj);             }             vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, JARFILE, configer.toString());         } finally {             if (null != vmObj) {                 vmClass.getMethod("detach", (Class<?>[]) null).invoke(vmObj, (Object[]) null);             }         }      }      /**      * �������̨�ͻ���      *      * @param configer      * @throws Exception      */     private boolean activeConsoleClient(Configer configer) throws Exception {         try {             ConsoleClient.getInstance(configer);             return true;         } catch (java.rmi.ConnectException ce) {             if (logger.isLoggable(Level.WARNING)) {                 logger.warning(String.format("target{%s:%s} RMI was shutdown, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         } catch (PIDNotMatchException pidnme) {             if (logger.isLoggable(Level.WARNING)) {                 logger.warning(String.format("target{%s:%s} PID was not match, console will be exit.", configer.getTargetIp(), configer.getTargetPort()));             }         }         return false;     }       public static void main(String[] args) {          try {             new GreysAnatomyMain(args);         } catch (Throwable t) {             if (logger.isLoggable(Level.SEVERE)) {                 logger.log(Level.SEVERE, String.format("start greys-anatomy failed. because %s", t.getMessage()), t);             }             System.exit(-1);         }      } } " compose:StringConcatenation merge: LineBased]
