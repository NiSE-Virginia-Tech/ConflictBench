Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.buildscript/settings.xml
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.buildscript/settings.xml
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/com/squareup/javawriter/ParameterWriterTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/com/squareup/javawriter/ParameterWriterTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.buildscript/settings.xml
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/com/squareup/javawriter/ParameterWriterTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/com/squareup/javawriter/ParameterWriterTest.java
[NT -> left : Feature]
	[NT -> .buildscript : Folder]
		[NT -> settings.xml : XML-File]
			[NT ->  : settings]
				[NT ->  : servers]
					[NT ->  : server]
						[NT ->  : id]
							[T -> #text : #text "sonatype-nexus-snapshots" compose:Replacement merge: Default]
						[NT ->  : username]
							[T -> #text : #text "${env.CI_DEPLOY_USERNAME}" compose:Replacement merge: Default]
						[NT ->  : password]
							[T -> #text : #text "${env.CI_DEPLOY_PASSWORD}" compose:Replacement merge: Default]
[NT -> base : Feature]
	[NT -> .buildscript : Folder]
		[NT -> settings.xml : XML-File]
			[NT ->  : settings]
				[NT ->  : servers]
					[NT ->  : server]
						[NT ->  : id]
							[T -> #text : #text "sonatype-nexus-snapshots" compose:Replacement merge: Default]
						[NT ->  : username]
							[T -> #text : #text "${env.CI_DEPLOY_USERNAME}" compose:Replacement merge: Default]
						[NT ->  : password]
							[T -> #text : #text "${env.CI_DEPLOY_PASSWORD}" compose:Replacement merge: Default]
[NT -> right : Feature]
	[NT -> .buildscript : Folder]
		[NT -> settings.xml : XML-File]
			[NT ->  : settings]
				[NT ->  : servers]
					[NT ->  : server]
						[NT ->  : id]
							[T -> #text : #text "sonatype-nexus-snapshots" compose:Replacement merge: Default]
						[NT ->  : username]
							[T -> #text : #text "${env.CI_DEPLOY_USERNAME}" compose:Replacement merge: Default]
						[NT ->  : password]
							[T -> #text : #text "${env.CI_DEPLOY_PASSWORD}" compose:Replacement merge: Default]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> squareup : Folder]
						[NT -> javawriter : Folder]
							[NT -> ParameterWriterTest.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.squareup.javawriter;" compose:Replacement merge: Default]
									[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
									[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
									[T -> org.junit.runners.JUnit4{ImportPackage} : ImportDeclaration "import org.junit.runners.JUnit4;" compose:Replacement merge: Default]
									[T -> com.google.common.truth.Truth.assertThat{ImportPackage} : ImportDeclaration "import static com.google.common.truth.Truth.assertThat;" compose:Replacement merge: Default]
									[NT -> ParameterWriterTest : ClassDeclaration]
										[T -> - : Modifiers "@RunWith(JUnit4.class) public final" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> ParameterWriterTest : Id "ParameterWriterTest" compose:Replacement merge: Default]
										[T -> simple({FormalParametersInternal}) : MethodDecl "@Test public void simple() {     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("java.lang.Runnable runnable");   }" compose:Replacement merge: LineBased]
										[T -> annotated({FormalParametersInternal}) : MethodDecl "@Test public void annotated() {     ClassName notNull = ClassName.create("example", "NotNull");     ClassName redacted = ClassName.create("example", "Redacted");     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");     parameterWriter.annotate(notNull);     parameterWriter.annotate(redacted);      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("@example.NotNull @example.Redacted java.lang.Runnable runnable");   }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> squareup : Folder]
						[NT -> javawriter : Folder]
							[NT -> ParameterWriterTest.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.squareup.javawriter;" compose:Replacement merge: Default]
									[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
									[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
									[T -> org.junit.runners.JUnit4{ImportPackage} : ImportDeclaration "import org.junit.runners.JUnit4;" compose:Replacement merge: Default]
									[T -> com.google.common.truth.Truth.assertThat{ImportPackage} : ImportDeclaration "import static com.google.common.truth.Truth.assertThat;" compose:Replacement merge: Default]
									[NT -> ParameterWriterTest : ClassDeclaration]
										[T -> - : Modifiers "@RunWith(JUnit4.class) public final" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> ParameterWriterTest : Id "ParameterWriterTest" compose:Replacement merge: Default]
										[T -> simple({FormalParametersInternal}) : MethodDecl "@Test public void simple() {     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("java.lang.Runnable runnable");   }" compose:Replacement merge: LineBased]
										[T -> annotated({FormalParametersInternal}) : MethodDecl "@Test public void annotated() {     ClassName notNull = ClassName.create("example", "NotNull");     ClassName redacted = ClassName.create("example", "Redacted");     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");     parameterWriter.annotate(notNull);     parameterWriter.annotate(redacted);      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("@example.NotNull @example.Redacted java.lang.Runnable runnable");   }" compose:Replacement merge: LineBased]
										[T -> varargs({FormalParametersInternal}) : MethodDecl "@Test public void varargs() {     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");     parameterWriter.setVarargs(true);      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("java.lang.Runnable... runnable");   }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> squareup : Folder]
						[NT -> javawriter : Folder]
							[NT -> ParameterWriterTest.java.merge : .java.merge-File]
								[T -> ParameterWriterTest.java : .java-Content "/*  * Copyright (C) 2014 Square, Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package com.squareup.javawriter;  import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.JUnit4;  import static com.google.common.truth.Truth.assertThat;  /**  * ParameterWriter only differs from FieldWriter in the format of its annotations.  */ @RunWith(JUnit4.class) public final class ParameterWriterTest {   @Test public void simple() {     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("java.lang.Runnable runnable");   }    @Test public void annotated() {     ClassName notNull = ClassName.create("example", "NotNull");     ClassName redacted = ClassName.create("example", "Redacted");     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");     parameterWriter.annotate(notNull);     parameterWriter.annotate(redacted);      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("@example.NotNull @example.Redacted java.lang.Runnable runnable");   } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> squareup : Folder]
						[NT -> javawriter : Folder]
							[NT -> ParameterWriterTest.java.merge : .java.merge-File]
								[T -> ParameterWriterTest.java : .java-Content "/*  * Copyright (C) 2014 Square, Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package com.squareup.javawriter;  import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.JUnit4;  import static com.google.common.truth.Truth.assertThat;  /**  * ParameterWriter differs from FieldWriter in the format of its annotations and varargs support.  */ @RunWith(JUnit4.class) public final class ParameterWriterTest {   @Test public void simple() {     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("java.lang.Runnable runnable");   }    @Test public void annotated() {     ClassName notNull = ClassName.create("example", "NotNull");     ClassName redacted = ClassName.create("example", "Redacted");     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");     parameterWriter.annotate(notNull);     parameterWriter.annotate(redacted);      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("@example.NotNull @example.Redacted java.lang.Runnable runnable");   }    @Test public void varargs() {     ClassName runnable = ClassName.fromClass(Runnable.class);     ParameterWriter parameterWriter = new ParameterWriter(runnable, "runnable");     parameterWriter.setVarargs(true);      assertThat(Writables.writeToString(parameterWriter))         .isEqualTo("java.lang.Runnable... runnable");   } } " compose:StringConcatenation merge: LineBased]
