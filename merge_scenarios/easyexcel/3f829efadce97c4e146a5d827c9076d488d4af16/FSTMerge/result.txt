Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/maven-wrapper.properties
[NT -> left : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.jar " compose:StringConcatenation merge: Default]
[NT -> base : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.jar " compose:StringConcatenation merge: Default]
[NT -> right : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.jar " compose:StringConcatenation merge: Default]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> alibaba : Folder]
						[NT -> easyexcel : Folder]
							[NT -> test : Folder]
								[NT -> temp : Folder]
									[NT -> simple : Folder]
										[NT -> HgTest.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.alibaba.easyexcel.test.temp.simple;" compose:Replacement merge: Default]
												[T -> java.io.FileInputStream{ImportPackage} : ImportDeclaration "import java.io.FileInputStream;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.io.InputStream{ImportPackage} : ImportDeclaration "import java.io.InputStream;" compose:Replacement merge: Default]
												[T -> java.net.URL{ImportPackage} : ImportDeclaration "import java.net.URL;" compose:Replacement merge: Default]
												[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
												[T -> org.junit.Ignore{ImportPackage} : ImportDeclaration "import org.junit.Ignore;" compose:Replacement merge: Default]
												[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
												[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
												[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
												[T -> com.alibaba.excel.EasyExcel{ImportPackage} : ImportDeclaration "import com.alibaba.excel.EasyExcel;" compose:Replacement merge: Default]
												[T -> com.alibaba.fastjson.JSON{ImportPackage} : ImportDeclaration "import com.alibaba.fastjson.JSON;" compose:Replacement merge: Default]
												[NT -> HgTest : ClassDeclaration]
													[T -> - : Modifiers "@Ignore public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> HgTest : Id "HgTest" compose:Replacement merge: Default]
													[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(HgTest.class);" compose:Replacement merge: SemanticConflict]
													[T -> hh({FormalParametersInternal}) : MethodDecl "@Test     public void hh() throws IOException {         List<Object> list =             EasyExcel.read(new FileInputStream("D:\\test\\嘉惠-中交建_2019-09-01_2019-09-30_1569055677522.xlsx")).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }" compose:Replacement merge: LineBased]
													[T -> hh5({FormalParametersInternal}) : MethodDecl "@Test     public void hh5() throws IOException {         URL url = new URL("http://hotelcontractfil.oss-cn-beijing.aliyuncs.com/2019/%E5%98%89%E6%83%A0-%E4%B8%AD%E4%BA%A4%E5%BB%BA_2019-09-01_2019-09-30_1569055677522.xlsx?Expires=1884415681&OSSAccessKeyId=LTAIGZDkqZfPArBr&Signature=Rf0gbO8vl3l%2Brj1KdyzHHMsUhCE%3D");         InputStream is = url.openStream();         List<Object> list =             EasyExcel.read(is).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }" compose:Replacement merge: LineBased]
													[T -> hh2({FormalParametersInternal}) : MethodDecl "@Test     public void hh2() throws IOException {         EasyExcel.read(new FileInputStream("D:\\test\\商户不匹配工单信息收集表格.xlsx"))             .registerReadListener(new HgListener()).headRowNumber(0).sheet().doRead();     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> alibaba : Folder]
						[NT -> easyexcel : Folder]
							[NT -> test : Folder]
								[NT -> temp : Folder]
									[NT -> simple : Folder]
										[NT -> HgTest.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.alibaba.easyexcel.test.temp.simple;" compose:Replacement merge: Default]
												[T -> java.io.FileInputStream{ImportPackage} : ImportDeclaration "import java.io.FileInputStream;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
												[T -> org.junit.Ignore{ImportPackage} : ImportDeclaration "import org.junit.Ignore;" compose:Replacement merge: Default]
												[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
												[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
												[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
												[T -> com.alibaba.excel.EasyExcel{ImportPackage} : ImportDeclaration "import com.alibaba.excel.EasyExcel;" compose:Replacement merge: Default]
												[T -> com.alibaba.fastjson.JSON{ImportPackage} : ImportDeclaration "import com.alibaba.fastjson.JSON;" compose:Replacement merge: Default]
												[NT -> HgTest : ClassDeclaration]
													[T -> - : Modifiers "@Ignore public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> HgTest : Id "HgTest" compose:Replacement merge: Default]
													[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(HgTest.class);" compose:Replacement merge: SemanticConflict]
													[T -> hh({FormalParametersInternal}) : MethodDecl "@Test     public void hh() throws IOException {         List<Object> list =             EasyExcel.read(new FileInputStream("D:\\test\\折扣2007.xls")).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }" compose:Replacement merge: LineBased]
													[T -> hh2({FormalParametersInternal}) : MethodDecl "@Test     public void hh2() throws IOException {         EasyExcel.read(new FileInputStream("D:\\test\\商户不匹配工单信息收集表格.xlsx"))             .registerReadListener(new HgListener()).headRowNumber(0).sheet().doRead();     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> alibaba : Folder]
						[NT -> easyexcel : Folder]
							[NT -> test : Folder]
								[NT -> temp : Folder]
									[NT -> simple : Folder]
										[NT -> HgTest.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.alibaba.easyexcel.test.temp.simple;" compose:Replacement merge: Default]
												[T -> java.io.FileInputStream{ImportPackage} : ImportDeclaration "import java.io.FileInputStream;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
												[T -> org.junit.Ignore{ImportPackage} : ImportDeclaration "import org.junit.Ignore;" compose:Replacement merge: Default]
												[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
												[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
												[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
												[T -> com.alibaba.excel.EasyExcel{ImportPackage} : ImportDeclaration "import com.alibaba.excel.EasyExcel;" compose:Replacement merge: Default]
												[T -> com.alibaba.fastjson.JSON{ImportPackage} : ImportDeclaration "import com.alibaba.fastjson.JSON;" compose:Replacement merge: Default]
												[NT -> HgTest : ClassDeclaration]
													[T -> - : Modifiers "@Ignore public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> HgTest : Id "HgTest" compose:Replacement merge: Default]
													[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(HgTest.class);" compose:Replacement merge: SemanticConflict]
													[T -> hh({FormalParametersInternal}) : MethodDecl "@Test     public void hh() throws IOException {         List<Object> list =             EasyExcel.read(new FileInputStream("D:\\test\\1.xls")).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }" compose:Replacement merge: LineBased]
													[T -> hh2({FormalParametersInternal}) : MethodDecl "@Test     public void hh2() throws IOException {         EasyExcel.read(new FileInputStream("D:\\test\\商户不匹配工单信息收集表格.xlsx"))             .registerReadListener(new HgListener()).headRowNumber(0).sheet().doRead();     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> alibaba : Folder]
						[NT -> easyexcel : Folder]
							[NT -> test : Folder]
								[NT -> temp : Folder]
									[NT -> simple : Folder]
										[NT -> HgTest.java.merge : .java.merge-File]
											[T -> HgTest.java : .java-Content "package com.alibaba.easyexcel.test.temp.simple;  import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.net.URL; import java.util.List;  import org.junit.Ignore; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import com.alibaba.excel.EasyExcel; import com.alibaba.fastjson.JSON;  /**  * 测试poi  *  * @author Jiaju Zhuang  **/ @Ignore public class HgTest {     private static final Logger LOGGER = LoggerFactory.getLogger(HgTest.class);      @Test     public void hh() throws IOException {         List<Object> list =             EasyExcel.read(new FileInputStream("D:\\test\\嘉惠-中交建_2019-09-01_2019-09-30_1569055677522.xlsx")).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }      @Test     public void hh5() throws IOException {         URL url = new URL("http://hotelcontractfil.oss-cn-beijing.aliyuncs.com/2019/%E5%98%89%E6%83%A0-%E4%B8%AD%E4%BA%A4%E5%BB%BA_2019-09-01_2019-09-30_1569055677522.xlsx?Expires=1884415681&OSSAccessKeyId=LTAIGZDkqZfPArBr&Signature=Rf0gbO8vl3l%2Brj1KdyzHHMsUhCE%3D");         InputStream is = url.openStream();         List<Object> list =             EasyExcel.read(is).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }      @Test     public void hh2() throws IOException {         EasyExcel.read(new FileInputStream("D:\\test\\商户不匹配工单信息收集表格.xlsx"))             .registerReadListener(new HgListener()).headRowNumber(0).sheet().doRead();     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> alibaba : Folder]
						[NT -> easyexcel : Folder]
							[NT -> test : Folder]
								[NT -> temp : Folder]
									[NT -> simple : Folder]
										[NT -> HgTest.java.merge : .java.merge-File]
											[T -> HgTest.java : .java-Content "package com.alibaba.easyexcel.test.temp.simple;  import java.io.FileInputStream; import java.io.IOException; import java.util.List;  import org.junit.Ignore; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import com.alibaba.excel.EasyExcel; import com.alibaba.fastjson.JSON;  /**  * 测试poi  *  * @author Jiaju Zhuang  **/ @Ignore public class HgTest {     private static final Logger LOGGER = LoggerFactory.getLogger(HgTest.class);      @Test     public void hh() throws IOException {         List<Object> list =             EasyExcel.read(new FileInputStream("D:\\test\\折扣2007.xls")).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }      @Test     public void hh2() throws IOException {         EasyExcel.read(new FileInputStream("D:\\test\\商户不匹配工单信息收集表格.xlsx"))             .registerReadListener(new HgListener()).headRowNumber(0).sheet().doRead();     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> alibaba : Folder]
						[NT -> easyexcel : Folder]
							[NT -> test : Folder]
								[NT -> temp : Folder]
									[NT -> simple : Folder]
										[NT -> HgTest.java.merge : .java.merge-File]
											[T -> HgTest.java : .java-Content "package com.alibaba.easyexcel.test.temp.simple;  import java.io.FileInputStream; import java.io.IOException; import java.util.List;  import org.junit.Ignore; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import com.alibaba.excel.EasyExcel; import com.alibaba.fastjson.JSON;  /**  * 测试poi  *  * @author Jiaju Zhuang  **/ @Ignore public class HgTest {     private static final Logger LOGGER = LoggerFactory.getLogger(HgTest.class);      @Test     public void hh() throws IOException {         List<Object> list =             EasyExcel.read(new FileInputStream("D:\\test\\1.xls")).headRowNumber(0).sheet().doReadSync();         for (Object data : list) {             LOGGER.info("返回数据：{}", JSON.toJSONString(data));         }     }      @Test     public void hh2() throws IOException {         EasyExcel.read(new FileInputStream("D:\\test\\商户不匹配工单信息收集表格.xlsx"))             .registerReadListener(new HgListener()).headRowNumber(0).sheet().doRead();     }  } " compose:StringConcatenation merge: LineBased]
