Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/net/coobird/thumbnailator/geometry/Size.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/net/coobird/thumbnailator/geometry/Size.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/net/coobird/thumbnailator/geometry/Size.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/net/coobird/thumbnailator/geometry/Size.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/net/coobird/thumbnailator/geometry/Size.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/net/coobird/thumbnailator/geometry/Size.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> net : Folder]
			[NT -> coobird : Folder]
				[NT -> thumbnailator : Folder]
					[NT -> geometry : Folder]
						[NT -> Size.java : Java-File]
							[NT -> - : CompilationUnit]
								[T -> - : PackageDeclaration "package net.coobird.thumbnailator.geometry;" compose:Replacement merge: Default]
								[T -> java.awt.Dimension{ImportPackage} : ImportDeclaration "import java.awt.Dimension;" compose:Replacement merge: Default]
								[NT -> Size : ClassDeclaration]
									[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
									[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
									[T -> Size : Id "Size" compose:Replacement merge: Default]
									[T -> calculate(int-int-int-int) : MethodDecl "public Dimension calculate(int width, int height);" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> net : Folder]
			[NT -> coobird : Folder]
				[NT -> thumbnailator : Folder]
					[NT -> geometry : Folder]
						[NT -> Size.java : Java-File]
							[NT -> - : CompilationUnit]
								[T -> - : PackageDeclaration "package net.coobird.thumbnailator.geometry;" compose:Replacement merge: Default]
								[T -> java.awt.Dimension{ImportPackage} : ImportDeclaration "import java.awt.Dimension;" compose:Replacement merge: Default]
								[NT -> Size : ClassDeclaration]
									[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
									[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
									[T -> Size : Id "Size" compose:Replacement merge: Default]
									[T -> calculate(int-int-int-int) : MethodDecl "public Dimension calculate(int width, int height);" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> net : Folder]
			[NT -> coobird : Folder]
				[NT -> thumbnailator : Folder]
					[NT -> geometry : Folder]
						[NT -> Size.java : Java-File]
							[NT -> - : CompilationUnit]
								[T -> - : PackageDeclaration "package net.coobird.thumbnailator.geometry;" compose:Replacement merge: Default]
								[T -> java.awt.Dimension{ImportPackage} : ImportDeclaration "import java.awt.Dimension;" compose:Replacement merge: Default]
								[NT -> Size : ClassDeclaration]
									[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
									[T -> - : ClassOrInterface2 "interface" compose:Replacement merge: Default]
									[T -> Size : Id "Size" compose:Replacement merge: Default]
									[T -> calculate(int-int-int-int) : MethodDecl "public Dimension calculate(int width, int height);" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> net : Folder]
			[NT -> coobird : Folder]
				[NT -> thumbnailator : Folder]
					[NT -> geometry : Folder]
						[NT -> Size.java.merge : .java.merge-File]
							[T -> Size.java : .java-Content "package net.coobird.thumbnailator.geometry;  import java.awt.Dimension;  /**  * This interface is implemented by classes which calculate the size of an  * object inside of an enclosing object.  *   * @author coobird  * @since 0.3.4  *  */ public interface Size {  /**   * Calculates the size of the object.    *    * @param width   Width of the object which encloses the object    *       for which the size should be determined.   * @param height  Height of the object which encloses the object    *       for which the size should be determined.   * @return    Calculated size of the object.   * @throws IllegalArgumentException If the width and/or height is less than   *          or equal to {@code 0}.    */  public Dimension calculate(int width, int height); } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> net : Folder]
			[NT -> coobird : Folder]
				[NT -> thumbnailator : Folder]
					[NT -> geometry : Folder]
						[NT -> Size.java.merge : .java.merge-File]
							[T -> Size.java : .java-Content "package net.coobird.thumbnailator.geometry;  import java.awt.Dimension;  /**  * This interface is implemented by classes which calculate the size of an  * object inside of an enclosing object.  *   * @author coobird  *  */ public interface Size {  /**   * Calculates the size of the object.    *    * @param width   Width of the object which encloses the object    *       for which the size should be determined.   * @param height  Height of the object which encloses the object    *       for which the size should be determined.   * @return    Calculated size of the object.   * @throws IllegalArgumentException If the width and/or height is less than   *          or equal to {@code 0}.    */  public Dimension calculate(int width, int height); } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> net : Folder]
			[NT -> coobird : Folder]
				[NT -> thumbnailator : Folder]
					[NT -> geometry : Folder]
						[NT -> Size.java.merge : .java.merge-File]
							[T -> Size.java : .java-Content "package net.coobird.thumbnailator.geometry;  import java.awt.Dimension;  /**  * This interface is implemented by classes which calculate the size of an  * object inside of an enclosing object.  *   * @author coobird  * @since 0.3.4  *  */ public interface Size {  /**   * Calculates the size of the object.    *    * @param width   Width of the object which encloses the object    *       for which the size should be determined.   * @param height  Height of the object which encloses the object    *       for which the size should be determined.   * @return    Calculated size of the object.   * @throws IllegalArgumentException If the width and/or height is less than   *          or equal to {@code 0}.    */  public Dimension calculate(int width, int height); } " compose:StringConcatenation merge: LineBased]
