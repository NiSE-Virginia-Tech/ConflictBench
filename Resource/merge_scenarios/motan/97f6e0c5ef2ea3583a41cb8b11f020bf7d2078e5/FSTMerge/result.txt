Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/ServiceConfigBean.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/ServiceConfigBean.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/ServiceConfigBean.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/ServiceConfigBean.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/ServiceConfigBean.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/ServiceConfigBean.java
[NT -> left : Feature]
	[NT -> motan-springsupport : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> weibo : Folder]
							[NT -> api : Folder]
								[NT -> motan : Folder]
									[NT -> config : Folder]
										[NT -> springsupport : Folder]
											[NT -> ServiceConfigBean.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package com.weibo.api.motan.config.springsupport;" compose:Replacement merge: Default]
													[T -> java.util.ArrayList{ImportPackage} : ImportDeclaration "import java.util.ArrayList;" compose:Replacement merge: Default]
													[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
													[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
													[T -> org.apache.commons.lang3.StringUtils{ImportPackage} : ImportDeclaration "import org.apache.commons.lang3.StringUtils;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.BeansException{ImportPackage} : ImportDeclaration "import org.springframework.beans.BeansException;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.BeanFactory{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.BeanFactory;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.BeanFactoryAware{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.BeanFactoryAware;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.DisposableBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.DisposableBean;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.InitializingBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.InitializingBean;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.config.BeanPostProcessor{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.config.BeanPostProcessor;" compose:Replacement merge: Default]
													[T -> org.springframework.context.ApplicationListener{ImportPackage} : ImportDeclaration "import org.springframework.context.ApplicationListener;" compose:Replacement merge: Default]
													[T -> org.springframework.context.event.ContextRefreshedEvent{ImportPackage} : ImportDeclaration "import org.springframework.context.event.ContextRefreshedEvent;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.common.MotanConstants{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.common.MotanConstants;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.BasicServiceInterfaceConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.BasicServiceInterfaceConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ConfigUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ConfigUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ProtocolConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ProtocolConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.RegistryConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.RegistryConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ServiceConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ServiceConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.exception.MotanErrorMsgConstant{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.exception.MotanErrorMsgConstant;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.exception.MotanFrameworkException{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.exception.MotanFrameworkException;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.CollectionUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.CollectionUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.MathUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.MathUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.MotanFrameworkUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.MotanFrameworkUtil;" compose:Replacement merge: Default]
													[NT -> ServiceConfigBean : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> ServiceConfigBean : Id "ServiceConfigBean" compose:Replacement merge: Default]
														[T -> - : TypeParameters "<T>" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends ServiceConfig<T>" compose:Replacement merge: Default]
														[T -> ImplList : ImplementsList "implements             BeanPostProcessor,             BeanFactoryAware,             InitializingBean,             DisposableBean,             ApplicationListener<ContextRefreshedEvent>" compose:Replacement merge: SemanticConflict]
														[T -> serialVersionUID : FieldDecl "private static final long serialVersionUID = -7247592395983804440L;" compose:Replacement merge: SemanticConflict]
														[T -> beanFactory : FieldDecl "private transient BeanFactory beanFactory;" compose:Replacement merge: SemanticConflict]
														[T -> destroy({FormalParametersInternal}) : MethodDecl "@Override     public void destroy() throws Exception {         unexport();     }" compose:Replacement merge: LineBased]
														[T -> afterPropertiesSet({FormalParametersInternal}) : MethodDecl "@Override     public void afterPropertiesSet() throws Exception {          // 注意:basicConfig需要首先配置，因为其他可能会依赖于basicConfig的配置         checkAndConfigBasicConfig();         checkAndConfigExport();         checkAndConfigRegistry();          // 等spring初始化完毕后，再export服务         // export();     }" compose:Replacement merge: LineBased]
														[T -> setBeanFactory(BeanFactory-BeanFactory) : MethodDecl "@Override     public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;     }" compose:Replacement merge: LineBased]
														[T -> postProcessBeforeInitialization(Object-Object-String-String) : MethodDecl "@Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }" compose:Replacement merge: LineBased]
														[T -> postProcessAfterInitialization(Object-Object-String-String) : MethodDecl "@Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }" compose:Replacement merge: LineBased]
														[T -> onApplicationEvent(ContextRefreshedEvent-ContextRefreshedEvent) : MethodDecl "@Override     public void onApplicationEvent(ContextRefreshedEvent event) {         if (!getExported().get()) {             export();         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigBasicConfig({FormalParametersInternal}) : MethodDecl "private void checkAndConfigBasicConfig() {         if (getBasicServiceConfig() == null) {             for (String name : MotanNamespaceHandler.basicServiceConfigDefineNames) {                 BasicServiceInterfaceConfig biConfig = beanFactory.getBean(name, BasicServiceInterfaceConfig.class);                 if (biConfig == null) {                     continue;                 }                 if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 1) {                     setBasicServiceConfig(biConfig);                 } else if (biConfig.isDefault() != null && biConfig.isDefault().booleanValue()) {                     setBasicServiceConfig(biConfig);                 }             }         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigExport({FormalParametersInternal}) : MethodDecl "private void checkAndConfigExport() {         if (StringUtils.isBlank(getExport()) && getBasicServiceConfig() != null                 && !StringUtils.isBlank(getBasicServiceConfig().getExport())) {             setExport(getBasicServiceConfig().getExport());             if (getBasicServiceConfig().getProtocols() != null) {                 setProtocols(new ArrayList<ProtocolConfig>(getBasicServiceConfig().getProtocols()));             }         }         if(CollectionUtil.isEmpty(getProtocols()) && StringUtils.isNotEmpty(getExport())){             Map<String, Integer> exportMap = ConfigUtil.parseExport(export);             if(!exportMap.isEmpty()){                 List<ProtocolConfig> protos = new ArrayList<ProtocolConfig>();                 for (String p : exportMap.keySet()) {                     ProtocolConfig proto = beanFactory.getBean(p, ProtocolConfig.class);                     if(proto == null){                         if(MotanConstants.PROTOCOL_MOTAN.equals(p)){                             proto = MotanFrameworkUtil.getDefaultProtocolConfig();                         } else{                             throw new MotanFrameworkException(String.format("cann't find %s ProtocolConfig bean! export:%s", p, export),                                 MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);                         }                     }                     protos.add(proto);                 }                 setProtocols(protos);             }         }         if (StringUtils.isEmpty(getExport()) || CollectionUtil.isEmpty(getProtocols())) {             throw new MotanFrameworkException(String.format("%s ServiceConfig must config right export value!", getInterface().getName()),                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigRegistry({FormalParametersInternal}) : MethodDecl "private void checkAndConfigRegistry() {         if (CollectionUtil.isEmpty(getRegistries()) && getBasicServiceConfig() != null                 && !CollectionUtil.isEmpty(getBasicServiceConfig().getRegistries())) {             setRegistries(getBasicServiceConfig().getRegistries());         }         if (CollectionUtil.isEmpty(getRegistries())) {             for (String name : MotanNamespaceHandler.registryDefineNames) {                 RegistryConfig rc = beanFactory.getBean(name, RegistryConfig.class);                 if (rc == null) {                     continue;                 }                 if (MotanNamespaceHandler.registryDefineNames.size() == 1) {                     setRegistry(rc);                 } else if (rc.isDefault() != null && rc.isDefault().booleanValue()) {                     setRegistry(rc);                 }             }         }         if (CollectionUtil.isEmpty(getRegistries())) {             setRegistry(MotanFrameworkUtil.getDefaultRegistryConfig());         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> motan-springsupport : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> weibo : Folder]
							[NT -> api : Folder]
								[NT -> motan : Folder]
									[NT -> config : Folder]
										[NT -> springsupport : Folder]
											[NT -> ServiceConfigBean.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package com.weibo.api.motan.config.springsupport;" compose:Replacement merge: Default]
													[T -> java.util.ArrayList{ImportPackage} : ImportDeclaration "import java.util.ArrayList;" compose:Replacement merge: Default]
													[T -> org.apache.commons.lang3.StringUtils{ImportPackage} : ImportDeclaration "import org.apache.commons.lang3.StringUtils;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.BeansException{ImportPackage} : ImportDeclaration "import org.springframework.beans.BeansException;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.BeanFactory{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.BeanFactory;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.BeanFactoryAware{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.BeanFactoryAware;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.DisposableBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.DisposableBean;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.InitializingBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.InitializingBean;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.config.BeanPostProcessor{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.config.BeanPostProcessor;" compose:Replacement merge: Default]
													[T -> org.springframework.context.ApplicationListener{ImportPackage} : ImportDeclaration "import org.springframework.context.ApplicationListener;" compose:Replacement merge: Default]
													[T -> org.springframework.context.event.ContextRefreshedEvent{ImportPackage} : ImportDeclaration "import org.springframework.context.event.ContextRefreshedEvent;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.common.MotanConstants{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.common.MotanConstants;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.BasicServiceInterfaceConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.BasicServiceInterfaceConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ProtocolConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ProtocolConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.RegistryConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.RegistryConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ServiceConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ServiceConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.exception.MotanErrorMsgConstant{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.exception.MotanErrorMsgConstant;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.exception.MotanFrameworkException{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.exception.MotanFrameworkException;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.CollectionUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.CollectionUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.MathUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.MathUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.MotanFrameworkUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.MotanFrameworkUtil;" compose:Replacement merge: Default]
													[NT -> ServiceConfigBean : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> ServiceConfigBean : Id "ServiceConfigBean" compose:Replacement merge: Default]
														[T -> - : TypeParameters "<T>" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends ServiceConfig<T>" compose:Replacement merge: Default]
														[T -> ImplList : ImplementsList "implements             BeanPostProcessor,             BeanFactoryAware,             InitializingBean,             DisposableBean,             ApplicationListener<ContextRefreshedEvent>" compose:Replacement merge: SemanticConflict]
														[T -> serialVersionUID : FieldDecl "private static final long serialVersionUID = -7247592395983804440L;" compose:Replacement merge: SemanticConflict]
														[T -> beanFactory : FieldDecl "private transient BeanFactory beanFactory;" compose:Replacement merge: SemanticConflict]
														[T -> destroy({FormalParametersInternal}) : MethodDecl "@Override     public void destroy() throws Exception {         unexport();     }" compose:Replacement merge: LineBased]
														[T -> afterPropertiesSet({FormalParametersInternal}) : MethodDecl "@Override     public void afterPropertiesSet() throws Exception {          // 注意:basicConfig需要首先配置，因为其他可能会依赖于basicConfig的配置         checkAndConfigBasicConfig();         checkAndConfigExport();         checkAndConfigRegistry();          // 等spring初始化完毕后，再export服务         // export();     }" compose:Replacement merge: LineBased]
														[T -> setBeanFactory(BeanFactory-BeanFactory) : MethodDecl "@Override     public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;     }" compose:Replacement merge: LineBased]
														[T -> postProcessBeforeInitialization(Object-Object-String-String) : MethodDecl "@Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }" compose:Replacement merge: LineBased]
														[T -> postProcessAfterInitialization(Object-Object-String-String) : MethodDecl "@Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }" compose:Replacement merge: LineBased]
														[T -> onApplicationEvent(ContextRefreshedEvent-ContextRefreshedEvent) : MethodDecl "@Override     public void onApplicationEvent(ContextRefreshedEvent event) {         if (!getExported().get()) {             export();         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigBasicConfig({FormalParametersInternal}) : MethodDecl "private void checkAndConfigBasicConfig() {         if (getBasicServiceConfig() == null) {             for (String name : MotanNamespaceHandler.basicServiceConfigDefineNames) {                 BasicServiceInterfaceConfig biConfig = beanFactory.getBean(name, BasicServiceInterfaceConfig.class);                 if (biConfig == null) {                     continue;                 }                 if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 1) {                     setBasicServiceConfig(biConfig);                 } else if (biConfig.isDefault() != null && biConfig.isDefault().booleanValue()) {                     setBasicServiceConfig(biConfig);                 }             }         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigExport({FormalParametersInternal}) : MethodDecl "private void checkAndConfigExport() {         if (StringUtils.isBlank(getExport()) && getBasicServiceConfig() != null                 && !StringUtils.isBlank(getBasicServiceConfig().getExport())) {             setExport(getBasicServiceConfig().getExport());             if (getBasicServiceConfig().getProtocols() != null) {                 setProtocols(new ArrayList<ProtocolConfig>(getBasicServiceConfig().getProtocols()));             }         }         if(CollectionUtil.isEmpty(getProtocols()) && StringUtils.isNotEmpty(getExport())){             int port = MathUtil.parseInt(export, 0);             if(port > 0){                 export = MotanConstants.PROTOCOL_MOTAN + ":" + export;                 setProtocol(MotanFrameworkUtil.getDefaultProtocolConfig());             }         }         if (StringUtils.isEmpty(getExport()) || CollectionUtil.isEmpty(getProtocols())) {             throw new MotanFrameworkException(String.format("%s ServiceConfig must config right export value!", getInterface().getName()),                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigRegistry({FormalParametersInternal}) : MethodDecl "private void checkAndConfigRegistry() {         if (CollectionUtil.isEmpty(getRegistries()) && getBasicServiceConfig() != null                 && !CollectionUtil.isEmpty(getBasicServiceConfig().getRegistries())) {             setRegistries(getBasicServiceConfig().getRegistries());         }         if (CollectionUtil.isEmpty(getRegistries())) {             for (String name : MotanNamespaceHandler.registryDefineNames) {                 RegistryConfig rc = beanFactory.getBean(name, RegistryConfig.class);                 if (rc == null) {                     continue;                 }                 if (MotanNamespaceHandler.registryDefineNames.size() == 1) {                     setRegistry(rc);                 } else if (rc.isDefault() != null && rc.isDefault().booleanValue()) {                     setRegistry(rc);                 }             }         }         if (CollectionUtil.isEmpty(getRegistries())) {             setRegistry(MotanFrameworkUtil.getDefaultRegistryConfig());         }     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> motan-springsupport : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> weibo : Folder]
							[NT -> api : Folder]
								[NT -> motan : Folder]
									[NT -> config : Folder]
										[NT -> springsupport : Folder]
											[NT -> ServiceConfigBean.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package com.weibo.api.motan.config.springsupport;" compose:Replacement merge: Default]
													[T -> java.util.ArrayList{ImportPackage} : ImportDeclaration "import java.util.ArrayList;" compose:Replacement merge: Default]
													[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
													[T -> org.apache.commons.lang3.StringUtils{ImportPackage} : ImportDeclaration "import org.apache.commons.lang3.StringUtils;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.BeansException{ImportPackage} : ImportDeclaration "import org.springframework.beans.BeansException;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.BeanFactory{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.BeanFactory;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.BeanFactoryAware{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.BeanFactoryAware;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.DisposableBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.DisposableBean;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.InitializingBean{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.InitializingBean;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.ListableBeanFactory{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.ListableBeanFactory;" compose:Replacement merge: Default]
													[T -> org.springframework.beans.factory.config.BeanPostProcessor{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.config.BeanPostProcessor;" compose:Replacement merge: Default]
													[T -> org.springframework.context.ApplicationListener{ImportPackage} : ImportDeclaration "import org.springframework.context.ApplicationListener;" compose:Replacement merge: Default]
													[T -> org.springframework.context.event.ContextRefreshedEvent{ImportPackage} : ImportDeclaration "import org.springframework.context.event.ContextRefreshedEvent;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.common.MotanConstants{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.common.MotanConstants;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.BasicServiceInterfaceConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.BasicServiceInterfaceConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ProtocolConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ProtocolConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.RegistryConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.RegistryConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.config.ServiceConfig{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.config.ServiceConfig;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.exception.MotanErrorMsgConstant{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.exception.MotanErrorMsgConstant;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.exception.MotanFrameworkException{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.exception.MotanFrameworkException;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.CollectionUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.CollectionUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.MathUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.MathUtil;" compose:Replacement merge: Default]
													[T -> com.weibo.api.motan.util.MotanFrameworkUtil{ImportPackage} : ImportDeclaration "import com.weibo.api.motan.util.MotanFrameworkUtil;" compose:Replacement merge: Default]
													[NT -> ServiceConfigBean : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> ServiceConfigBean : Id "ServiceConfigBean" compose:Replacement merge: Default]
														[T -> - : TypeParameters "<T>" compose:Replacement merge: Default]
														[T -> - : ExtendsList "extends ServiceConfig<T>" compose:Replacement merge: Default]
														[T -> ImplList : ImplementsList "implements         BeanPostProcessor,         BeanFactoryAware,         InitializingBean,         DisposableBean,         ApplicationListener<ContextRefreshedEvent>" compose:Replacement merge: SemanticConflict]
														[T -> serialVersionUID : FieldDecl "private static final long serialVersionUID = -7247592395983804440L;" compose:Replacement merge: SemanticConflict]
														[T -> beanFactory : FieldDecl "private transient BeanFactory beanFactory;" compose:Replacement merge: SemanticConflict]
														[T -> destroy({FormalParametersInternal}) : MethodDecl "@Override     public void destroy() throws Exception {         unexport();     }" compose:Replacement merge: LineBased]
														[T -> afterPropertiesSet({FormalParametersInternal}) : MethodDecl "@Override     public void afterPropertiesSet() throws Exception {          // 注意:basicConfig需要首先配置，因为其他可能会依赖于basicConfig的配置         checkAndConfigBasicConfig();         checkAndConfigExport();         checkAndConfigRegistry();          // 等spring初始化完毕后，再export服务         // export();     }" compose:Replacement merge: LineBased]
														[T -> setBeanFactory(BeanFactory-BeanFactory) : MethodDecl "@Override     public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;     }" compose:Replacement merge: LineBased]
														[T -> postProcessBeforeInitialization(Object-Object-String-String) : MethodDecl "@Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }" compose:Replacement merge: LineBased]
														[T -> postProcessAfterInitialization(Object-Object-String-String) : MethodDecl "@Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }" compose:Replacement merge: LineBased]
														[T -> onApplicationEvent(ContextRefreshedEvent-ContextRefreshedEvent) : MethodDecl "@Override     public void onApplicationEvent(ContextRefreshedEvent event) {         if (!getExported().get()) {             export();         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigBasicConfig({FormalParametersInternal}) : MethodDecl "private void checkAndConfigBasicConfig() {         if (getBasicServiceConfig() == null) {             if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 0) {                 if (beanFactory instanceof ListableBeanFactory) {                     ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;                     String[] basicServiceConfigNames = listableBeanFactory.getBeanNamesForType                             (BasicServiceInterfaceConfig                                     .class);                     MotanNamespaceHandler.basicServiceConfigDefineNames.addAll(Arrays.asList(basicServiceConfigNames));                 }             }             for (String name : MotanNamespaceHandler.basicServiceConfigDefineNames) {                 BasicServiceInterfaceConfig biConfig = beanFactory.getBean(name, BasicServiceInterfaceConfig.class);                 if (biConfig == null) {                     continue;                 }                 if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 1) {                     setBasicServiceConfig(biConfig);                 } else if (biConfig.isDefault() != null && biConfig.isDefault().booleanValue()) {                     setBasicServiceConfig(biConfig);                 }             }         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigExport({FormalParametersInternal}) : MethodDecl "private void checkAndConfigExport() {         if (StringUtils.isBlank(getExport()) && getBasicServiceConfig() != null                 && !StringUtils.isBlank(getBasicServiceConfig().getExport())) {             setExport(getBasicServiceConfig().getExport());             if (getBasicServiceConfig().getProtocols() != null) {                 setProtocols(new ArrayList<ProtocolConfig>(getBasicServiceConfig().getProtocols()));             }         }         if (CollectionUtil.isEmpty(getProtocols()) && StringUtils.isNotEmpty(getExport())) {             int port = MathUtil.parseInt(export, 0);             if (port > 0) {                 export = MotanConstants.PROTOCOL_MOTAN + ":" + export;                 setProtocol(MotanFrameworkUtil.getDefaultProtocolConfig());             }         }         if (StringUtils.isEmpty(getExport()) || CollectionUtil.isEmpty(getProtocols())) {             throw new MotanFrameworkException(String.format("%s ServiceConfig must config right export value!", getInterface().getName()),                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);         }     }" compose:Replacement merge: LineBased]
														[T -> checkAndConfigRegistry({FormalParametersInternal}) : MethodDecl "private void checkAndConfigRegistry() {         if (CollectionUtil.isEmpty(getRegistries()) && getBasicServiceConfig() != null                 && !CollectionUtil.isEmpty(getBasicServiceConfig().getRegistries())) {             setRegistries(getBasicServiceConfig().getRegistries());         }         if (CollectionUtil.isEmpty(getRegistries())) {             for (String name : MotanNamespaceHandler.registryDefineNames) {                 RegistryConfig rc = beanFactory.getBean(name, RegistryConfig.class);                 if (rc == null) {                     continue;                 }                 if (MotanNamespaceHandler.registryDefineNames.size() == 1) {                     setRegistry(rc);                 } else if (rc.isDefault() != null && rc.isDefault().booleanValue()) {                     setRegistry(rc);                 }             }         }         if (CollectionUtil.isEmpty(getRegistries())) {             setRegistry(MotanFrameworkUtil.getDefaultRegistryConfig());         }     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> motan-springsupport : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> weibo : Folder]
							[NT -> api : Folder]
								[NT -> motan : Folder]
									[NT -> config : Folder]
										[NT -> springsupport : Folder]
											[NT -> ServiceConfigBean.java.merge : .java.merge-File]
												[T -> ServiceConfigBean.java : .java-Content "/*  *  Copyright 2009-2016 Weibo, Inc.  *  *    Licensed under the Apache License, Version 2.0 (the "License");  *    you may not use this file except in compliance with the License.  *    You may obtain a copy of the License at  *  *        http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing, software  *    distributed under the License is distributed on an "AS IS" BASIS,  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *    See the License for the specific language governing permissions and  *    limitations under the License.  */  package com.weibo.api.motan.config.springsupport;  import java.util.ArrayList; import java.util.List; import java.util.Map;  import org.apache.commons.lang3.StringUtils; import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean; import org.springframework.beans.factory.config.BeanPostProcessor; import org.springframework.context.ApplicationListener; import org.springframework.context.event.ContextRefreshedEvent;  import com.weibo.api.motan.common.MotanConstants; import com.weibo.api.motan.config.BasicServiceInterfaceConfig; import com.weibo.api.motan.config.ConfigUtil; import com.weibo.api.motan.config.ProtocolConfig; import com.weibo.api.motan.config.RegistryConfig; import com.weibo.api.motan.config.ServiceConfig; import com.weibo.api.motan.exception.MotanErrorMsgConstant; import com.weibo.api.motan.exception.MotanFrameworkException; import com.weibo.api.motan.util.CollectionUtil; import com.weibo.api.motan.util.MathUtil; import com.weibo.api.motan.util.MotanFrameworkUtil;  public class ServiceConfigBean<T> extends ServiceConfig<T>         implements             BeanPostProcessor,             BeanFactoryAware,             InitializingBean,             DisposableBean,             ApplicationListener<ContextRefreshedEvent> {      private static final long serialVersionUID = -7247592395983804440L;      private transient BeanFactory beanFactory;      @Override     public void destroy() throws Exception {         unexport();     }      @Override     public void afterPropertiesSet() throws Exception {          // 注意:basicConfig需要首先配置，因为其他可能会依赖于basicConfig的配置         checkAndConfigBasicConfig();         checkAndConfigExport();         checkAndConfigRegistry();          // 等spring初始化完毕后，再export服务         // export();     }      @Override     public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;     }      // 为了让serviceBean最早加载     @Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      @Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      @Override     public void onApplicationEvent(ContextRefreshedEvent event) {         if (!getExported().get()) {             export();         }     }      /**      * 检查并配置basicConfig      */     private void checkAndConfigBasicConfig() {         if (getBasicServiceConfig() == null) {             for (String name : MotanNamespaceHandler.basicServiceConfigDefineNames) {                 BasicServiceInterfaceConfig biConfig = beanFactory.getBean(name, BasicServiceInterfaceConfig.class);                 if (biConfig == null) {                     continue;                 }                 if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 1) {                     setBasicServiceConfig(biConfig);                 } else if (biConfig.isDefault() != null && biConfig.isDefault().booleanValue()) {                     setBasicServiceConfig(biConfig);                 }             }         }     }      /**      * 检查是否已经装配export，如果没有则到basicConfig查找      */     private void checkAndConfigExport() {         if (StringUtils.isBlank(getExport()) && getBasicServiceConfig() != null                 && !StringUtils.isBlank(getBasicServiceConfig().getExport())) {             setExport(getBasicServiceConfig().getExport());             if (getBasicServiceConfig().getProtocols() != null) {                 setProtocols(new ArrayList<ProtocolConfig>(getBasicServiceConfig().getProtocols()));             }         }         if(CollectionUtil.isEmpty(getProtocols()) && StringUtils.isNotEmpty(getExport())){             Map<String, Integer> exportMap = ConfigUtil.parseExport(export);             if(!exportMap.isEmpty()){                 List<ProtocolConfig> protos = new ArrayList<ProtocolConfig>();                 for (String p : exportMap.keySet()) {                     ProtocolConfig proto = beanFactory.getBean(p, ProtocolConfig.class);                     if(proto == null){                         if(MotanConstants.PROTOCOL_MOTAN.equals(p)){                             proto = MotanFrameworkUtil.getDefaultProtocolConfig();                         } else{                             throw new MotanFrameworkException(String.format("cann't find %s ProtocolConfig bean! export:%s", p, export),                                 MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);                         }                     }                     protos.add(proto);                 }                 setProtocols(protos);             }         }         if (StringUtils.isEmpty(getExport()) || CollectionUtil.isEmpty(getProtocols())) {             throw new MotanFrameworkException(String.format("%s ServiceConfig must config right export value!", getInterface().getName()),                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);         }     }      /**      * 检查并配置registry      */     private void checkAndConfigRegistry() {         if (CollectionUtil.isEmpty(getRegistries()) && getBasicServiceConfig() != null                 && !CollectionUtil.isEmpty(getBasicServiceConfig().getRegistries())) {             setRegistries(getBasicServiceConfig().getRegistries());         }         if (CollectionUtil.isEmpty(getRegistries())) {             for (String name : MotanNamespaceHandler.registryDefineNames) {                 RegistryConfig rc = beanFactory.getBean(name, RegistryConfig.class);                 if (rc == null) {                     continue;                 }                 if (MotanNamespaceHandler.registryDefineNames.size() == 1) {                     setRegistry(rc);                 } else if (rc.isDefault() != null && rc.isDefault().booleanValue()) {                     setRegistry(rc);                 }             }         }         if (CollectionUtil.isEmpty(getRegistries())) {             setRegistry(MotanFrameworkUtil.getDefaultRegistryConfig());         }     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> motan-springsupport : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> weibo : Folder]
							[NT -> api : Folder]
								[NT -> motan : Folder]
									[NT -> config : Folder]
										[NT -> springsupport : Folder]
											[NT -> ServiceConfigBean.java.merge : .java.merge-File]
												[T -> ServiceConfigBean.java : .java-Content "/*  *  Copyright 2009-2016 Weibo, Inc.  *  *    Licensed under the Apache License, Version 2.0 (the "License");  *    you may not use this file except in compliance with the License.  *    You may obtain a copy of the License at  *  *        http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing, software  *    distributed under the License is distributed on an "AS IS" BASIS,  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *    See the License for the specific language governing permissions and  *    limitations under the License.  */  package com.weibo.api.motan.config.springsupport;  import java.util.ArrayList;  import org.apache.commons.lang3.StringUtils; import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean; import org.springframework.beans.factory.config.BeanPostProcessor; import org.springframework.context.ApplicationListener; import org.springframework.context.event.ContextRefreshedEvent;  import com.weibo.api.motan.common.MotanConstants; import com.weibo.api.motan.config.BasicServiceInterfaceConfig; import com.weibo.api.motan.config.ProtocolConfig; import com.weibo.api.motan.config.RegistryConfig; import com.weibo.api.motan.config.ServiceConfig; import com.weibo.api.motan.exception.MotanErrorMsgConstant; import com.weibo.api.motan.exception.MotanFrameworkException; import com.weibo.api.motan.util.CollectionUtil; import com.weibo.api.motan.util.MathUtil; import com.weibo.api.motan.util.MotanFrameworkUtil;  public class ServiceConfigBean<T> extends ServiceConfig<T>         implements             BeanPostProcessor,             BeanFactoryAware,             InitializingBean,             DisposableBean,             ApplicationListener<ContextRefreshedEvent> {      private static final long serialVersionUID = -7247592395983804440L;      private transient BeanFactory beanFactory;      @Override     public void destroy() throws Exception {         unexport();     }      @Override     public void afterPropertiesSet() throws Exception {          // 注意:basicConfig需要首先配置，因为其他可能会依赖于basicConfig的配置         checkAndConfigBasicConfig();         checkAndConfigExport();         checkAndConfigRegistry();          // 等spring初始化完毕后，再export服务         // export();     }      @Override     public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;     }      // 为了让serviceBean最早加载     @Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      @Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      @Override     public void onApplicationEvent(ContextRefreshedEvent event) {         if (!getExported().get()) {             export();         }     }      /**      * 检查并配置basicConfig      */     private void checkAndConfigBasicConfig() {         if (getBasicServiceConfig() == null) {             for (String name : MotanNamespaceHandler.basicServiceConfigDefineNames) {                 BasicServiceInterfaceConfig biConfig = beanFactory.getBean(name, BasicServiceInterfaceConfig.class);                 if (biConfig == null) {                     continue;                 }                 if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 1) {                     setBasicServiceConfig(biConfig);                 } else if (biConfig.isDefault() != null && biConfig.isDefault().booleanValue()) {                     setBasicServiceConfig(biConfig);                 }             }         }     }      /**      * 检查是否已经装配export，如果没有则到basicConfig查找      */     private void checkAndConfigExport() {         if (StringUtils.isBlank(getExport()) && getBasicServiceConfig() != null                 && !StringUtils.isBlank(getBasicServiceConfig().getExport())) {             setExport(getBasicServiceConfig().getExport());             if (getBasicServiceConfig().getProtocols() != null) {                 setProtocols(new ArrayList<ProtocolConfig>(getBasicServiceConfig().getProtocols()));             }         }         if(CollectionUtil.isEmpty(getProtocols()) && StringUtils.isNotEmpty(getExport())){             int port = MathUtil.parseInt(export, 0);             if(port > 0){                 export = MotanConstants.PROTOCOL_MOTAN + ":" + export;                 setProtocol(MotanFrameworkUtil.getDefaultProtocolConfig());             }         }         if (StringUtils.isEmpty(getExport()) || CollectionUtil.isEmpty(getProtocols())) {             throw new MotanFrameworkException(String.format("%s ServiceConfig must config right export value!", getInterface().getName()),                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);         }     }      /**      * 检查并配置registry      */     private void checkAndConfigRegistry() {         if (CollectionUtil.isEmpty(getRegistries()) && getBasicServiceConfig() != null                 && !CollectionUtil.isEmpty(getBasicServiceConfig().getRegistries())) {             setRegistries(getBasicServiceConfig().getRegistries());         }         if (CollectionUtil.isEmpty(getRegistries())) {             for (String name : MotanNamespaceHandler.registryDefineNames) {                 RegistryConfig rc = beanFactory.getBean(name, RegistryConfig.class);                 if (rc == null) {                     continue;                 }                 if (MotanNamespaceHandler.registryDefineNames.size() == 1) {                     setRegistry(rc);                 } else if (rc.isDefault() != null && rc.isDefault().booleanValue()) {                     setRegistry(rc);                 }             }         }         if (CollectionUtil.isEmpty(getRegistries())) {             setRegistry(MotanFrameworkUtil.getDefaultRegistryConfig());         }     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> motan-springsupport : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> weibo : Folder]
							[NT -> api : Folder]
								[NT -> motan : Folder]
									[NT -> config : Folder]
										[NT -> springsupport : Folder]
											[NT -> ServiceConfigBean.java.merge : .java.merge-File]
												[T -> ServiceConfigBean.java : .java-Content "/*  *  Copyright 2009-2016 Weibo, Inc.  *  *    Licensed under the Apache License, Version 2.0 (the "License");  *    you may not use this file except in compliance with the License.  *    You may obtain a copy of the License at  *  *        http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing, software  *    distributed under the License is distributed on an "AS IS" BASIS,  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *    See the License for the specific language governing permissions and  *    limitations under the License.  */  package com.weibo.api.motan.config.springsupport;  import java.util.ArrayList; import java.util.Arrays;  import org.apache.commons.lang3.StringUtils; import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean; import org.springframework.beans.factory.ListableBeanFactory; import org.springframework.beans.factory.config.BeanPostProcessor; import org.springframework.context.ApplicationListener; import org.springframework.context.event.ContextRefreshedEvent;  import com.weibo.api.motan.common.MotanConstants; import com.weibo.api.motan.config.BasicServiceInterfaceConfig; import com.weibo.api.motan.config.ProtocolConfig; import com.weibo.api.motan.config.RegistryConfig; import com.weibo.api.motan.config.ServiceConfig; import com.weibo.api.motan.exception.MotanErrorMsgConstant; import com.weibo.api.motan.exception.MotanFrameworkException; import com.weibo.api.motan.util.CollectionUtil; import com.weibo.api.motan.util.MathUtil; import com.weibo.api.motan.util.MotanFrameworkUtil;  public class ServiceConfigBean<T> extends ServiceConfig<T>         implements         BeanPostProcessor,         BeanFactoryAware,         InitializingBean,         DisposableBean,         ApplicationListener<ContextRefreshedEvent> {      private static final long serialVersionUID = -7247592395983804440L;      private transient BeanFactory beanFactory;      @Override     public void destroy() throws Exception {         unexport();     }      @Override     public void afterPropertiesSet() throws Exception {          // 注意:basicConfig需要首先配置，因为其他可能会依赖于basicConfig的配置         checkAndConfigBasicConfig();         checkAndConfigExport();         checkAndConfigRegistry();          // 等spring初始化完毕后，再export服务         // export();     }      @Override     public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;     }      // 为了让serviceBean最早加载     @Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      @Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      @Override     public void onApplicationEvent(ContextRefreshedEvent event) {         if (!getExported().get()) {             export();         }     }      /**      * 检查并配置basicConfig      */     private void checkAndConfigBasicConfig() {         if (getBasicServiceConfig() == null) {             if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 0) {                 if (beanFactory instanceof ListableBeanFactory) {                     ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;                     String[] basicServiceConfigNames = listableBeanFactory.getBeanNamesForType                             (BasicServiceInterfaceConfig                                     .class);                     MotanNamespaceHandler.basicServiceConfigDefineNames.addAll(Arrays.asList(basicServiceConfigNames));                 }             }             for (String name : MotanNamespaceHandler.basicServiceConfigDefineNames) {                 BasicServiceInterfaceConfig biConfig = beanFactory.getBean(name, BasicServiceInterfaceConfig.class);                 if (biConfig == null) {                     continue;                 }                 if (MotanNamespaceHandler.basicServiceConfigDefineNames.size() == 1) {                     setBasicServiceConfig(biConfig);                 } else if (biConfig.isDefault() != null && biConfig.isDefault().booleanValue()) {                     setBasicServiceConfig(biConfig);                 }             }         }     }      /**      * 检查是否已经装配export，如果没有则到basicConfig查找      */     private void checkAndConfigExport() {         if (StringUtils.isBlank(getExport()) && getBasicServiceConfig() != null                 && !StringUtils.isBlank(getBasicServiceConfig().getExport())) {             setExport(getBasicServiceConfig().getExport());             if (getBasicServiceConfig().getProtocols() != null) {                 setProtocols(new ArrayList<ProtocolConfig>(getBasicServiceConfig().getProtocols()));             }         }         if (CollectionUtil.isEmpty(getProtocols()) && StringUtils.isNotEmpty(getExport())) {             int port = MathUtil.parseInt(export, 0);             if (port > 0) {                 export = MotanConstants.PROTOCOL_MOTAN + ":" + export;                 setProtocol(MotanFrameworkUtil.getDefaultProtocolConfig());             }         }         if (StringUtils.isEmpty(getExport()) || CollectionUtil.isEmpty(getProtocols())) {             throw new MotanFrameworkException(String.format("%s ServiceConfig must config right export value!", getInterface().getName()),                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);         }     }      /**      * 检查并配置registry      */     private void checkAndConfigRegistry() {         if (CollectionUtil.isEmpty(getRegistries()) && getBasicServiceConfig() != null                 && !CollectionUtil.isEmpty(getBasicServiceConfig().getRegistries())) {             setRegistries(getBasicServiceConfig().getRegistries());         }         if (CollectionUtil.isEmpty(getRegistries())) {             for (String name : MotanNamespaceHandler.registryDefineNames) {                 RegistryConfig rc = beanFactory.getBean(name, RegistryConfig.class);                 if (rc == null) {                     continue;                 }                 if (MotanNamespaceHandler.registryDefineNames.size() == 1) {                     setRegistry(rc);                 } else if (rc.isDefault() != null && rc.isDefault().booleanValue()) {                     setRegistry(rc);                 }             }         }         if (CollectionUtil.isEmpty(getRegistries())) {             setRegistry(MotanFrameworkUtil.getDefaultRegistryConfig());         }     }  } " compose:StringConcatenation merge: LineBased]
