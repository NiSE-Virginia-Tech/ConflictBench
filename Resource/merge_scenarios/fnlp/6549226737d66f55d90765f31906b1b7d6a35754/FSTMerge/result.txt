Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/fnlp-core/src/main/java/org/fnlp/nlp/corpus/ctbconvert/CTB2CONLL.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/fnlp-core/src/main/java/org/fnlp/nlp/corpus/ctbconvert/CTB2CONLL.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/fnlp-core/src/main/java/org/fnlp/nlp/corpus/ctbconvert/CTB2CONLL.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/fnlp-core/src/main/java/org/fnlp/nlp/corpus/ctbconvert/CTB2CONLL.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/fnlp-core/src/main/java/org/fnlp/nlp/corpus/ctbconvert/CTB2CONLL.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/fnlp-core/src/main/java/org/fnlp/nlp/corpus/ctbconvert/CTB2CONLL.java
[NT -> left : Feature]
	[NT -> fnlp-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> fnlp : Folder]
							[NT -> nlp : Folder]
								[NT -> corpus : Folder]
									[NT -> ctbconvert : Folder]
										[NT -> CTB2CONLL.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.fnlp.nlp.corpus.ctbconvert;" compose:Replacement merge: Default]
												[T -> java.io.BufferedReader{ImportPackage} : ImportDeclaration "import java.io.BufferedReader;" compose:Replacement merge: Default]
												[T -> java.io.BufferedWriter{ImportPackage} : ImportDeclaration "import java.io.BufferedWriter;" compose:Replacement merge: Default]
												[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
												[T -> java.io.FileInputStream{ImportPackage} : ImportDeclaration "import java.io.FileInputStream;" compose:Replacement merge: Default]
												[T -> java.io.FileNotFoundException{ImportPackage} : ImportDeclaration "import java.io.FileNotFoundException;" compose:Replacement merge: Default]
												[T -> java.io.FileOutputStream{ImportPackage} : ImportDeclaration "import java.io.FileOutputStream;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.io.InputStreamReader{ImportPackage} : ImportDeclaration "import java.io.InputStreamReader;" compose:Replacement merge: Default]
												[T -> java.io.OutputStreamWriter{ImportPackage} : ImportDeclaration "import java.io.OutputStreamWriter;" compose:Replacement merge: Default]
												[T -> java.io.Writer{ImportPackage} : ImportDeclaration "import java.io.Writer;" compose:Replacement merge: Default]
												[T -> java.nio.charset.Charset{ImportPackage} : ImportDeclaration "import java.nio.charset.Charset;" compose:Replacement merge: Default]
												[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
												[NT -> CTB2CONLL : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> CTB2CONLL : Id "CTB2CONLL" compose:Replacement merge: Default]
													[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args)   {    try    {     String ls_1;     Process process =null;  //   File handle = new File("../tmp/ctb_v1/data");     File handle = new File("../tmp/ctb_v6/data/bracketed");        BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(       new FileOutputStream("../tmp/malt.train"), "UTF-8"));     for (File sub : Arrays.asList(handle.listFiles())){      String file = sub.getAbsolutePath();     if(!file.endsWith(".fid"))      continue;     clean(file);      process = Runtime.getRuntime().exec("cmd /c java -jar ../tmp/Penn2Malt.jar "+file+" ../tmp/headrules.txt 3 2 chtb");         BufferedReader bufferedReader = new BufferedReader(        new InputStreamReader(process.getInputStream()));      while ( (ls_1=bufferedReader.readLine()) != null)      {       System.out.println(ls_1);      }     bufferedReader = new BufferedReader(       new InputStreamReader(process.getErrorStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }     }       }    catch(IOException e)    {     System.err.println(e);    }   }" compose:Replacement merge: LineBased]
													[T -> clean(String-String) : MethodDecl "private static void clean(String file) throws IOException {      StringBuffer sb = new StringBuffer();   BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName("utf8")));   String str;   while((str = br.readLine())!=null){    if(str.length()!=0&&!str.trim().startsWith("<")){     if(str.equalsIgnoreCase("root"))      continue;     if(str.contains("</HEADER> ")||str.contains("</HEADLINE>"))      continue;     sb.append(str+"\n");     }       }    br.close();   Writer wr = new OutputStreamWriter(new FileOutputStream(new File(file)),Charset.forName("gbk"));//输出目录   wr.write(sb.toString());   wr.close();   }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> fnlp-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> fnlp : Folder]
							[NT -> nlp : Folder]
								[NT -> corpus : Folder]
									[NT -> ctbconvert : Folder]
										[NT -> CTB2CONLL.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.fnlp.nlp.corpus.ctbconvert;" compose:Replacement merge: Default]
												[T -> java.io.BufferedReader{ImportPackage} : ImportDeclaration "import java.io.BufferedReader;" compose:Replacement merge: Default]
												[T -> java.io.BufferedWriter{ImportPackage} : ImportDeclaration "import java.io.BufferedWriter;" compose:Replacement merge: Default]
												[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
												[T -> java.io.FileOutputStream{ImportPackage} : ImportDeclaration "import java.io.FileOutputStream;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.io.InputStreamReader{ImportPackage} : ImportDeclaration "import java.io.InputStreamReader;" compose:Replacement merge: Default]
												[T -> java.io.OutputStreamWriter{ImportPackage} : ImportDeclaration "import java.io.OutputStreamWriter;" compose:Replacement merge: Default]
												[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
												[NT -> CTB2CONLL : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> CTB2CONLL : Id "CTB2CONLL" compose:Replacement merge: Default]
													[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args)   {    try    {     String ls_1;     Process process =null;     File handle = new File("./tmpdata/ctb/data3");     BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(       new FileOutputStream("./tmpdata/malt.train"), "UTF-8"));     for (File sub : Arrays.asList(handle.listFiles())){      String str = sub.getAbsolutePath();      process = Runtime.getRuntime().exec("cmd /c java -jar ./tmpdata/ctb/Penn2Malt.jar "+str+" ./tmpdata/ctb/headrules.txt 3 2 chtb");         BufferedReader bufferedReader = new BufferedReader(       new InputStreamReader(process.getInputStream()));      while ( (ls_1=bufferedReader.readLine()) != null)      {       System.out.println(ls_1);      }     }       }    catch(IOException e)    {     System.err.println(e);    }   }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> fnlp-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> fnlp : Folder]
							[NT -> nlp : Folder]
								[NT -> corpus : Folder]
									[NT -> ctbconvert : Folder]
										[NT -> CTB2CONLL.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package org.fnlp.nlp.corpus.ctbconvert;" compose:Replacement merge: Default]
												[T -> java.io.BufferedReader{ImportPackage} : ImportDeclaration "import java.io.BufferedReader;" compose:Replacement merge: Default]
												[T -> java.io.BufferedWriter{ImportPackage} : ImportDeclaration "import java.io.BufferedWriter;" compose:Replacement merge: Default]
												[T -> java.io.File{ImportPackage} : ImportDeclaration "import java.io.File;" compose:Replacement merge: Default]
												[T -> java.io.FileInputStream{ImportPackage} : ImportDeclaration "import java.io.FileInputStream;" compose:Replacement merge: Default]
												[T -> java.io.FileNotFoundException{ImportPackage} : ImportDeclaration "import java.io.FileNotFoundException;" compose:Replacement merge: Default]
												[T -> java.io.FileOutputStream{ImportPackage} : ImportDeclaration "import java.io.FileOutputStream;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.io.InputStreamReader{ImportPackage} : ImportDeclaration "import java.io.InputStreamReader;" compose:Replacement merge: Default]
												[T -> java.io.OutputStreamWriter{ImportPackage} : ImportDeclaration "import java.io.OutputStreamWriter;" compose:Replacement merge: Default]
												[T -> java.io.Writer{ImportPackage} : ImportDeclaration "import java.io.Writer;" compose:Replacement merge: Default]
												[T -> java.nio.charset.Charset{ImportPackage} : ImportDeclaration "import java.nio.charset.Charset;" compose:Replacement merge: Default]
												[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
												[NT -> CTB2CONLL : ClassDeclaration]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> CTB2CONLL : Id "CTB2CONLL" compose:Replacement merge: Default]
													[T -> main(String[]-String[]) : MethodDecl "public static void main(String[] args)   {    try    {     String ls_1;     Process process =null;  //   File handle = new File("../tmp/ctb_v1/data");     File handle = new File("../tmp/ctb_v6/data/bracketed");        BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(       new FileOutputStream("../tmp/malt.train"), "UTF-8"));     for (File sub : Arrays.asList(handle.listFiles())){      String file = sub.getAbsolutePath();     if(!file.endsWith(".fid"))      continue;     clean(file);      process = Runtime.getRuntime().exec("cmd /c java -jar ../tmp/Penn2Malt.jar "+file+" ../tmp/headrules.txt 3 2 chtb");         BufferedReader bufferedReader = new BufferedReader(        new InputStreamReader(process.getInputStream()));      while ( (ls_1=bufferedReader.readLine()) != null)      {       System.out.println(ls_1);      }     bufferedReader = new BufferedReader(       new InputStreamReader(process.getErrorStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }     }       }    catch(IOException e)    {     System.err.println(e);    }   }" compose:Replacement merge: LineBased]
													[T -> clean(String-String) : MethodDecl "private static void clean(String file) throws IOException {      StringBuffer sb = new StringBuffer();   BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName("utf8")));   String str;   while((str = br.readLine())!=null){    if(str.length()!=0&&!str.trim().startsWith("<")){     if(str.equalsIgnoreCase("root"))      continue;     if(str.contains("</HEADER> ")||str.contains("</HEADLINE>"))      continue;     sb.append(str+"\n");     }       }    br.close();   Writer wr = new OutputStreamWriter(new FileOutputStream(new File(file)),Charset.forName("gbk"));//输出目录   wr.write(sb.toString());   wr.close();   }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> fnlp-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> fnlp : Folder]
							[NT -> nlp : Folder]
								[NT -> corpus : Folder]
									[NT -> ctbconvert : Folder]
										[NT -> CTB2CONLL.java.merge : .java.merge-File]
											[T -> CTB2CONLL.java : .java-Content "/**  *  This file is part of FNLP (formerly FudanNLP).  *    *  FNLP is free software: you can redistribute it and/or modify  *  it under the terms of the GNU Lesser General Public License as published by  *  the Free Software Foundation, either version 3 of the License, or  *  (at your option) any later version.  *    *  FNLP is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU General Public License  *  along with FudanNLP.  If not, see <http://www.gnu.org/licenses/>.  *    *  Copyright 2009-2014 www.fnlp.org. All rights reserved.   */  package org.fnlp.nlp.corpus.ctbconvert;  import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.Writer; import java.nio.charset.Charset; import java.util.Arrays; /**  * 调用Penn2Malt转换  * @author Xipeng  *  */ public class CTB2CONLL {  public static void main(String[] args)  {   try   {    String ls_1;    Process process =null; //   File handle = new File("../tmp/ctb_v1/data");    File handle = new File("../tmp/ctb_v6/data/bracketed");        BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(      new FileOutputStream("../tmp/malt.train"), "UTF-8"));    for (File sub : Arrays.asList(handle.listFiles())){     String file = sub.getAbsolutePath();     if(!file.endsWith(".fid"))      continue;     clean(file);     process = Runtime.getRuntime().exec("cmd /c java -jar ../tmp/Penn2Malt.jar "+file+" ../tmp/headrules.txt 3 2 chtb");        BufferedReader bufferedReader = new BufferedReader(       new InputStreamReader(process.getInputStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }     bufferedReader = new BufferedReader(       new InputStreamReader(process.getErrorStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }    }      }   catch(IOException e)   {    System.err.println(e);   }  }   /**   * 对ctb的格式进行预处理，去掉尖括号注释信息，只保留圆括号里的内容   * @param file 文件名   * @throws IOException   * 下午5:34:24   */  private static void clean(String file) throws IOException {      StringBuffer sb = new StringBuffer();   BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName("utf8")));   String str;   while((str = br.readLine())!=null){    if(str.length()!=0&&!str.trim().startsWith("<")){     if(str.equalsIgnoreCase("root"))      continue;     if(str.contains("</HEADER> ")||str.contains("</HEADLINE>"))      continue;     sb.append(str+"\n");     }       }    br.close();   Writer wr = new OutputStreamWriter(new FileOutputStream(new File(file)),Charset.forName("gbk"));//输出目录   wr.write(sb.toString());   wr.close();   } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> fnlp-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> fnlp : Folder]
							[NT -> nlp : Folder]
								[NT -> corpus : Folder]
									[NT -> ctbconvert : Folder]
										[NT -> CTB2CONLL.java.merge : .java.merge-File]
											[T -> CTB2CONLL.java : .java-Content "/** *  This file is part of FNLP (formerly FudanNLP). *   *  FNLP is free software: you can redistribute it and/or modify *  it under the terms of the GNU Lesser General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. *   *  FNLP is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU Lesser General Public License for more details. *   *  You should have received a copy of the GNU General Public License *  along with FudanNLP.  If not, see <http://www.gnu.org/licenses/>. *   *  Copyright 2009-2014 www.fnlp.org. All rights reserved.  */  package org.fnlp.nlp.corpus.ctbconvert;  import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.Arrays; /**  * 调用Penn2Malt转换  * @author Xipeng  *  */ public class CTB2CONLL {  public static void main(String[] args)  {   try   {    String ls_1;    Process process =null;    File handle = new File("./tmpdata/ctb/data3");    BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(      new FileOutputStream("./tmpdata/malt.train"), "UTF-8"));    for (File sub : Arrays.asList(handle.listFiles())){     String str = sub.getAbsolutePath();     process = Runtime.getRuntime().exec("cmd /c java -jar ./tmpdata/ctb/Penn2Malt.jar "+str+" ./tmpdata/ctb/headrules.txt 3 2 chtb");        BufferedReader bufferedReader = new BufferedReader(      new InputStreamReader(process.getInputStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }    }      }   catch(IOException e)   {    System.err.println(e);   }  } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> fnlp-core : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> fnlp : Folder]
							[NT -> nlp : Folder]
								[NT -> corpus : Folder]
									[NT -> ctbconvert : Folder]
										[NT -> CTB2CONLL.java.merge : .java.merge-File]
											[T -> CTB2CONLL.java : .java-Content "/**  *  This file is part of FNLP (formerly FudanNLP).  *    *  FNLP is free software: you can redistribute it and/or modify  *  it under the terms of the GNU Lesser General Public License as published by  *  the Free Software Foundation, either version 3 of the License, or  *  (at your option) any later version.  *    *  FNLP is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU General Public License  *  along with FudanNLP.  If not, see <http://www.gnu.org/licenses/>.  *    *  Copyright 2009-2014 www.fnlp.org. All rights reserved.   */  package org.fnlp.nlp.corpus.ctbconvert;  import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.Writer; import java.nio.charset.Charset; import java.util.Arrays; /**  * 调用Penn2Malt转换  * @author Xipeng  *  */ public class CTB2CONLL {  public static void main(String[] args)  {   try   {    String ls_1;    Process process =null; //   File handle = new File("../tmp/ctb_v1/data");    File handle = new File("../tmp/ctb_v6/data/bracketed");        BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(      new FileOutputStream("../tmp/malt.train"), "UTF-8"));    for (File sub : Arrays.asList(handle.listFiles())){     String file = sub.getAbsolutePath();     if(!file.endsWith(".fid"))      continue;     clean(file);     process = Runtime.getRuntime().exec("cmd /c java -jar ../tmp/Penn2Malt.jar "+file+" ../tmp/headrules.txt 3 2 chtb");        BufferedReader bufferedReader = new BufferedReader(       new InputStreamReader(process.getInputStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }     bufferedReader = new BufferedReader(       new InputStreamReader(process.getErrorStream()));     while ( (ls_1=bufferedReader.readLine()) != null)     {      System.out.println(ls_1);     }    }      }   catch(IOException e)   {    System.err.println(e);   }  }   /**   * @param str   * 下午5:12:24   * @throws IOException    */  private static void clean(String file) throws IOException {      StringBuffer sb = new StringBuffer();   BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName("utf8")));   String str;   while((str = br.readLine())!=null){    if(str.length()!=0&&!str.trim().startsWith("<")){     if(str.equalsIgnoreCase("root"))      continue;     if(str.contains("</HEADER> ")||str.contains("</HEADLINE>"))      continue;     sb.append(str+"\n");     }       }    br.close();   Writer wr = new OutputStreamWriter(new FileOutputStream(new File(file)),Charset.forName("gbk"));//输出目录   wr.write(sb.toString());   wr.close();   } } " compose:StringConcatenation merge: LineBased]
