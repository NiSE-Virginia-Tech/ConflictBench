Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.settings.xml
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.settings.xml
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/spring-cloud-netflix-zuul/src/test/java/org/springframework/cloud/netflix/zuul/web/ZuulHandlerMappingTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/spring-cloud-netflix-zuul/src/test/java/org/springframework/cloud/netflix/zuul/web/ZuulHandlerMappingTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.settings.xml
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/spring-cloud-netflix-zuul/src/test/java/org/springframework/cloud/netflix/zuul/web/ZuulHandlerMappingTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/spring-cloud-netflix-zuul/src/test/java/org/springframework/cloud/netflix/zuul/web/ZuulHandlerMappingTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/MavenWrapperDownloader.java
[NT -> left : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.2/apache-maven-3.5.2-bin.zip " compose:StringConcatenation merge: Default]
[NT -> base : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.2/apache-maven-3.5.2-bin.zip " compose:StringConcatenation merge: Default]
[NT -> right : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.2/apache-maven-3.5.2-bin.zip " compose:StringConcatenation merge: Default]
[NT -> left : Feature]
	[NT -> .settings.xml : XML-File]
		[NT ->  : settings]
			[NT ->  : servers]
				[NT ->  : server]
					[NT ->  : id]
						[T -> #text : #text "repo.spring.io" compose:Replacement merge: Default]
					[NT ->  : username]
						[T -> #text : #text "${env.CI_DEPLOY_USERNAME}" compose:Replacement merge: Default]
					[NT ->  : password]
						[T -> #text : #text "${env.CI_DEPLOY_PASSWORD}" compose:Replacement merge: Default]
			[NT ->  : profiles]
				[NT ->  : profile]
					[NT ->  : id]
						[T -> #text : #text "spring" compose:Replacement merge: Default]
					[NT ->  : activation]
						[NT ->  : activeByDefault]
							[T -> #text : #text "true" compose:Replacement merge: Default]
					[NT ->  : repositories]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-snapshots" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Snapshots" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-snapshot-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "true" compose:Replacement merge: Default]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-milestones" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Milestones" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-milestone-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-releases" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Releases" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/release" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
					[NT ->  : pluginRepositories]
						[NT ->  : pluginRepository]
							[NT ->  : id]
								[T -> #text : #text "spring-snapshots" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Snapshots" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-snapshot-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "true" compose:Replacement merge: Default]
						[NT ->  : pluginRepository]
							[NT ->  : id]
								[T -> #text : #text "spring-milestones" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Milestones" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-milestone-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
[NT -> base : Feature]
	[NT -> .settings.xml : XML-File]
		[NT ->  : settings]
			[NT ->  : servers]
				[NT ->  : server]
					[NT ->  : id]
						[T -> #text : #text "repo.spring.io" compose:Replacement merge: Default]
					[NT ->  : username]
						[T -> #text : #text "${env.CI_DEPLOY_USERNAME}" compose:Replacement merge: Default]
					[NT ->  : password]
						[T -> #text : #text "${env.CI_DEPLOY_PASSWORD}" compose:Replacement merge: Default]
			[NT ->  : profiles]
				[NT ->  : profile]
					[NT ->  : id]
						[T -> #text : #text "spring" compose:Replacement merge: Default]
					[NT ->  : activation]
						[NT ->  : activeByDefault]
							[T -> #text : #text "true" compose:Replacement merge: Default]
					[NT ->  : repositories]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-snapshots" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Snapshots" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-snapshot-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "true" compose:Replacement merge: Default]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-milestones" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Milestones" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-milestone-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-releases" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Releases" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/release" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
					[NT ->  : pluginRepositories]
						[NT ->  : pluginRepository]
							[NT ->  : id]
								[T -> #text : #text "spring-snapshots" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Snapshots" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-snapshot-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "true" compose:Replacement merge: Default]
						[NT ->  : pluginRepository]
							[NT ->  : id]
								[T -> #text : #text "spring-milestones" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Milestones" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-milestone-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
[NT -> right : Feature]
	[NT -> .settings.xml : XML-File]
		[NT ->  : settings]
			[NT ->  : servers]
				[NT ->  : server]
					[NT ->  : id]
						[T -> #text : #text "repo.spring.io" compose:Replacement merge: Default]
					[NT ->  : username]
						[T -> #text : #text "${env.CI_DEPLOY_USERNAME}" compose:Replacement merge: Default]
					[NT ->  : password]
						[T -> #text : #text "${env.CI_DEPLOY_PASSWORD}" compose:Replacement merge: Default]
			[NT ->  : profiles]
				[NT ->  : profile]
					[NT ->  : id]
						[T -> #text : #text "spring" compose:Replacement merge: Default]
					[NT ->  : activation]
						[NT ->  : activeByDefault]
							[T -> #text : #text "true" compose:Replacement merge: Default]
					[NT ->  : repositories]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-snapshots" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Snapshots" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-snapshot-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "true" compose:Replacement merge: Default]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-milestones" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Milestones" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-milestone-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
						[NT ->  : repository]
							[NT ->  : id]
								[T -> #text : #text "spring-releases" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Releases" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/release" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
					[NT ->  : pluginRepositories]
						[NT ->  : pluginRepository]
							[NT ->  : id]
								[T -> #text : #text "spring-snapshots" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Snapshots" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-snapshot-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "true" compose:Replacement merge: Default]
						[NT ->  : pluginRepository]
							[NT ->  : id]
								[T -> #text : #text "spring-milestones" compose:Replacement merge: Default]
							[NT ->  : name]
								[T -> #text : #text "Spring Milestones" compose:Replacement merge: Default]
							[NT ->  : url]
								[T -> #text : #text "https://repo.spring.io/libs-milestone-local" compose:Replacement merge: Default]
							[NT ->  : snapshots]
								[NT ->  : enabled]
									[T -> #text : #text "false" compose:Replacement merge: Default]
[NT -> left : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java : Java-File]
				[NT -> - : CompilationUnit]
					[T -> java.util.Properties{ImportPackage} : ImportDeclaration "import java.util.Properties;" compose:Replacement merge: Default]
					[NT -> MavenWrapperDownloader : ClassDeclaration]
						[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
						[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
						[T -> MavenWrapperDownloader : Id "MavenWrapperDownloader" compose:Replacement merge: Default]
						[T -> DEFAULT_DOWNLOAD_URL : FieldDecl "private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_PROPERTIES_PATH : FieldDecl "private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_JAR_PATH : FieldDecl "private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";" compose:Replacement merge: SemanticConflict]
						[T -> PROPERTY_NAME_WRAPPER_URL : FieldDecl "private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";" compose:Replacement merge: SemanticConflict]
						[T -> main(String-String) : MethodDecl "public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }" compose:Replacement merge: LineBased]
						[T -> downloadFileFromURL(String-String-File-File) : MethodDecl "private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> spring-cloud-netflix-zuul : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> springframework : Folder]
							[NT -> cloud : Folder]
								[NT -> netflix : Folder]
									[NT -> zuul : Folder]
										[NT -> web : Folder]
											[NT -> ZuulHandlerMappingTests.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package org.springframework.cloud.netflix.zuul.web;" compose:Replacement merge: Default]
													[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
													[T -> java.util.Collections{ImportPackage} : ImportDeclaration "import java.util.Collections;" compose:Replacement merge: Default]
													[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
													[T -> com.netflix.zuul.context.RequestContext{ImportPackage} : ImportDeclaration "import com.netflix.zuul.context.RequestContext;" compose:Replacement merge: Default]
													[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
													[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
													[T -> org.mockito.Mockito{ImportPackage} : ImportDeclaration "import org.mockito.Mockito;" compose:Replacement merge: Default]
													[T -> org.springframework.boot.web.servlet.error.ErrorController{ImportPackage} : ImportDeclaration "import org.springframework.boot.web.servlet.error.ErrorController;" compose:Replacement merge: Default]
													[T -> org.springframework.cloud.netflix.zuul.filters.Route{ImportPackage} : ImportDeclaration "import org.springframework.cloud.netflix.zuul.filters.Route;" compose:Replacement merge: Default]
													[T -> org.springframework.cloud.netflix.zuul.filters.RouteLocator{ImportPackage} : ImportDeclaration "import org.springframework.cloud.netflix.zuul.filters.RouteLocator;" compose:Replacement merge: Default]
													[T -> org.springframework.mock.web.MockHttpServletRequest{ImportPackage} : ImportDeclaration "import org.springframework.mock.web.MockHttpServletRequest;" compose:Replacement merge: Default]
													[T -> org.assertj.core.api.Assertions.assertThat{ImportPackage} : ImportDeclaration "import static org.assertj.core.api.Assertions.assertThat;" compose:Replacement merge: Default]
													[NT -> ZuulHandlerMappingTests : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> ZuulHandlerMappingTests : Id "ZuulHandlerMappingTests" compose:Replacement merge: Default]
														[T -> mapping : FieldDecl "private ZuulHandlerMapping mapping;" compose:Replacement merge: SemanticConflict]
														[T -> locator : FieldDecl "private RouteLocator locator = Mockito.mock(RouteLocator.class);" compose:Replacement merge: SemanticConflict]
														[T -> errors : FieldDecl "private ErrorController errors = Mockito.mock(ErrorController.class);" compose:Replacement merge: SemanticConflict]
														[T -> request : FieldDecl "private MockHttpServletRequest request = new MockHttpServletRequest();" compose:Replacement merge: SemanticConflict]
														[T -> init({FormalParametersInternal}) : MethodDecl "@Before  public void init() {   RequestContext.getCurrentContext().clear();   this.mapping = new ZuulHandlerMapping(this.locator, new ZuulController());   this.mapping.setErrorController(this.errors);   Mockito.when(this.errors.getErrorPath()).thenReturn("/error");  }" compose:Replacement merge: LineBased]
														[T -> mappedPath({FormalParametersInternal}) : MethodDecl "@Test  public void mappedPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("foo", "/foo/**", "foo", "", null, null)));   this.request.setServletPath("/foo/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }" compose:Replacement merge: LineBased]
														[T -> defaultPath({FormalParametersInternal}) : MethodDecl "@Test  public void defaultPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }" compose:Replacement merge: LineBased]
														[T -> errorPath({FormalParametersInternal}) : MethodDecl "@Test  public void errorPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/error");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNull();  }" compose:Replacement merge: LineBased]
														[T -> ignoredPathsShouldNotReturnAHandler({FormalParametersInternal}) : MethodDecl "@Test  public void ignoredPathsShouldNotReturnAHandler() throws Exception {   assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**"),     new Route("p1", "/p1/**", "p1", "", null, null))       .getHandler(requestForAPath("/p1"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/**"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p4/"),     new Route("p1", "/p1/**/p4/", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3/p4"))).isNull();  }" compose:Replacement merge: LineBased]
														[T -> mappingWithIgnoredPathsAndRoutes(List<String>-List<String>-Route-Route) : MethodDecl "private ZuulHandlerMapping mappingWithIgnoredPathsAndRoutes(List<String> ignoredPaths,    Route route) {   RouteLocator routeLocator = Mockito.mock(RouteLocator.class);   Mockito.when(routeLocator.getIgnoredPaths()).thenReturn(ignoredPaths);   Mockito.when(routeLocator.getRoutes())     .thenReturn(Collections.singletonList(route));   ZuulHandlerMapping zuulHandlerMapping = new ZuulHandlerMapping(routeLocator,     new ZuulController());   return zuulHandlerMapping;  }" compose:Replacement merge: LineBased]
														[T -> requestForAPath(String-String) : MethodDecl "private MockHttpServletRequest requestForAPath(String path) {   MockHttpServletRequest request = new MockHttpServletRequest();   request.setServletPath(path);   return request;  }" compose:Replacement merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java : Java-File]
				[NT -> - : CompilationUnit]
					[T -> java.util.Properties{ImportPackage} : ImportDeclaration "import java.util.Properties;" compose:Replacement merge: Default]
					[NT -> MavenWrapperDownloader : ClassDeclaration]
						[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
						[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
						[T -> MavenWrapperDownloader : Id "MavenWrapperDownloader" compose:Replacement merge: Default]
						[T -> DEFAULT_DOWNLOAD_URL : FieldDecl "private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_PROPERTIES_PATH : FieldDecl "private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_JAR_PATH : FieldDecl "private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";" compose:Replacement merge: SemanticConflict]
						[T -> PROPERTY_NAME_WRAPPER_URL : FieldDecl "private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";" compose:Replacement merge: SemanticConflict]
						[T -> main(String-String) : MethodDecl "public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }" compose:Replacement merge: LineBased]
						[T -> downloadFileFromURL(String-String-File-File) : MethodDecl "private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> spring-cloud-netflix-zuul : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> springframework : Folder]
							[NT -> cloud : Folder]
								[NT -> netflix : Folder]
									[NT -> zuul : Folder]
										[NT -> web : Folder]
											[NT -> ZuulHandlerMappingTests.java : Java-File]
												[NT -> - : CompilationUnit]
													[T -> - : PackageDeclaration "package org.springframework.cloud.netflix.zuul.web;" compose:Replacement merge: Default]
													[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
													[T -> java.util.Collections{ImportPackage} : ImportDeclaration "import java.util.Collections;" compose:Replacement merge: Default]
													[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
													[T -> com.netflix.zuul.context.RequestContext{ImportPackage} : ImportDeclaration "import com.netflix.zuul.context.RequestContext;" compose:Replacement merge: Default]
													[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
													[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
													[T -> org.mockito.Mockito{ImportPackage} : ImportDeclaration "import org.mockito.Mockito;" compose:Replacement merge: Default]
													[T -> org.springframework.boot.web.servlet.error.ErrorController{ImportPackage} : ImportDeclaration "import org.springframework.boot.web.servlet.error.ErrorController;" compose:Replacement merge: Default]
													[T -> org.springframework.cloud.netflix.zuul.filters.Route{ImportPackage} : ImportDeclaration "import org.springframework.cloud.netflix.zuul.filters.Route;" compose:Replacement merge: Default]
													[T -> org.springframework.cloud.netflix.zuul.filters.RouteLocator{ImportPackage} : ImportDeclaration "import org.springframework.cloud.netflix.zuul.filters.RouteLocator;" compose:Replacement merge: Default]
													[T -> org.springframework.mock.web.MockHttpServletRequest{ImportPackage} : ImportDeclaration "import org.springframework.mock.web.MockHttpServletRequest;" compose:Replacement merge: Default]
													[T -> org.assertj.core.api.Assertions.assertThat{ImportPackage} : ImportDeclaration "import static org.assertj.core.api.Assertions.assertThat;" compose:Replacement merge: Default]
													[NT -> ZuulHandlerMappingTests : ClassDeclaration]
														[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
														[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
														[T -> ZuulHandlerMappingTests : Id "ZuulHandlerMappingTests" compose:Replacement merge: Default]
														[T -> mapping : FieldDecl "private ZuulHandlerMapping mapping;" compose:Replacement merge: SemanticConflict]
														[T -> locator : FieldDecl "private RouteLocator locator = Mockito.mock(RouteLocator.class);" compose:Replacement merge: SemanticConflict]
														[T -> errors : FieldDecl "private ErrorController errors = Mockito.mock(ErrorController.class);" compose:Replacement merge: SemanticConflict]
														[T -> request : FieldDecl "private MockHttpServletRequest request = new MockHttpServletRequest();" compose:Replacement merge: SemanticConflict]
														[T -> init({FormalParametersInternal}) : MethodDecl "@Before  public void init() {   RequestContext.getCurrentContext().clear();   this.mapping = new ZuulHandlerMapping(this.locator, new ZuulController());   this.mapping.setErrorController(this.errors);   Mockito.when(this.errors.getErrorPath()).thenReturn("/error");  }" compose:Replacement merge: LineBased]
														[T -> mappedPath({FormalParametersInternal}) : MethodDecl "@Test  public void mappedPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("foo", "/foo/**", "foo", "", null, null)));   this.request.setServletPath("/foo/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }" compose:Replacement merge: LineBased]
														[T -> defaultPath({FormalParametersInternal}) : MethodDecl "@Test  public void defaultPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }" compose:Replacement merge: LineBased]
														[T -> errorPath({FormalParametersInternal}) : MethodDecl "@Test  public void errorPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/error");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNull();  }" compose:Replacement merge: LineBased]
														[T -> ignoredPathsShouldNotReturnAHandler({FormalParametersInternal}) : MethodDecl "@Test  public void ignoredPathsShouldNotReturnAHandler() throws Exception {   assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**"),     new Route("p1", "/p1/**", "p1", "", null, null))       .getHandler(requestForAPath("/p1"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/**"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p4/"),     new Route("p1", "/p1/**/p4/", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3/p4"))).isNull();  }" compose:Replacement merge: LineBased]
														[T -> mappingWithIgnoredPathsAndRoutes(List<String>-List<String>-Route-Route) : MethodDecl "private ZuulHandlerMapping mappingWithIgnoredPathsAndRoutes(List<String> ignoredPaths,    Route route) {   RouteLocator routeLocator = Mockito.mock(RouteLocator.class);   Mockito.when(routeLocator.getIgnoredPaths()).thenReturn(ignoredPaths);   Mockito.when(routeLocator.getRoutes())     .thenReturn(Collections.singletonList(route));   ZuulHandlerMapping zuulHandlerMapping = new ZuulHandlerMapping(routeLocator,     new ZuulController());   return zuulHandlerMapping;  }" compose:Replacement merge: LineBased]
														[T -> requestForAPath(String-String) : MethodDecl "private MockHttpServletRequest requestForAPath(String path) {   MockHttpServletRequest request = new MockHttpServletRequest();   request.setServletPath(path);   return request;  }" compose:Replacement merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java : Java-File]
				[NT -> - : CompilationUnit]
					[T -> java.util.Properties{ImportPackage} : ImportDeclaration "import java.util.Properties;" compose:Replacement merge: Default]
					[NT -> MavenWrapperDownloader : ClassDeclaration]
						[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
						[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
						[T -> MavenWrapperDownloader : Id "MavenWrapperDownloader" compose:Replacement merge: Default]
						[T -> DEFAULT_DOWNLOAD_URL : FieldDecl "private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_PROPERTIES_PATH : FieldDecl "private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_JAR_PATH : FieldDecl "private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";" compose:Replacement merge: SemanticConflict]
						[T -> PROPERTY_NAME_WRAPPER_URL : FieldDecl "private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";" compose:Replacement merge: SemanticConflict]
						[T -> main(String-String) : MethodDecl "public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }" compose:Replacement merge: LineBased]
						[T -> downloadFileFromURL(String-String-File-File) : MethodDecl "private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java.merge : .java.merge-File]
				[T -> MavenWrapperDownloader.java : .java-Content "/* Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at    https://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License. */  import java.util.Properties;  public class MavenWrapperDownloader {      /**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */     private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";      /**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */     private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";      /**      * Path where the maven-wrapper.jar will be saved to.      */     private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";      /**      * Name of the property which should be used to override the default download url for the wrapper.      */     private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";      public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }      private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> spring-cloud-netflix-zuul : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> springframework : Folder]
							[NT -> cloud : Folder]
								[NT -> netflix : Folder]
									[NT -> zuul : Folder]
										[NT -> web : Folder]
											[NT -> ZuulHandlerMappingTests.java.merge : .java.merge-File]
												[T -> ZuulHandlerMappingTests.java : .java-Content "/*  * Copyright 2013-2019 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.springframework.cloud.netflix.zuul.web;  import java.util.Arrays; import java.util.Collections; import java.util.List;  import com.netflix.zuul.context.RequestContext; import org.junit.Before; import org.junit.Test; import org.mockito.Mockito;  import org.springframework.boot.web.servlet.error.ErrorController; import org.springframework.cloud.netflix.zuul.filters.Route; import org.springframework.cloud.netflix.zuul.filters.RouteLocator; import org.springframework.mock.web.MockHttpServletRequest;  import static org.assertj.core.api.Assertions.assertThat;  /**  * @author Dave Syer  * @author Biju Kunjummen  */ public class ZuulHandlerMappingTests {   private ZuulHandlerMapping mapping;   private RouteLocator locator = Mockito.mock(RouteLocator.class);   private ErrorController errors = Mockito.mock(ErrorController.class);   private MockHttpServletRequest request = new MockHttpServletRequest();   @Before  public void init() {   RequestContext.getCurrentContext().clear();   this.mapping = new ZuulHandlerMapping(this.locator, new ZuulController());   this.mapping.setErrorController(this.errors);   Mockito.when(this.errors.getErrorPath()).thenReturn("/error");  }   @Test  public void mappedPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("foo", "/foo/**", "foo", "", null, null)));   this.request.setServletPath("/foo/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }   @Test  public void defaultPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }   @Test  public void errorPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/error");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNull();  }   @Test  public void ignoredPathsShouldNotReturnAHandler() throws Exception {   assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**"),     new Route("p1", "/p1/**", "p1", "", null, null))       .getHandler(requestForAPath("/p1"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/**"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p4/"),     new Route("p1", "/p1/**/p4/", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3/p4"))).isNull();  }   private ZuulHandlerMapping mappingWithIgnoredPathsAndRoutes(List<String> ignoredPaths,    Route route) {   RouteLocator routeLocator = Mockito.mock(RouteLocator.class);   Mockito.when(routeLocator.getIgnoredPaths()).thenReturn(ignoredPaths);   Mockito.when(routeLocator.getRoutes())     .thenReturn(Collections.singletonList(route));   ZuulHandlerMapping zuulHandlerMapping = new ZuulHandlerMapping(routeLocator,     new ZuulController());   return zuulHandlerMapping;  }   private MockHttpServletRequest requestForAPath(String path) {   MockHttpServletRequest request = new MockHttpServletRequest();   request.setServletPath(path);   return request;  }  } " compose:StringConcatenation merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java.merge : .java.merge-File]
				[T -> MavenWrapperDownloader.java : .java-Content "/* Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at    https://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License. */  import java.util.Properties;  public class MavenWrapperDownloader {      /**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */     private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";      /**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */     private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";      /**      * Path where the maven-wrapper.jar will be saved to.      */     private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";      /**      * Name of the property which should be used to override the default download url for the wrapper.      */     private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";      public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }      private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> spring-cloud-netflix-zuul : Folder]
		[NT -> src : Folder]
			[NT -> test : Folder]
				[NT -> java : Folder]
					[NT -> org : Folder]
						[NT -> springframework : Folder]
							[NT -> cloud : Folder]
								[NT -> netflix : Folder]
									[NT -> zuul : Folder]
										[NT -> web : Folder]
											[NT -> ZuulHandlerMappingTests.java.merge : .java.merge-File]
												[T -> ZuulHandlerMappingTests.java : .java-Content "/*  * Copyright 2013-2020 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.springframework.cloud.netflix.zuul.web;  import java.util.Arrays; import java.util.Collections; import java.util.List;  import com.netflix.zuul.context.RequestContext; import org.junit.Before; import org.junit.Test; import org.mockito.Mockito;  import org.springframework.boot.web.servlet.error.ErrorController; import org.springframework.cloud.netflix.zuul.filters.Route; import org.springframework.cloud.netflix.zuul.filters.RouteLocator; import org.springframework.mock.web.MockHttpServletRequest;  import static org.assertj.core.api.Assertions.assertThat;  /**  * @author Dave Syer  * @author Biju Kunjummen  */ public class ZuulHandlerMappingTests {   private ZuulHandlerMapping mapping;   private RouteLocator locator = Mockito.mock(RouteLocator.class);   private ErrorController errors = Mockito.mock(ErrorController.class);   private MockHttpServletRequest request = new MockHttpServletRequest();   @Before  public void init() {   RequestContext.getCurrentContext().clear();   this.mapping = new ZuulHandlerMapping(this.locator, new ZuulController());   this.mapping.setErrorController(this.errors);   Mockito.when(this.errors.getErrorPath()).thenReturn("/error");  }   @Test  public void mappedPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("foo", "/foo/**", "foo", "", null, null)));   this.request.setServletPath("/foo/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }   @Test  public void defaultPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNotNull();  }   @Test  public void errorPath() throws Exception {   Mockito.when(this.locator.getRoutes()).thenReturn(Collections     .singletonList(new Route("default", "/**", "foo", "", null, null)));   this.request.setServletPath("/error");   this.mapping.setDirty(true);   assertThat(this.mapping.getHandler(this.request)).isNull();  }   @Test  public void ignoredPathsShouldNotReturnAHandler() throws Exception {   assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**"),     new Route("p1", "/p1/**", "p1", "", null, null))       .getHandler(requestForAPath("/p1"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p3/**"),     new Route("p1", "/p1/**/p3", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3"))).isNull();    assertThat(mappingWithIgnoredPathsAndRoutes(Arrays.asList("/p1/**/p4/"),     new Route("p1", "/p1/**/p4/", "p1", "", null, null))       .getHandler(requestForAPath("/p1/p2/p3/p4"))).isNull();  }   private ZuulHandlerMapping mappingWithIgnoredPathsAndRoutes(List<String> ignoredPaths,    Route route) {   RouteLocator routeLocator = Mockito.mock(RouteLocator.class);   Mockito.when(routeLocator.getIgnoredPaths()).thenReturn(ignoredPaths);   Mockito.when(routeLocator.getRoutes())     .thenReturn(Collections.singletonList(route));   ZuulHandlerMapping zuulHandlerMapping = new ZuulHandlerMapping(routeLocator,     new ZuulController());   return zuulHandlerMapping;  }   private MockHttpServletRequest requestForAPath(String path) {   MockHttpServletRequest request = new MockHttpServletRequest();   request.setServletPath(path);   return request;  }  } " compose:StringConcatenation merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java.merge : .java.merge-File]
				[T -> MavenWrapperDownloader.java : .java-Content "/* Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at    https://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License. */  import java.util.Properties;  public class MavenWrapperDownloader {      /**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */     private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";      /**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */     private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";      /**      * Path where the maven-wrapper.jar will be saved to.      */     private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";      /**      * Name of the property which should be used to override the default download url for the wrapper.      */     private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";      public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }      private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }  } " compose:StringConcatenation merge: LineBased]
