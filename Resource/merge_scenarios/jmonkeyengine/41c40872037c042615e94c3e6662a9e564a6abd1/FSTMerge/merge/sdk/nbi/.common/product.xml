<?xml version="1.0" encoding="UTF-8" standalone="no"?><project basedir="." default="usage" name="product"><property name="common.dir" value="${basedir}"/><property file="${common.dir}/common.properties"/><property file="${common.dir}/common.properties"/><import file="common.xml" optional="false"/><target depends=".init" name="-init"><taskdef classname="org.netbeans.installer.infra.build.ant.SizeOf" classpath="${custom.tasks.cls}" name="sizeof"/><taskdef classname="org.netbeans.installer.infra.build.ant.Md5" classpath="${custom.tasks.cls}" name="md5"/><taskdef classname="org.netbeans.installer.infra.build.ant.Sum" classpath="${custom.tasks.cls}" name="sum"/><taskdef classname="org.netbeans.installer.infra.build.ant.Package" classpath="${custom.tasks.cls}" name="package"/><taskdef classname="org.netbeans.installer.infra.build.ant.LoadLocales" classpath="${custom.tasks.cls}" name="load-locales"/><taskdef classname="org.netbeans.installer.infra.build.ant.ProductDescriptor" classpath="${custom.tasks.cls}" name="product-descriptor"/><taskdef classname="org.netbeans.installer.infra.build.ant.Absolutize" classpath="${custom.tasks.cls}" name="absolutize"/><taskdef classname="org.netbeans.installer.infra.build.ant.UriToPath" classpath="${custom.tasks.cls}" name="uri-to-path"/><taskdef classname="org.netbeans.installer.infra.build.ant.NativeUnzip" classpath="${custom.tasks.cls}" name="n-unzip"/><taskdef classname="org.netbeans.installer.infra.build.ant.NativeUntar" classpath="${custom.tasks.cls}" name="n-untar"/><if property="release.to.server" value="true"><taskdef classname="org.netbeans.installer.infra.build.ant.ReleasePackage" classpath="${custom.tasks.cls}" name="release-package-server"/></if><if property="release.to.server" value="true"><taskdef classname="org.netbeans.installer.infra.build.ant.registries.AddPackage" classpath="${custom.tasks.cls}" name="release-package-filesystem"/><taskdef classname="org.netbeans.installer.infra.build.ant.ReleasePackage" classpath="${custom.tasks.cls}" name="release-package-server"/></if><condition property="do.build.engine"><equals arg1="${build.engine}" arg2="true"/></condition><absolutize property="engine.work.dir"/><absolutize property="engine.work.dir"/><absolutize property="engine.work.dir"/><property name="nb.custom.parameter" value="-Djavac.classpath=${engine.dist.file}"/></target><target depends="-clean-engine,.clean" name="-clean"><delete file="${dist.dir}/${product.dist.file.name}"/></target><target depends="init" if="do.build.engine" name="-clean-engine"><exec dir="${engine.dir}" executable="${ant.executable}" failonerror="false"><env key="JAVA_HOME" value="${java.home}"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/></exec></target><target depends="-build-engine,.build" name="-build"><set property="product.disk.space" value="${product.disk.space.modificator}"/><set property="product.disk.space" value="${product.disk.space.modificator}"/><set property="product.disk.space" value="${product.disk.space.modificator}"/><mkdir dir="${packaged.data.dir}"/><mkdir dir="${packaged.data.dir}"/><mkdir dir="${packaged.data.dir}"/><mkdir dir="${packaged.data.dir}"/><if property="build.nbproject" value="true"><set property="i" value="1"/><set property="i" value="1"/><copy file="${nbproject.dist.dir}/${nbproject.dist.file.name}" tofile="${current.file}"/><if property="jarsigner.enabled" value="true"><signjar alias="${jarsigner.alias}" jar="${current.file}" keystore="${jarsigner.keystore}" maxmemory="${jarsigner.xmx}" storepass="${jarsigner.storepass}"/></if><sizeof file="${current.file}" property="product.logic.${i}.size"/><md5 file="${current.file}" property="product.logic.${i}.md5"/><set property="i" value="1"/><property name="start.index" value="2"/></if><property name="start.index" value="1"/><for-each from="${start.index}" property="i" to="${product.logic.length}"><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/><condition else="false" property="product.logic.${i}.is.local" value="true"><isset property="product.logic.${i}.path"/></condition><if property="product.logic.${i}.is.local" value="false"><set property="current.uri" source="product.logic.${i}.uri"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><if property="product.logic.${i}.is.local" value="false"><set property="current.uri" source="product.logic.${i}.uri"/><copy file="${current.path}" preservelastmodified="true" tofile="${current.file}"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><if property="product.logic.${i}.is.local" value="false"><signjar alias="${jarsigner.alias}" jar="${current.file}" keystore="${jarsigner.keystore}" maxmemory="${jarsigner.xmx}" storepass="${jarsigner.storepass}"/><set property="current.uri" source="product.logic.${i}.uri"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><sizeof file="${current.file}" property="product.logic.${i}.size"/><md5 file="${current.file}" property="product.logic.${i}.md5"/><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/></for-each><set property="product.disk.space" value="${product.disk.space.modificator}"/><for-each from="${start.index}" property="i" to="${product.logic.length}"><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/><condition else="false" property="product.logic.${i}.is.local" value="true"><isset property="product.logic.${i}.path"/></condition><if property="product.logic.${i}.is.local" value="false"><set property="current.uri" source="product.logic.${i}.uri" value="${product.data.${i}.tar}"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><if property="product.logic.${i}.is.local" value="false"><set property="current.uri" source="product.logic.${i}.uri" value="false"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/><condition else="false" property="product.logic.${i}.is.local" value="true"><or><equals arg1="${package.data}" arg2="true"/><and><equals arg1="${package.data}" arg2="default"/><not><and><available file="${current.packaged.data.file}"/><available file="${current.packaged.data.properties.file}"/></and></not></and></or><isset property="product.logic.${i}.path"/></condition><condition else="false" property="product.logic.${i}.is.local" value="true"><or><equals arg1="${package.data}" arg2="false"/><and><equals arg1="${package.data}" arg2="default"/><available file="${current.packaged.data.file}"/><available file="${current.packaged.data.properties.file}"/></and></or><isset property="product.logic.${i}.path"/></condition><if property="product.logic.${i}.is.local" value="false"><condition else="false" property="product.data.${i}.is.local" value="true"><isset property="product.data.${i}.path"/></condition><if property="product.data.${i}.is.local" value="false"><set property="current.uri" source="product.data.${i}.uri"/><uri-to-path property="current.downloaded.path" uri="${current.uri}"/><set property="current.download" value="${downloads.cache.dir}/${current.downloaded.path}"/><dirname file="${current.download}" property="current.download.${i}.dir"/><set property="current.download.dir" source="current.download.${i}.dir"/><mkdir dir="${current.download.dir}"/><get dest="${current.download}" src="${current.uri}" usetimestamp="true"/></if><if property="product.data.${i}.is.local" value="true"><set property="current.download" source="product.data.${i}.path"/></if><mkdir dir="${current.temp.dir}"/><if property="current.zip" value="true"><n-unzip dest="${current.temp.dir}" src="${current.download}"/></if><if property="current.tar" value="true"><n-untar dest="${current.temp.dir}" src="${current.download}"/></if><condition property="do.copy.data.${i}" value="true"><and><not><equals arg1="${current.zip}" arg2="true"/></not><not><equals arg1="${current.tar}" arg2="true"/></not></and></condition><if property="do.copy.data.${i}" value="true"><copy file="${current.download}" todir="${current.temp.dir}"/></if><antcall target="-pre-package"><param name="i" value="${i}"/><param name="data.directory" value="${current.temp.dir}"/></antcall><sizeof file="${current.temp.dir}" property="current.disk.space"/><sum arg1="${product.disk.space}" arg2="${current.disk.space}" property="product.disk.space"/><package directory="${current.temp.dir}" file="${current.file}"/><if property="release.packaged.data" value="true"><mkdir dir="${packaged.data.dir}"/><copy file="${current.file}" tofile="${current.packaged.data.file}"/><echo file="${current.packaged.data.properties.file}" message="product.data.${i}.size=${current.disk.space}"/></if><delete dir="${current.temp.dir}"/><set property="current.uri" source="product.logic.${i}.uri"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><if property="product.logic.${i}.is.local" value="false"><copy file="${current.packaged.data.file}" tofile="${current.file}"/><property file="${current.packaged.data.properties.file}"/><set property="current.uri" source="product.logic.${i}.uri"/><sum arg1="${product.disk.space}" arg2="${current.disk.space}" property="product.disk.space"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><if property="product.logic.${i}.is.local" value="false"><signjar alias="${jarsigner.alias}" jar="${current.file}" keystore="${jarsigner.keystore}" maxmemory="${jarsigner.xmx}" storepass="${jarsigner.storepass}"/><set property="current.uri" source="product.logic.${i}.uri"/><get dest="${current.file}" src="${current.uri}" usetimestamp="true"/></if><sizeof file="${current.file}" property="product.logic.${i}.size"/><md5 file="${current.file}" property="product.logic.${i}.md5"/><set property="current.file" value="${product.logic.dir}/${product.logic.file.name}"/></for-each><set property="product.disk.space" value="${product.disk.space.modificator}"/><copy file="${product.icon}" tofile="${product.icon.file}"/><sizeof file="${product.icon.file}" property="product.icon.size"/><md5 file="${product.icon.file}" property="product.icon.md5"/><set property="product.disk.space" value="${product.disk.space.modificator}"/><load-locales basename="${product.bundle}" list="product.locales.list"/><product-descriptor file="${package.dir}/${package.descriptor.path}"/><set property="product.disk.space" value="${product.disk.space.modificator}"/><jar basedir="${package.dir}" compress="true" destfile="${product.dist.file}"><manifest><attribute name="Product-Descriptor" value="${package.descriptor.path}"/></manifest></jar><if property="build.nbproject" value="true"><signjar alias="${jarsigner.alias}" jar="${product.dist.file}" keystore="${jarsigner.keystore}" maxmemory="${jarsigner.xmx}" storepass="${jarsigner.storepass}"/><set property="i" value="1"/><set property="i" value="1"/><copy file="${nbproject.dist.dir}/${nbproject.dist.file.name}" tofile="${current.file}"/><if property="jarsigner.enabled" value="true"><signjar alias="${jarsigner.alias}" jar="${current.file}" keystore="${jarsigner.keystore}" maxmemory="${jarsigner.xmx}" storepass="${jarsigner.storepass}"/></if><sizeof file="${current.file}" property="product.logic.${i}.size"/><md5 file="${current.file}" property="product.logic.${i}.md5"/><set property="i" value="1"/><property name="start.index" value="2"/></if></target><target depends="init" if="do.build.engine" name="-build-engine"><exec dir="${engine.dir}" executable="${ant.executable}" failifexecutionfails="true" failonerror="true"><arg value="checkout,build"/><arg value="checkout,build"/><arg value="checkout,build"/><arg value="checkout,build"/><arg value="checkout,build"/><arg value="checkout,build"/><arg value="checkout,build"/><arg value="checkout,build"/></exec></target><target name="-pre-package"/><target name="-release"><if property="release.to.server" value="true"><echo message="Release URL is ${release.url}"/><echo message="Release URL is ${release.url}"/><release-package-server archive="${product.dist.file}" platforms="${product.platforms}" registry="${release.registry}" uid="${release.parent.uid}" url="${release.url}" version="${release.parent.version}"/></if><if property="release.to.server" value="true"><echo message="Release URL is ${release.url}"/><echo message="Release URL is ${release.url}"/><release-package-filesystem archive="${product.dist.file}" platforms="${product.platforms}" root="${release.registry.dir}" uid="${release.parent.uid}" version="${release.parent.version}"/><release-package-server archive="${product.dist.file}" platforms="${product.platforms}" registry="${release.registry}" uid="${release.parent.uid}" url="${release.url}" version="${release.parent.version}"/></if></target><target name="usage"><echo>
            This is the base build script for nbi product package and is not 
            intended to be called directly. In order to create a derivative 
            implementation script, see 
            ${basedir}/.templates/product-template.xml
        </echo></target></project>