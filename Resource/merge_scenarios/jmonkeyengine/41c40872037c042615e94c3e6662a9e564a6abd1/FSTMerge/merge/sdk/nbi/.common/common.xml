<?xml version="1.0" encoding="UTF-8" standalone="no"?><project basedir="." default="usage" name="common"><target depends="clean" name="clean-all"/><target depends="clean-all,checkout,build" name="build-all"/><target depends="build-all,release" name="release-all"/><target depends="-pre-init,-init,-post-init" name="init"/><target depends=".build-custom-tasks" name=".init" unless="skip.initialization"><taskdef classname="org.netbeans.installer.infra.build.ant.ForEach" classpath="${custom.tasks.cls}" name="for-each"/><taskdef classname="org.netbeans.installer.infra.build.ant.SetProperty" classpath="${custom.tasks.cls}" name="set"/><taskdef classname="org.netbeans.installer.infra.build.ant.If" classpath="${custom.tasks.cls}" name="if"/><condition property="do.checkout"><and><equals arg1="${checkout.sources}" arg2="true"/></and></condition><condition property="do.checkout"><not><equals arg1="${checkout.sources}" arg2="true"/></not><and><equals arg1="${checkout.sources}" arg2="true"/></and></condition><condition property="do.checkout"><equals arg1="${build.native}" arg2="true"/><and><equals arg1="${checkout.sources}" arg2="true"/></and></condition><condition property="do.checkout"><equals arg1="${build.nbproject}" arg2="true"/><and><equals arg1="${checkout.sources}" arg2="true"/></and></condition><condition property="do.checkout" value="${ant.home}/bin/ant.bat"><os family="windows"/><and><equals arg1="${checkout.sources}" arg2="true"/></and></condition><condition property="do.checkout" value="${ant.home}/bin/ant"><not><os family="windows"/></not><and><equals arg1="${checkout.sources}" arg2="true"/></and></condition><mkdir dir="${work.dir}"/><mkdir dir="${work.dir}"/><property name="skip.initialization" value="true"/></target><target name=".build-custom-tasks" unless="dont.build.custom.tasks"><delete dir="${custom.tasks.cls}"/><mkdir dir="${custom.tasks.cls}"/><javac debug="true" destdir="${custom.tasks.cls}" srcdir="${custom.tasks.src}"/><property name="dont.build.custom.tasks" value="true"/></target><target name="-pre-init"/><target depends=".init" name="-init"/><target name="-post-init"/><target depends="init,-pre-clean,-clean,-post-clean" name="clean"/><target name=".clean"><for-each list="${native.platforms}" property="platform"><antcall target=".clean-native"/></for-each><antcall target=".clean-nbproject"/><delete dir="${work.dir}" includeemptydirs="true"/></target><target if="do.build.native" name=".clean-native"><antcall target=".clean-jni"/></target><target if="do.build.native" name=".clean-jni"><set property="current.scp.local.dir" source="scp.local.dir"/><set property="current.scp.local.dir" source="scp.local.dir"/><delete dir="${scp.local.dir}/${current.native.dist.file}"/></target><target if="do.build.nbproject" name=".clean-nbproject"><condition property="nbproject.exists" value="true"><available file="${cvs.dir}/${nbproject.path}"/></condition><if property="nbproject.exists" value="true"><condition else="${nb.platform.home.macos}" property="nb.jdk.home" value="${nb.platform.home}"><not><equals arg1="Apple Inc." arg2="${java.vendor}"/></not></condition><exec dir="${cvs.dir}/${nbproject.path}" executable="${ant.executable}" failifexecutionfails="false" failonerror="false"><env key="JAVA_HOME" value="${java.home}"/><arg value="${nb.target.clean}"/><arg value="${nb.target.clean}"/><arg value="${nb.target.clean}"/><arg value="${nb.target.clean}"/><arg value="${nb.target.clean}"/><arg value="${nb.target.clean}"/><arg value="${nb.target.clean}"/></exec></if></target><target name="-pre-clean"/><target depends=".clean" name="-clean"/><target name="-post-clean"/><target depends="init,-pre-checkout,-checkout,-post-checkout" name="checkout"/><target depends=".checkout-repository,.pre-checkout-copy,.checkout-copy,.post-checkout-copy" name=".checkout"><copy failonerror="false" todir="${cvs.dir}"><fileset dir="${translatedfiles.dir}"/></copy><for-each from="1" property="i" to="${sources.params.length}"><set property="current.token" source="sources.params.${i}.token"/><set property="current.token" source="sources.params.${i}.token"/><replace dir="${cvs.dir}" token="${current.token}" value="${current.value}"/></for-each></target><target if="do.checkout" name=".checkout-repository"><cvs command="checkout" cvsroot="${cvs.root}" date="${cvs.timestamp}" dest="${work.dir}" failonerror="true" package="${cvs.module}/${cvs.path}" tag="${cvs.branch}"/><cvs command="checkout" cvsroot="${cvs.root}" date="${cvs.timestamp}" dest="${work.dir}" failonerror="true" package="${cvs.module}/${cvs.path}" tag="${cvs.branch}"/></target><target if="do.checkout.copy" name=".checkout-copy"><mkdir dir="${work.dir}/${cvs.module}/${cvs.path}"/><copy todir="${work.dir}/${cvs.module}/${cvs.path}" verbose="true"><fileset dir="${sources.dir}/${cvs.module}/${cvs.path}"><include name="**/*.*"/><exclude name="**/nbproject/private/*.*"/><exclude name="build/**/*.*"/><exclude name="dist/**/*.*"/><exclude name="**/CVS"/><exclude name="**/.cvsignore"/></fileset></copy><copy failonerror="false" todir="${work.dir}/${cvs.module}/${cvs.path}" verbose="true"><fileset dir="${sources.dir}/${cvs.module}/${cvs.path}"><include name="**/*.*"/><exclude name="**/nbproject/private/*.*"/><exclude name="build/**/*.*"/><exclude name="dist/**/*.*"/><exclude name="**/CVS"/><exclude name="**/.cvsignore"/></fileset></copy></target><target name=".pre-checkout-copy"/><target name=".post-checkout-copy"/><target name="-pre-checkout"/><target depends=".checkout" name="-checkout"/><target name="-post-checkout"/><target depends="init,-pre-build,-build,-post-build" name="build"/><target name=".build"><for-each list="${native.platforms}" property="platform"><antcall target=".build-native"/></for-each><antcall target=".build-nbproject"/></target><target if="do.build.native" name=".build-native"><antcall target=".build-jni"/></target><target if="do.build.native" name=".build-jni"><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><set property="remote.host" source="remote.host.${platform}"/><exec executable="${ssh.executable}" failonerror="true"><arg line="${current.ssh.arguments}"/><arg line="${current.ssh.arguments}" value="${current.ssh.command.build}"/></exec><mkdir dir="${current.scp.local.dir}"/><exec executable="${ssh.executable}" failonerror="true"><arg line="${current.ssh.arguments}"/><arg line="${current.ssh.arguments}" value="${current.scp.remote.dir}/${current.native.dist.file}"/><arg line="${current.ssh.arguments}" value="${current.scp.local.dir}/${current.native.dist.file}"/></exec><exec executable="${ssh.executable}" failonerror="true"><arg line="${current.ssh.arguments}"/><arg line="${current.ssh.arguments}" value="${current.ssh.command.clean}"/></exec></target><target if="do.build.nbproject" name=".build-nbproject"><condition else="${nb.platform.home.macos}" property="nb.jdk.home" value="${nb.platform.home}"><not><equals arg1="Apple Inc." arg2="${java.vendor}"/></not></condition><exec dir="${cvs.dir}/${nbproject.path}" errorproperty="error.property" executable="${ant.executable}" failifexecutionfails="true" failonerror="true"><env key="JAVA_HOME" value="${java.home}"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/><arg value="clean"/></exec><mkdir dir="${nbproject.dist.dir}"/><jar destfile="${nbproject.dist.dir}/${nbproject.dist.file.name}" manifest="${cvs.dir}/${nbproject.path}/${nbproject.manifest}"><fileset dir="${cvs.dir}/${nbproject.path}/build/classes"><include name="**/*.*"/></fileset></jar></target><target name="-pre-build"/><target depends=".build" name="-build"/><target name="-post-build"/><target depends="init,-pre-release,-release,-post-release" name="release"/><target name="-pre-release"/><target name="-release"/><target name="-post-release"/><target name="usage"><echo>
            This build script is a targets library and must not be used 
            directly.
        </echo></target></project>