Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/test/java/org/apache/ibatis/jdbc/SQLTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/test/java/org/apache/ibatis/jdbc/SQLTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/org/apache/ibatis/jdbc/SQLTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/org/apache/ibatis/jdbc/SQLTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/org/apache/ibatis/jdbc/SQLTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/org/apache/ibatis/jdbc/SQLTest.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/maven-wrapper.properties
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/MavenWrapperDownloader.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/.mvn/wrapper/MavenWrapperDownloader.java
[NT -> left : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.3/apache-maven-3.5.3-bin.zip wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar " compose:StringConcatenation merge: Default]
[NT -> base : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.3/apache-maven-3.5.3-bin.zip wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar " compose:StringConcatenation merge: Default]
[NT -> right : Feature]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> maven-wrapper.properties : .properties-File]
				[T -> maven-wrapper.properties : .properties-Content "distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.1/apache-maven-3.6.1-bin.zip wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar " compose:StringConcatenation merge: Default]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> apache : Folder]
						[NT -> ibatis : Folder]
							[NT -> jdbc : Folder]
								[NT -> SQLTest.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package org.apache.ibatis.jdbc;" compose:Replacement merge: Default]
										[T -> org.assertj.core.api.AssertionsForClassTypes{ImportPackage} : ImportDeclaration "import org.assertj.core.api.AssertionsForClassTypes;" compose:Replacement merge: Default]
										[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
										[T -> org.assertj.core.api.Assertions.assertThat{ImportPackage} : ImportDeclaration "import static org.assertj.core.api.Assertions.assertThat;" compose:Replacement merge: Default]
										[T -> org.junit.Assert.assertEquals{ImportPackage} : ImportDeclaration "import static org.junit.Assert.assertEquals;" compose:Replacement merge: Default]
										[NT -> SQLTest : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> SQLTest : Id "SQLTest" compose:Replacement merge: Default]
											[T -> shouldDemonstrateProvidedStringBuilder({FormalParametersInternal}) : MethodDecl "@Test   public void shouldDemonstrateProvidedStringBuilder() {     //You can pass in your own StringBuilder     final StringBuilder sb = new StringBuilder();     //From the tutorial     final String sql = example1().usingAppender(sb).toString();      assertEquals("SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +         "FROM PERSON P, ACCOUNT A\n" +         "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +         "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +         "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +         "OR (P.LAST_NAME like ?)\n" +         "GROUP BY P.ID\n" +         "HAVING (P.LAST_NAME like ?) \n" +         "OR (P.FIRST_NAME like ?)\n" +         "ORDER BY P.ID, P.FULL_NAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldDemonstrateMixedStyle({FormalParametersInternal}) : MethodDecl "@Test   public void shouldDemonstrateMixedStyle() {     //Mixed     final String sql = new SQL() {{       SELECT("id, name");       FROM("PERSON A");       WHERE("name like ?").WHERE("id = ?");     }}.toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldDemonstrateFluentStyle({FormalParametersInternal}) : MethodDecl "@Test   public void shouldDemonstrateFluentStyle() {     //Fluent Style     final String sql = new SQL()         .SELECT("id, name").FROM("PERSON A")         .WHERE("name like ?")         .WHERE("id = ?").toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatement({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2("a", "b", "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingFirstParam({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, "b", "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingAllParams({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, null));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedComplexSelectStatement({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedComplexSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +             "FROM PERSON P, ACCOUNT A\n" +             "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +             "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +             "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +             "OR (P.LAST_NAME like ?)\n" +             "GROUP BY P.ID\n" +             "HAVING (P.LAST_NAME like ?) \n" +             "OR (P.FIRST_NAME like ?)\n" +             "ORDER BY P.ID, P.FULL_NAME";     assertEquals(expected, example1().toString());   }" compose:Replacement merge: LineBased]
											[T -> example1({FormalParametersInternal}) : MethodDecl "private static SQL example1() {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");       SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");       FROM("PERSON P");       FROM("ACCOUNT A");       INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");       INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");       WHERE("P.ID = A.ID");       WHERE("P.FIRST_NAME like ?");       OR();       WHERE("P.LAST_NAME like ?");       GROUP_BY("P.ID");       HAVING("P.LAST_NAME like ?");       OR();       HAVING("P.FIRST_NAME like ?");       ORDER_BY("P.ID");       ORDER_BY("P.FULL_NAME");     }};   }" compose:Replacement merge: LineBased]
											[T -> example2(String-String-String-String-String-String) : MethodDecl "private static String example2(final String id, final String firstName, final String lastName) {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");       FROM("PERSON P");       if (id != null) {         WHERE("P.ID like #id#");       }       if (firstName != null) {         WHERE("P.FIRST_NAME like #firstName#");       }       if (lastName != null) {         WHERE("P.LAST_NAME like #lastName#");       }       ORDER_BY("P.LAST_NAME");     }}.toString();   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSelect({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnSelect() {     final String sql = new SQL() {{       SELECT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT P.ID, P.USERNAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSelectDistinct({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnSelectDistinct() {     final String sql = new SQL() {{       SELECT_DISTINCT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT DISTINCT P.ID, P.USERNAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnFrom({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnFrom() {     final String sql = new SQL() {{       SELECT().FROM("TABLE_A a", "TABLE_B b");     }}.toString();      assertEquals("FROM TABLE_A a, TABLE_B b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnJoin() {     final String sql = new SQL() {{       SELECT().JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("JOIN TABLE_A b ON b.id = a.id\n" +         "JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnInnerJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnInnerJoin() {     final String sql = new SQL() {{       SELECT().INNER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("INNER JOIN TABLE_A b ON b.id = a.id\n" +         "INNER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnOuterJoin() {     final String sql = new SQL() {{       SELECT().OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnLeftOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnLeftOuterJoin() {     final String sql = new SQL() {{       SELECT().LEFT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("LEFT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "LEFT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnRightOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnRightOuterJoin() {     final String sql = new SQL() {{       SELECT().RIGHT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "RIGHT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnWhere({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnWhere() {     final String sql = new SQL() {{       SELECT().WHERE("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("WHERE (a = #{a} AND b = #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnGroupBy({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnGroupBy() {     final String sql = new SQL() {{       SELECT().GROUP_BY("a", "b");     }}.toString();      assertEquals("GROUP BY a, b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnHaving({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnHaving() {     final String sql = new SQL() {{       SELECT().HAVING("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("HAVING (a = #{a} AND b = #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnOrderBy({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnOrderBy() {     final String sql = new SQL() {{       SELECT().ORDER_BY("a", "b");     }}.toString();      assertEquals("ORDER BY a, b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSet({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnSet() {     final String sql = new SQL() {{       UPDATE("TABLE_A").SET("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("UPDATE TABLE_A\n" +         "SET a = #{a}, b = #{b}", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnIntoColumnsAndValues({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnIntoColumnsAndValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}", "#{b}");     }}.toString();      System.out.println(sql);      assertEquals("INSERT INTO TABLE_A\n (a, b)\nVALUES (#{a}, #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> fixFor903UpdateJoins({FormalParametersInternal}) : MethodDecl "@Test   public void fixFor903UpdateJoins() {     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");     assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");   }" compose:Replacement merge: LineBased]
											[T -> supportBatchInsert({FormalParametersInternal}) : MethodDecl "@Test   public void supportBatchInsert(){      final SQL sql =  new SQL(){{       INSERT_INTO("table1 a");       INTO_COLUMNS("col1,col2");       INTO_VALUES("val1","val2");       ADD_ROW();       INTO_VALUES("val1","val2");     }};     assertThat(sql.toString()).isEqualToIgnoringWhitespace("INSERT INTO table1 a (col1,col2) VALUES (val1,val2), (val1,val2)");   }" compose:Replacement merge: LineBased]
											[T -> singleInsert({FormalParametersInternal}) : MethodDecl "@Test   public void singleInsert() {     final SQL sql = new SQL() {{       INSERT_INTO("table1 a");       INTO_COLUMNS("col1,col2");       INTO_VALUES("val1", "val2");     }};     assertThat(sql.toString()).isEqualToIgnoringWhitespace("INSERT INTO table1 a (col1,col2) VALUES (val1,val2)");   }" compose:Replacement merge: LineBased]
											[T -> singleInsertWithMultipleInsertValues({FormalParametersInternal}) : MethodDecl "@Test   public void singleInsertWithMultipleInsertValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}").INTO_VALUES("#{b}");     }}.toString();     System.out.println(sql);     assertThat(sql).isEqualToIgnoringWhitespace("INSERT INTO TABLE_A (a, b) VALUES (#{a}, #{b})");   }" compose:Replacement merge: LineBased]
											[T -> batchInsertWithMultipleInsertValues({FormalParametersInternal}) : MethodDecl "@Test   public void batchInsertWithMultipleInsertValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A");       INTO_COLUMNS("a", "b");       INTO_VALUES("#{a1}");       INTO_VALUES("#{b1}");       ADD_ROW();       INTO_VALUES("#{a2}");       INTO_VALUES("#{b2}");     }}.toString();     System.out.println(sql);     assertThat(sql).isEqualToIgnoringWhitespace("INSERT INTO TABLE_A (a, b) VALUES (#{a1}, #{b1}), (#{a2}, #{b2})");   }" compose:Replacement merge: LineBased]
											[T -> testValues({FormalParametersInternal}) : MethodDecl "@Test   public void testValues() {     final SQL sql = new SQL() {{       INSERT_INTO("PERSON");       VALUES("ID, FIRST_NAME", "#{id}, #{firstName}");       VALUES("LAST_NAME", "#{lastName}");     }};     AssertionsForClassTypes.assertThat(sql.toString()).isEqualToIgnoringWhitespace("INSERT INTO PERSON (ID, FIRST_NAME, LAST_NAME) VALUES (#{id}, #{firstName}, #{lastName})");   }" compose:Replacement merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java : Java-File]
				[NT -> - : CompilationUnit]
					[T -> java.net.* : ImportDeclaration "import java.net.*;" compose:Replacement merge: Default]
					[T -> java.io.* : ImportDeclaration "import java.io.*;" compose:Replacement merge: Default]
					[T -> java.nio.channels.* : ImportDeclaration "import java.nio.channels.*;" compose:Replacement merge: Default]
					[T -> java.util.Properties{ImportPackage} : ImportDeclaration "import java.util.Properties;" compose:Replacement merge: Default]
					[NT -> MavenWrapperDownloader : ClassDeclaration]
						[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
						[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
						[T -> MavenWrapperDownloader : Id "MavenWrapperDownloader" compose:Replacement merge: Default]
						[T -> DEFAULT_DOWNLOAD_URL : FieldDecl "private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_PROPERTIES_PATH : FieldDecl "private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_JAR_PATH : FieldDecl "private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";" compose:Replacement merge: SemanticConflict]
						[T -> PROPERTY_NAME_WRAPPER_URL : FieldDecl "private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";" compose:Replacement merge: SemanticConflict]
						[T -> main(String-String) : MethodDecl "public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }" compose:Replacement merge: LineBased]
						[T -> downloadFileFromURL(String-String-File-File) : MethodDecl "private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> apache : Folder]
						[NT -> ibatis : Folder]
							[NT -> jdbc : Folder]
								[NT -> SQLTest.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package org.apache.ibatis.jdbc;" compose:Replacement merge: Default]
										[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
										[T -> org.assertj.core.api.Assertions.assertThat{ImportPackage} : ImportDeclaration "import static org.assertj.core.api.Assertions.assertThat;" compose:Replacement merge: Default]
										[T -> org.junit.Assert.assertEquals{ImportPackage} : ImportDeclaration "import static org.junit.Assert.assertEquals;" compose:Replacement merge: Default]
										[NT -> SQLTest : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> SQLTest : Id "SQLTest" compose:Replacement merge: Default]
											[T -> shouldDemonstrateProvidedStringBuilder({FormalParametersInternal}) : MethodDecl "@Test   public void shouldDemonstrateProvidedStringBuilder() {     //You can pass in your own StringBuilder     final StringBuilder sb = new StringBuilder();     //From the tutorial     final String sql = example1().usingAppender(sb).toString();      assertEquals("SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +         "FROM PERSON P, ACCOUNT A\n" +         "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +         "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +         "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +         "OR (P.LAST_NAME like ?)\n" +         "GROUP BY P.ID\n" +         "HAVING (P.LAST_NAME like ?) \n" +         "OR (P.FIRST_NAME like ?)\n" +         "ORDER BY P.ID, P.FULL_NAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldDemonstrateMixedStyle({FormalParametersInternal}) : MethodDecl "@Test   public void shouldDemonstrateMixedStyle() {     //Mixed     final String sql = new SQL() {{       SELECT("id, name");       FROM("PERSON A");       WHERE("name like ?").WHERE("id = ?");     }}.toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldDemonstrateFluentStyle({FormalParametersInternal}) : MethodDecl "@Test   public void shouldDemonstrateFluentStyle() {     //Fluent Style     final String sql = new SQL()         .SELECT("id, name").FROM("PERSON A")         .WHERE("name like ?")         .WHERE("id = ?").toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatement({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2("a", "b", "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingFirstParam({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, "b", "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingAllParams({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, null));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedComplexSelectStatement({FormalParametersInternal}) : MethodDecl "@Test   public void shouldProduceExpectedComplexSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +             "FROM PERSON P, ACCOUNT A\n" +             "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +             "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +             "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +             "OR (P.LAST_NAME like ?)\n" +             "GROUP BY P.ID\n" +             "HAVING (P.LAST_NAME like ?) \n" +             "OR (P.FIRST_NAME like ?)\n" +             "ORDER BY P.ID, P.FULL_NAME";     assertEquals(expected, example1().toString());   }" compose:Replacement merge: LineBased]
											[T -> example1({FormalParametersInternal}) : MethodDecl "private static SQL example1() {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");       SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");       FROM("PERSON P");       FROM("ACCOUNT A");       INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");       INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");       WHERE("P.ID = A.ID");       WHERE("P.FIRST_NAME like ?");       OR();       WHERE("P.LAST_NAME like ?");       GROUP_BY("P.ID");       HAVING("P.LAST_NAME like ?");       OR();       HAVING("P.FIRST_NAME like ?");       ORDER_BY("P.ID");       ORDER_BY("P.FULL_NAME");     }};   }" compose:Replacement merge: LineBased]
											[T -> example2(String-String-String-String-String-String) : MethodDecl "private static String example2(final String id, final String firstName, final String lastName) {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");       FROM("PERSON P");       if (id != null) {         WHERE("P.ID like #id#");       }       if (firstName != null) {         WHERE("P.FIRST_NAME like #firstName#");       }       if (lastName != null) {         WHERE("P.LAST_NAME like #lastName#");       }       ORDER_BY("P.LAST_NAME");     }}.toString();   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSelect({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnSelect() {     final String sql = new SQL() {{       SELECT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT P.ID, P.USERNAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSelectDistinct({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnSelectDistinct() {     final String sql = new SQL() {{       SELECT_DISTINCT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT DISTINCT P.ID, P.USERNAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnFrom({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnFrom() {     final String sql = new SQL() {{       SELECT().FROM("TABLE_A a", "TABLE_B b");     }}.toString();      assertEquals("FROM TABLE_A a, TABLE_B b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnJoin() {     final String sql = new SQL() {{       SELECT().JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("JOIN TABLE_A b ON b.id = a.id\n" +         "JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnInnerJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnInnerJoin() {     final String sql = new SQL() {{       SELECT().INNER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("INNER JOIN TABLE_A b ON b.id = a.id\n" +         "INNER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnOuterJoin() {     final String sql = new SQL() {{       SELECT().OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnLeftOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnLeftOuterJoin() {     final String sql = new SQL() {{       SELECT().LEFT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("LEFT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "LEFT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnRightOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnRightOuterJoin() {     final String sql = new SQL() {{       SELECT().RIGHT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "RIGHT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnWhere({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnWhere() {     final String sql = new SQL() {{       SELECT().WHERE("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("WHERE (a = #{a} AND b = #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnGroupBy({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnGroupBy() {     final String sql = new SQL() {{       SELECT().GROUP_BY("a", "b");     }}.toString();      assertEquals("GROUP BY a, b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnHaving({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnHaving() {     final String sql = new SQL() {{       SELECT().HAVING("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("HAVING (a = #{a} AND b = #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnOrderBy({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnOrderBy() {     final String sql = new SQL() {{       SELECT().ORDER_BY("a", "b");     }}.toString();      assertEquals("ORDER BY a, b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSet({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnSet() {     final String sql = new SQL() {{       UPDATE("TABLE_A").SET("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("UPDATE TABLE_A\n" +         "SET a = #{a}, b = #{b}", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnIntoColumnsAndValues({FormalParametersInternal}) : MethodDecl "@Test   public void variableLengthArgumentOnIntoColumnsAndValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}", "#{b}");     }}.toString();      System.out.println(sql);      assertEquals("INSERT INTO TABLE_A\n (a, b)\nVALUES (#{a}, #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> fixFor903UpdateJoins({FormalParametersInternal}) : MethodDecl "@Test   public void fixFor903UpdateJoins() {     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");     assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");   }" compose:Replacement merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java : Java-File]
				[NT -> - : CompilationUnit]
					[T -> java.net.* : ImportDeclaration "import java.net.*;" compose:Replacement merge: Default]
					[T -> java.io.* : ImportDeclaration "import java.io.*;" compose:Replacement merge: Default]
					[T -> java.nio.channels.* : ImportDeclaration "import java.nio.channels.*;" compose:Replacement merge: Default]
					[T -> java.util.Properties{ImportPackage} : ImportDeclaration "import java.util.Properties;" compose:Replacement merge: Default]
					[NT -> MavenWrapperDownloader : ClassDeclaration]
						[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
						[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
						[T -> MavenWrapperDownloader : Id "MavenWrapperDownloader" compose:Replacement merge: Default]
						[T -> DEFAULT_DOWNLOAD_URL : FieldDecl "private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_PROPERTIES_PATH : FieldDecl "private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_JAR_PATH : FieldDecl "private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";" compose:Replacement merge: SemanticConflict]
						[T -> PROPERTY_NAME_WRAPPER_URL : FieldDecl "private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";" compose:Replacement merge: SemanticConflict]
						[T -> main(String-String) : MethodDecl "public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }" compose:Replacement merge: LineBased]
						[T -> downloadFileFromURL(String-String-File-File) : MethodDecl "private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> apache : Folder]
						[NT -> ibatis : Folder]
							[NT -> jdbc : Folder]
								[NT -> SQLTest.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package org.apache.ibatis.jdbc;" compose:Replacement merge: Default]
										[T -> org.junit.jupiter.api.Test{ImportPackage} : ImportDeclaration "import org.junit.jupiter.api.Test;" compose:Replacement merge: Default]
										[T -> org.assertj.core.api.Assertions.assertThat{ImportPackage} : ImportDeclaration "import static org.assertj.core.api.Assertions.assertThat;" compose:Replacement merge: Default]
										[T -> org.junit.jupiter.api.Assertions.assertEquals{ImportPackage} : ImportDeclaration "import static org.junit.jupiter.api.Assertions.assertEquals;" compose:Replacement merge: Default]
										[NT -> SQLTest : ClassDeclaration]
											[T -> - : Modifiers "" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> SQLTest : Id "SQLTest" compose:Replacement merge: Default]
											[T -> shouldDemonstrateProvidedStringBuilder({FormalParametersInternal}) : MethodDecl "@Test   void shouldDemonstrateProvidedStringBuilder() {     //You can pass in your own StringBuilder     final StringBuilder sb = new StringBuilder();     //From the tutorial     final String sql = example1().usingAppender(sb).toString();      assertEquals("SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +         "FROM PERSON P, ACCOUNT A\n" +         "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +         "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +         "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +         "OR (P.LAST_NAME like ?)\n" +         "GROUP BY P.ID\n" +         "HAVING (P.LAST_NAME like ?) \n" +         "OR (P.FIRST_NAME like ?)\n" +         "ORDER BY P.ID, P.FULL_NAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldDemonstrateMixedStyle({FormalParametersInternal}) : MethodDecl "@Test   void shouldDemonstrateMixedStyle() {     //Mixed     final String sql = new SQL() {{       SELECT("id, name");       FROM("PERSON A");       WHERE("name like ?").WHERE("id = ?");     }}.toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldDemonstrateFluentStyle({FormalParametersInternal}) : MethodDecl "@Test   void shouldDemonstrateFluentStyle() {     //Fluent Style     final String sql = new SQL()         .SELECT("id, name").FROM("PERSON A")         .WHERE("name like ?")         .WHERE("id = ?").toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatement({FormalParametersInternal}) : MethodDecl "@Test   void shouldProduceExpectedSimpleSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2("a", "b", "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingFirstParam({FormalParametersInternal}) : MethodDecl "@Test   void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, "b", "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams({FormalParametersInternal}) : MethodDecl "@Test   void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, "c"));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedSimpleSelectStatementMissingAllParams({FormalParametersInternal}) : MethodDecl "@Test   void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, null));   }" compose:Replacement merge: LineBased]
											[T -> shouldProduceExpectedComplexSelectStatement({FormalParametersInternal}) : MethodDecl "@Test   void shouldProduceExpectedComplexSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +             "FROM PERSON P, ACCOUNT A\n" +             "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +             "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +             "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +             "OR (P.LAST_NAME like ?)\n" +             "GROUP BY P.ID\n" +             "HAVING (P.LAST_NAME like ?) \n" +             "OR (P.FIRST_NAME like ?)\n" +             "ORDER BY P.ID, P.FULL_NAME";     assertEquals(expected, example1().toString());   }" compose:Replacement merge: LineBased]
											[T -> example1({FormalParametersInternal}) : MethodDecl "private static SQL example1() {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");       SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");       FROM("PERSON P");       FROM("ACCOUNT A");       INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");       INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");       WHERE("P.ID = A.ID");       WHERE("P.FIRST_NAME like ?");       OR();       WHERE("P.LAST_NAME like ?");       GROUP_BY("P.ID");       HAVING("P.LAST_NAME like ?");       OR();       HAVING("P.FIRST_NAME like ?");       ORDER_BY("P.ID");       ORDER_BY("P.FULL_NAME");     }};   }" compose:Replacement merge: LineBased]
											[T -> example2(String-String-String-String-String-String) : MethodDecl "private static String example2(final String id, final String firstName, final String lastName) {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");       FROM("PERSON P");       if (id != null) {         WHERE("P.ID like #id#");       }       if (firstName != null) {         WHERE("P.FIRST_NAME like #firstName#");       }       if (lastName != null) {         WHERE("P.LAST_NAME like #lastName#");       }       ORDER_BY("P.LAST_NAME");     }}.toString();   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSelect({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnSelect() {     final String sql = new SQL() {{       SELECT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT P.ID, P.USERNAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSelectDistinct({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnSelectDistinct() {     final String sql = new SQL() {{       SELECT_DISTINCT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT DISTINCT P.ID, P.USERNAME", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnFrom({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnFrom() {     final String sql = new SQL() {{       SELECT().FROM("TABLE_A a", "TABLE_B b");     }}.toString();      assertEquals("FROM TABLE_A a, TABLE_B b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnJoin({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnJoin() {     final String sql = new SQL() {{       SELECT().JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("JOIN TABLE_A b ON b.id = a.id\n" +         "JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnInnerJoin({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnInnerJoin() {     final String sql = new SQL() {{       SELECT().INNER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("INNER JOIN TABLE_A b ON b.id = a.id\n" +         "INNER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnOuterJoin() {     final String sql = new SQL() {{       SELECT().OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnLeftOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnLeftOuterJoin() {     final String sql = new SQL() {{       SELECT().LEFT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("LEFT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "LEFT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnRightOuterJoin({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnRightOuterJoin() {     final String sql = new SQL() {{       SELECT().RIGHT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "RIGHT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnWhere({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnWhere() {     final String sql = new SQL() {{       SELECT().WHERE("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("WHERE (a = #{a} AND b = #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnGroupBy({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnGroupBy() {     final String sql = new SQL() {{       SELECT().GROUP_BY("a", "b");     }}.toString();      assertEquals("GROUP BY a, b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnHaving({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnHaving() {     final String sql = new SQL() {{       SELECT().HAVING("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("HAVING (a = #{a} AND b = #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnOrderBy({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnOrderBy() {     final String sql = new SQL() {{       SELECT().ORDER_BY("a", "b");     }}.toString();      assertEquals("ORDER BY a, b", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnSet({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnSet() {     final String sql = new SQL() {{       UPDATE("TABLE_A").SET("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("UPDATE TABLE_A\n" +         "SET a = #{a}, b = #{b}", sql);   }" compose:Replacement merge: LineBased]
											[T -> variableLengthArgumentOnIntoColumnsAndValues({FormalParametersInternal}) : MethodDecl "@Test   void variableLengthArgumentOnIntoColumnsAndValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}", "#{b}");     }}.toString();      assertEquals("INSERT INTO TABLE_A\n (a, b)\nVALUES (#{a}, #{b})", sql);   }" compose:Replacement merge: LineBased]
											[T -> fixFor903UpdateJoins({FormalParametersInternal}) : MethodDecl "@Test   void fixFor903UpdateJoins() {     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");     assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");   }" compose:Replacement merge: LineBased]
											[T -> selectUsingLimitVariableName({FormalParametersInternal}) : MethodDecl "@Test   void selectUsingLimitVariableName() {     final String sql = new SQL() {{       SELECT("*").FROM("test").ORDER_BY("id").LIMIT("#{limit}");     }}.toString();      assertEquals("SELECT *\nFROM test\nORDER BY id LIMIT #{limit}", sql);   }" compose:Replacement merge: LineBased]
											[T -> selectUsingOffsetVariableName({FormalParametersInternal}) : MethodDecl "@Test   void selectUsingOffsetVariableName() {     final String sql = new SQL() {{       SELECT("*").FROM("test").ORDER_BY("id").OFFSET("#{offset}");     }}.toString();      assertEquals("SELECT *\nFROM test\nORDER BY id OFFSET #{offset}", sql);   }" compose:Replacement merge: LineBased]
											[T -> selectUsingLimitAndOffset({FormalParametersInternal}) : MethodDecl "@Test   void selectUsingLimitAndOffset() {     final String sql = new SQL() {{       SELECT("*").FROM("test").ORDER_BY("id").LIMIT(20).OFFSET(100);     }}.toString();      assertEquals("SELECT *\nFROM test\nORDER BY id LIMIT 20 OFFSET 100", sql);   }" compose:Replacement merge: LineBased]
											[T -> updateUsingLimit({FormalParametersInternal}) : MethodDecl "@Test   void updateUsingLimit() {     final String sql = new SQL() {{       UPDATE("test").SET("status = #{updStatus}").WHERE("status = #{status}").LIMIT(20);     }}.toString();      assertEquals("UPDATE test\nSET status = #{updStatus}\nWHERE (status = #{status}) LIMIT 20", sql);   }" compose:Replacement merge: LineBased]
											[T -> deleteUsingLimit({FormalParametersInternal}) : MethodDecl "@Test   void deleteUsingLimit() {     final String sql = new SQL() {{       DELETE_FROM("test").WHERE("status = #{status}").LIMIT(20);     }}.toString();      assertEquals("DELETE FROM test\nWHERE (status = #{status}) LIMIT 20", sql);   }" compose:Replacement merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java : Java-File]
				[NT -> - : CompilationUnit]
					[T -> java.net.* : ImportDeclaration "import java.net.*;" compose:Replacement merge: Default]
					[T -> java.io.* : ImportDeclaration "import java.io.*;" compose:Replacement merge: Default]
					[T -> java.nio.channels.* : ImportDeclaration "import java.nio.channels.*;" compose:Replacement merge: Default]
					[T -> java.util.Properties{ImportPackage} : ImportDeclaration "import java.util.Properties;" compose:Replacement merge: Default]
					[NT -> MavenWrapperDownloader : ClassDeclaration]
						[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
						[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
						[T -> MavenWrapperDownloader : Id "MavenWrapperDownloader" compose:Replacement merge: Default]
						[T -> WRAPPER_VERSION : FieldDecl "private static final String WRAPPER_VERSION = "0.5.5";" compose:Replacement merge: SemanticConflict]
						[T -> DEFAULT_DOWNLOAD_URL : FieldDecl "private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"         + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_PROPERTIES_PATH : FieldDecl "private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";" compose:Replacement merge: SemanticConflict]
						[T -> MAVEN_WRAPPER_JAR_PATH : FieldDecl "private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";" compose:Replacement merge: SemanticConflict]
						[T -> PROPERTY_NAME_WRAPPER_URL : FieldDecl "private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";" compose:Replacement merge: SemanticConflict]
						[T -> main(String-String) : MethodDecl "public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }" compose:Replacement merge: LineBased]
						[T -> downloadFileFromURL(String-String-File-File) : MethodDecl "private static void downloadFileFromURL(String urlString, File destination) throws Exception {         if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {             String username = System.getenv("MVNW_USERNAME");             char[] password = System.getenv("MVNW_PASSWORD").toCharArray();             Authenticator.setDefault(new Authenticator() {                 @Override                 protected PasswordAuthentication getPasswordAuthentication() {                     return new PasswordAuthentication(username, password);                 }             });         }         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> apache : Folder]
						[NT -> ibatis : Folder]
							[NT -> jdbc : Folder]
								[NT -> SQLTest.java.merge : .java.merge-File]
									[T -> SQLTest.java : .java-Content "/**  *    Copyright 2009-2019 the original author or authors.  *  *    Licensed under the Apache License, Version 2.0 (the "License");  *    you may not use this file except in compliance with the License.  *    You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing, software  *    distributed under the License is distributed on an "AS IS" BASIS,  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *    See the License for the specific language governing permissions and  *    limitations under the License.  */ package org.apache.ibatis.jdbc;  import org.assertj.core.api.AssertionsForClassTypes; import org.junit.Test;  import static org.assertj.core.api.Assertions.assertThat; import static org.junit.Assert.assertEquals;  public class SQLTest {    @Test   public void shouldDemonstrateProvidedStringBuilder() {     //You can pass in your own StringBuilder     final StringBuilder sb = new StringBuilder();     //From the tutorial     final String sql = example1().usingAppender(sb).toString();      assertEquals("SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +         "FROM PERSON P, ACCOUNT A\n" +         "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +         "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +         "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +         "OR (P.LAST_NAME like ?)\n" +         "GROUP BY P.ID\n" +         "HAVING (P.LAST_NAME like ?) \n" +         "OR (P.FIRST_NAME like ?)\n" +         "ORDER BY P.ID, P.FULL_NAME", sql);   }    @Test   public void shouldDemonstrateMixedStyle() {     //Mixed     final String sql = new SQL() {{       SELECT("id, name");       FROM("PERSON A");       WHERE("name like ?").WHERE("id = ?");     }}.toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }    @Test   public void shouldDemonstrateFluentStyle() {     //Fluent Style     final String sql = new SQL()         .SELECT("id, name").FROM("PERSON A")         .WHERE("name like ?")         .WHERE("id = ?").toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }    @Test   public void shouldProduceExpectedSimpleSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2("a", "b", "c"));   }    @Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, "b", "c"));   }    @Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, "c"));   }    @Test   public void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, null));   }    @Test   public void shouldProduceExpectedComplexSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +             "FROM PERSON P, ACCOUNT A\n" +             "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +             "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +             "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +             "OR (P.LAST_NAME like ?)\n" +             "GROUP BY P.ID\n" +             "HAVING (P.LAST_NAME like ?) \n" +             "OR (P.FIRST_NAME like ?)\n" +             "ORDER BY P.ID, P.FULL_NAME";     assertEquals(expected, example1().toString());   }    private static SQL example1() {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");       SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");       FROM("PERSON P");       FROM("ACCOUNT A");       INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");       INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");       WHERE("P.ID = A.ID");       WHERE("P.FIRST_NAME like ?");       OR();       WHERE("P.LAST_NAME like ?");       GROUP_BY("P.ID");       HAVING("P.LAST_NAME like ?");       OR();       HAVING("P.FIRST_NAME like ?");       ORDER_BY("P.ID");       ORDER_BY("P.FULL_NAME");     }};   }    private static String example2(final String id, final String firstName, final String lastName) {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");       FROM("PERSON P");       if (id != null) {         WHERE("P.ID like #id#");       }       if (firstName != null) {         WHERE("P.FIRST_NAME like #firstName#");       }       if (lastName != null) {         WHERE("P.LAST_NAME like #lastName#");       }       ORDER_BY("P.LAST_NAME");     }}.toString();   }     @Test   public void variableLengthArgumentOnSelect() {     final String sql = new SQL() {{       SELECT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT P.ID, P.USERNAME", sql);   }    @Test   public void variableLengthArgumentOnSelectDistinct() {     final String sql = new SQL() {{       SELECT_DISTINCT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT DISTINCT P.ID, P.USERNAME", sql);   }    @Test   public void variableLengthArgumentOnFrom() {     final String sql = new SQL() {{       SELECT().FROM("TABLE_A a", "TABLE_B b");     }}.toString();      assertEquals("FROM TABLE_A a, TABLE_B b", sql);   }    @Test   public void variableLengthArgumentOnJoin() {     final String sql = new SQL() {{       SELECT().JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("JOIN TABLE_A b ON b.id = a.id\n" +         "JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnInnerJoin() {     final String sql = new SQL() {{       SELECT().INNER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("INNER JOIN TABLE_A b ON b.id = a.id\n" +         "INNER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnOuterJoin() {     final String sql = new SQL() {{       SELECT().OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnLeftOuterJoin() {     final String sql = new SQL() {{       SELECT().LEFT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("LEFT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "LEFT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnRightOuterJoin() {     final String sql = new SQL() {{       SELECT().RIGHT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "RIGHT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnWhere() {     final String sql = new SQL() {{       SELECT().WHERE("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("WHERE (a = #{a} AND b = #{b})", sql);   }    @Test   public void variableLengthArgumentOnGroupBy() {     final String sql = new SQL() {{       SELECT().GROUP_BY("a", "b");     }}.toString();      assertEquals("GROUP BY a, b", sql);   }    @Test   public void variableLengthArgumentOnHaving() {     final String sql = new SQL() {{       SELECT().HAVING("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("HAVING (a = #{a} AND b = #{b})", sql);   }    @Test   public void variableLengthArgumentOnOrderBy() {     final String sql = new SQL() {{       SELECT().ORDER_BY("a", "b");     }}.toString();      assertEquals("ORDER BY a, b", sql);   }    @Test   public void variableLengthArgumentOnSet() {     final String sql = new SQL() {{       UPDATE("TABLE_A").SET("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("UPDATE TABLE_A\n" +         "SET a = #{a}, b = #{b}", sql);   }    @Test   public void variableLengthArgumentOnIntoColumnsAndValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}", "#{b}");     }}.toString();      System.out.println(sql);      assertEquals("INSERT INTO TABLE_A\n (a, b)\nVALUES (#{a}, #{b})", sql);   }    @Test   public void fixFor903UpdateJoins() {     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");     assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");   }    @Test   public void supportBatchInsert(){      final SQL sql =  new SQL(){{       INSERT_INTO("table1 a");       INTO_COLUMNS("col1,col2");       INTO_VALUES("val1","val2");       ADD_ROW();       INTO_VALUES("val1","val2");     }};     assertThat(sql.toString()).isEqualToIgnoringWhitespace("INSERT INTO table1 a (col1,col2) VALUES (val1,val2), (val1,val2)");   }    @Test   public void singleInsert() {     final SQL sql = new SQL() {{       INSERT_INTO("table1 a");       INTO_COLUMNS("col1,col2");       INTO_VALUES("val1", "val2");     }};     assertThat(sql.toString()).isEqualToIgnoringWhitespace("INSERT INTO table1 a (col1,col2) VALUES (val1,val2)");   }    @Test   public void singleInsertWithMultipleInsertValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}").INTO_VALUES("#{b}");     }}.toString();     System.out.println(sql);     assertThat(sql).isEqualToIgnoringWhitespace("INSERT INTO TABLE_A (a, b) VALUES (#{a}, #{b})");   }    @Test   public void batchInsertWithMultipleInsertValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A");       INTO_COLUMNS("a", "b");       INTO_VALUES("#{a1}");       INTO_VALUES("#{b1}");       ADD_ROW();       INTO_VALUES("#{a2}");       INTO_VALUES("#{b2}");     }}.toString();     System.out.println(sql);     assertThat(sql).isEqualToIgnoringWhitespace("INSERT INTO TABLE_A (a, b) VALUES (#{a1}, #{b1}), (#{a2}, #{b2})");   }     @Test   public void testValues() {     final SQL sql = new SQL() {{       INSERT_INTO("PERSON");       VALUES("ID, FIRST_NAME", "#{id}, #{firstName}");       VALUES("LAST_NAME", "#{lastName}");     }};     AssertionsForClassTypes.assertThat(sql.toString()).isEqualToIgnoringWhitespace("INSERT INTO PERSON (ID, FIRST_NAME, LAST_NAME) VALUES (#{id}, #{firstName}, #{lastName})");   } } " compose:StringConcatenation merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java.merge : .java.merge-File]
				[T -> MavenWrapperDownloader.java : .java-Content "/* Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License. */  import java.net.*; import java.io.*; import java.nio.channels.*; import java.util.Properties;  public class MavenWrapperDownloader {      /**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */     private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";      /**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */     private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";      /**      * Path where the maven-wrapper.jar will be saved to.      */     private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";      /**      * Name of the property which should be used to override the default download url for the wrapper.      */     private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";      public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }      private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> apache : Folder]
						[NT -> ibatis : Folder]
							[NT -> jdbc : Folder]
								[NT -> SQLTest.java.merge : .java.merge-File]
									[T -> SQLTest.java : .java-Content "/**  *    Copyright 2009-2017 the original author or authors.  *  *    Licensed under the Apache License, Version 2.0 (the "License");  *    you may not use this file except in compliance with the License.  *    You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing, software  *    distributed under the License is distributed on an "AS IS" BASIS,  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *    See the License for the specific language governing permissions and  *    limitations under the License.  */ package org.apache.ibatis.jdbc;  import org.junit.Test;  import static org.assertj.core.api.Assertions.assertThat; import static org.junit.Assert.assertEquals;  public class SQLTest {    @Test   public void shouldDemonstrateProvidedStringBuilder() {     //You can pass in your own StringBuilder     final StringBuilder sb = new StringBuilder();     //From the tutorial     final String sql = example1().usingAppender(sb).toString();      assertEquals("SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +         "FROM PERSON P, ACCOUNT A\n" +         "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +         "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +         "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +         "OR (P.LAST_NAME like ?)\n" +         "GROUP BY P.ID\n" +         "HAVING (P.LAST_NAME like ?) \n" +         "OR (P.FIRST_NAME like ?)\n" +         "ORDER BY P.ID, P.FULL_NAME", sql);   }    @Test   public void shouldDemonstrateMixedStyle() {     //Mixed     final String sql = new SQL() {{       SELECT("id, name");       FROM("PERSON A");       WHERE("name like ?").WHERE("id = ?");     }}.toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }    @Test   public void shouldDemonstrateFluentStyle() {     //Fluent Style     final String sql = new SQL()         .SELECT("id, name").FROM("PERSON A")         .WHERE("name like ?")         .WHERE("id = ?").toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }    @Test   public void shouldProduceExpectedSimpleSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2("a", "b", "c"));   }    @Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, "b", "c"));   }    @Test   public void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, "c"));   }    @Test   public void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, null));   }    @Test   public void shouldProduceExpectedComplexSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +             "FROM PERSON P, ACCOUNT A\n" +             "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +             "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +             "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +             "OR (P.LAST_NAME like ?)\n" +             "GROUP BY P.ID\n" +             "HAVING (P.LAST_NAME like ?) \n" +             "OR (P.FIRST_NAME like ?)\n" +             "ORDER BY P.ID, P.FULL_NAME";     assertEquals(expected, example1().toString());   }    private static SQL example1() {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");       SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");       FROM("PERSON P");       FROM("ACCOUNT A");       INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");       INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");       WHERE("P.ID = A.ID");       WHERE("P.FIRST_NAME like ?");       OR();       WHERE("P.LAST_NAME like ?");       GROUP_BY("P.ID");       HAVING("P.LAST_NAME like ?");       OR();       HAVING("P.FIRST_NAME like ?");       ORDER_BY("P.ID");       ORDER_BY("P.FULL_NAME");     }};   }    private static String example2(final String id, final String firstName, final String lastName) {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");       FROM("PERSON P");       if (id != null) {         WHERE("P.ID like #id#");       }       if (firstName != null) {         WHERE("P.FIRST_NAME like #firstName#");       }       if (lastName != null) {         WHERE("P.LAST_NAME like #lastName#");       }       ORDER_BY("P.LAST_NAME");     }}.toString();   }     @Test   public void variableLengthArgumentOnSelect() {     final String sql = new SQL() {{       SELECT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT P.ID, P.USERNAME", sql);   }    @Test   public void variableLengthArgumentOnSelectDistinct() {     final String sql = new SQL() {{       SELECT_DISTINCT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT DISTINCT P.ID, P.USERNAME", sql);   }    @Test   public void variableLengthArgumentOnFrom() {     final String sql = new SQL() {{       SELECT().FROM("TABLE_A a", "TABLE_B b");     }}.toString();      assertEquals("FROM TABLE_A a, TABLE_B b", sql);   }    @Test   public void variableLengthArgumentOnJoin() {     final String sql = new SQL() {{       SELECT().JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("JOIN TABLE_A b ON b.id = a.id\n" +         "JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnInnerJoin() {     final String sql = new SQL() {{       SELECT().INNER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("INNER JOIN TABLE_A b ON b.id = a.id\n" +         "INNER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnOuterJoin() {     final String sql = new SQL() {{       SELECT().OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnLeftOuterJoin() {     final String sql = new SQL() {{       SELECT().LEFT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("LEFT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "LEFT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnRightOuterJoin() {     final String sql = new SQL() {{       SELECT().RIGHT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "RIGHT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   public void variableLengthArgumentOnWhere() {     final String sql = new SQL() {{       SELECT().WHERE("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("WHERE (a = #{a} AND b = #{b})", sql);   }    @Test   public void variableLengthArgumentOnGroupBy() {     final String sql = new SQL() {{       SELECT().GROUP_BY("a", "b");     }}.toString();      assertEquals("GROUP BY a, b", sql);   }    @Test   public void variableLengthArgumentOnHaving() {     final String sql = new SQL() {{       SELECT().HAVING("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("HAVING (a = #{a} AND b = #{b})", sql);   }    @Test   public void variableLengthArgumentOnOrderBy() {     final String sql = new SQL() {{       SELECT().ORDER_BY("a", "b");     }}.toString();      assertEquals("ORDER BY a, b", sql);   }    @Test   public void variableLengthArgumentOnSet() {     final String sql = new SQL() {{       UPDATE("TABLE_A").SET("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("UPDATE TABLE_A\n" +         "SET a = #{a}, b = #{b}", sql);   }    @Test   public void variableLengthArgumentOnIntoColumnsAndValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}", "#{b}");     }}.toString();      System.out.println(sql);      assertEquals("INSERT INTO TABLE_A\n (a, b)\nVALUES (#{a}, #{b})", sql);   }    @Test   public void fixFor903UpdateJoins() {     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");     assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");   } } " compose:StringConcatenation merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java.merge : .java.merge-File]
				[T -> MavenWrapperDownloader.java : .java-Content "/* Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License. */  import java.net.*; import java.io.*; import java.nio.channels.*; import java.util.Properties;  public class MavenWrapperDownloader {      /**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */     private static final String DEFAULT_DOWNLOAD_URL =             "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";      /**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */     private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";      /**      * Path where the maven-wrapper.jar will be saved to.      */     private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";      /**      * Name of the property which should be used to override the default download url for the wrapper.      */     private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";      public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: : " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }      private static void downloadFileFromURL(String urlString, File destination) throws Exception {         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> apache : Folder]
						[NT -> ibatis : Folder]
							[NT -> jdbc : Folder]
								[NT -> SQLTest.java.merge : .java.merge-File]
									[T -> SQLTest.java : .java-Content "/**  *    Copyright 2009-2019 the original author or authors.  *  *    Licensed under the Apache License, Version 2.0 (the "License");  *    you may not use this file except in compliance with the License.  *    You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing, software  *    distributed under the License is distributed on an "AS IS" BASIS,  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *    See the License for the specific language governing permissions and  *    limitations under the License.  */ package org.apache.ibatis.jdbc;  import org.junit.jupiter.api.Test;  import static org.assertj.core.api.Assertions.assertThat; import static org.junit.jupiter.api.Assertions.assertEquals;  class SQLTest {    @Test   void shouldDemonstrateProvidedStringBuilder() {     //You can pass in your own StringBuilder     final StringBuilder sb = new StringBuilder();     //From the tutorial     final String sql = example1().usingAppender(sb).toString();      assertEquals("SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +         "FROM PERSON P, ACCOUNT A\n" +         "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +         "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +         "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +         "OR (P.LAST_NAME like ?)\n" +         "GROUP BY P.ID\n" +         "HAVING (P.LAST_NAME like ?) \n" +         "OR (P.FIRST_NAME like ?)\n" +         "ORDER BY P.ID, P.FULL_NAME", sql);   }    @Test   void shouldDemonstrateMixedStyle() {     //Mixed     final String sql = new SQL() {{       SELECT("id, name");       FROM("PERSON A");       WHERE("name like ?").WHERE("id = ?");     }}.toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }    @Test   void shouldDemonstrateFluentStyle() {     //Fluent Style     final String sql = new SQL()         .SELECT("id, name").FROM("PERSON A")         .WHERE("name like ?")         .WHERE("id = ?").toString();      assertEquals("" +         "SELECT id, name\n" +         "FROM PERSON A\n" +         "WHERE (name like ? AND id = ?)", sql);   }    @Test   void shouldProduceExpectedSimpleSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2("a", "b", "c"));   }    @Test   void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, "b", "c"));   }    @Test   void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "WHERE (P.LAST_NAME like #lastName#)\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, "c"));   }    @Test   void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\n" +             "FROM PERSON P\n" +             "ORDER BY P.LAST_NAME";     assertEquals(expected, example2(null, null, null));   }    @Test   void shouldProduceExpectedComplexSelectStatement() {     final String expected =         "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\n" +             "FROM PERSON P, ACCOUNT A\n" +             "INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\n" +             "INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\n" +             "WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \n" +             "OR (P.LAST_NAME like ?)\n" +             "GROUP BY P.ID\n" +             "HAVING (P.LAST_NAME like ?) \n" +             "OR (P.FIRST_NAME like ?)\n" +             "ORDER BY P.ID, P.FULL_NAME";     assertEquals(expected, example1().toString());   }    private static SQL example1() {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");       SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");       FROM("PERSON P");       FROM("ACCOUNT A");       INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");       INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");       WHERE("P.ID = A.ID");       WHERE("P.FIRST_NAME like ?");       OR();       WHERE("P.LAST_NAME like ?");       GROUP_BY("P.ID");       HAVING("P.LAST_NAME like ?");       OR();       HAVING("P.FIRST_NAME like ?");       ORDER_BY("P.ID");       ORDER_BY("P.FULL_NAME");     }};   }    private static String example2(final String id, final String firstName, final String lastName) {     return new SQL() {{       SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");       FROM("PERSON P");       if (id != null) {         WHERE("P.ID like #id#");       }       if (firstName != null) {         WHERE("P.FIRST_NAME like #firstName#");       }       if (lastName != null) {         WHERE("P.LAST_NAME like #lastName#");       }       ORDER_BY("P.LAST_NAME");     }}.toString();   }     @Test   void variableLengthArgumentOnSelect() {     final String sql = new SQL() {{       SELECT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT P.ID, P.USERNAME", sql);   }    @Test   void variableLengthArgumentOnSelectDistinct() {     final String sql = new SQL() {{       SELECT_DISTINCT("P.ID", "P.USERNAME");     }}.toString();      assertEquals("SELECT DISTINCT P.ID, P.USERNAME", sql);   }    @Test   void variableLengthArgumentOnFrom() {     final String sql = new SQL() {{       SELECT().FROM("TABLE_A a", "TABLE_B b");     }}.toString();      assertEquals("FROM TABLE_A a, TABLE_B b", sql);   }    @Test   void variableLengthArgumentOnJoin() {     final String sql = new SQL() {{       SELECT().JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("JOIN TABLE_A b ON b.id = a.id\n" +         "JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   void variableLengthArgumentOnInnerJoin() {     final String sql = new SQL() {{       SELECT().INNER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("INNER JOIN TABLE_A b ON b.id = a.id\n" +         "INNER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   void variableLengthArgumentOnOuterJoin() {     final String sql = new SQL() {{       SELECT().OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   void variableLengthArgumentOnLeftOuterJoin() {     final String sql = new SQL() {{       SELECT().LEFT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("LEFT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "LEFT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   void variableLengthArgumentOnRightOuterJoin() {     final String sql = new SQL() {{       SELECT().RIGHT_OUTER_JOIN("TABLE_A b ON b.id = a.id", "TABLE_C c ON c.id = a.id");     }}.toString();      assertEquals("RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\n" +         "RIGHT OUTER JOIN TABLE_C c ON c.id = a.id", sql);   }    @Test   void variableLengthArgumentOnWhere() {     final String sql = new SQL() {{       SELECT().WHERE("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("WHERE (a = #{a} AND b = #{b})", sql);   }    @Test   void variableLengthArgumentOnGroupBy() {     final String sql = new SQL() {{       SELECT().GROUP_BY("a", "b");     }}.toString();      assertEquals("GROUP BY a, b", sql);   }    @Test   void variableLengthArgumentOnHaving() {     final String sql = new SQL() {{       SELECT().HAVING("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("HAVING (a = #{a} AND b = #{b})", sql);   }    @Test   void variableLengthArgumentOnOrderBy() {     final String sql = new SQL() {{       SELECT().ORDER_BY("a", "b");     }}.toString();      assertEquals("ORDER BY a, b", sql);   }    @Test   void variableLengthArgumentOnSet() {     final String sql = new SQL() {{       UPDATE("TABLE_A").SET("a = #{a}", "b = #{b}");     }}.toString();      assertEquals("UPDATE TABLE_A\n" +         "SET a = #{a}, b = #{b}", sql);   }    @Test   void variableLengthArgumentOnIntoColumnsAndValues() {     final String sql = new SQL() {{       INSERT_INTO("TABLE_A").INTO_COLUMNS("a", "b").INTO_VALUES("#{a}", "#{b}");     }}.toString();      assertEquals("INSERT INTO TABLE_A\n (a, b)\nVALUES (#{a}, #{b})", sql);   }    @Test   void fixFor903UpdateJoins() {     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");     assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");   }    @Test   void selectUsingLimitVariableName() {     final String sql = new SQL() {{       SELECT("*").FROM("test").ORDER_BY("id").LIMIT("#{limit}");     }}.toString();      assertEquals("SELECT *\nFROM test\nORDER BY id LIMIT #{limit}", sql);   }    @Test   void selectUsingOffsetVariableName() {     final String sql = new SQL() {{       SELECT("*").FROM("test").ORDER_BY("id").OFFSET("#{offset}");     }}.toString();      assertEquals("SELECT *\nFROM test\nORDER BY id OFFSET #{offset}", sql);   }    @Test   void selectUsingLimitAndOffset() {     final String sql = new SQL() {{       SELECT("*").FROM("test").ORDER_BY("id").LIMIT(20).OFFSET(100);     }}.toString();      assertEquals("SELECT *\nFROM test\nORDER BY id LIMIT 20 OFFSET 100", sql);   }    @Test   void updateUsingLimit() {     final String sql = new SQL() {{       UPDATE("test").SET("status = #{updStatus}").WHERE("status = #{status}").LIMIT(20);     }}.toString();      assertEquals("UPDATE test\nSET status = #{updStatus}\nWHERE (status = #{status}) LIMIT 20", sql);   }    @Test   void deleteUsingLimit() {     final String sql = new SQL() {{       DELETE_FROM("test").WHERE("status = #{status}").LIMIT(20);     }}.toString();      assertEquals("DELETE FROM test\nWHERE (status = #{status}) LIMIT 20", sql);   }  } " compose:StringConcatenation merge: LineBased]
	[NT -> .mvn : Folder]
		[NT -> wrapper : Folder]
			[NT -> MavenWrapperDownloader.java.merge : .java.merge-File]
				[T -> MavenWrapperDownloader.java : .java-Content "/*  * Copyright 2007-present the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ import java.net.*; import java.io.*; import java.nio.channels.*; import java.util.Properties;  public class MavenWrapperDownloader {      private static final String WRAPPER_VERSION = "0.5.5";     /**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */     private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"         + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";      /**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */     private static final String MAVEN_WRAPPER_PROPERTIES_PATH =             ".mvn/wrapper/maven-wrapper.properties";      /**      * Path where the maven-wrapper.jar will be saved to.      */     private static final String MAVEN_WRAPPER_JAR_PATH =             ".mvn/wrapper/maven-wrapper.jar";      /**      * Name of the property which should be used to override the default download url for the wrapper.      */     private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";      public static void main(String args[]) {         System.out.println("- Downloader started");         File baseDirectory = new File(args[0]);         System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());          // If the maven-wrapper.properties exists, read it and check if it contains a custom         // wrapperUrl parameter.         File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);         String url = DEFAULT_DOWNLOAD_URL;         if(mavenWrapperPropertyFile.exists()) {             FileInputStream mavenWrapperPropertyFileInputStream = null;             try {                 mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                 Properties mavenWrapperProperties = new Properties();                 mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                 url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);             } catch (IOException e) {                 System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");             } finally {                 try {                     if(mavenWrapperPropertyFileInputStream != null) {                         mavenWrapperPropertyFileInputStream.close();                     }                 } catch (IOException e) {                     // Ignore ...                 }             }         }         System.out.println("- Downloading from: " + url);          File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);         if(!outputFile.getParentFile().exists()) {             if(!outputFile.getParentFile().mkdirs()) {                 System.out.println(                         "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");             }         }         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());         try {             downloadFileFromURL(url, outputFile);             System.out.println("Done");             System.exit(0);         } catch (Throwable e) {             System.out.println("- Error downloading");             e.printStackTrace();             System.exit(1);         }     }      private static void downloadFileFromURL(String urlString, File destination) throws Exception {         if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {             String username = System.getenv("MVNW_USERNAME");             char[] password = System.getenv("MVNW_PASSWORD").toCharArray();             Authenticator.setDefault(new Authenticator() {                 @Override                 protected PasswordAuthentication getPasswordAuthentication() {                     return new PasswordAuthentication(username, password);                 }             });         }         URL website = new URL(urlString);         ReadableByteChannel rbc;         rbc = Channels.newChannel(website.openStream());         FileOutputStream fos = new FileOutputStream(destination);         fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);         fos.close();         rbc.close();     }  } " compose:StringConcatenation merge: LineBased]
