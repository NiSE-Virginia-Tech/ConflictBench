Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/temp/left/src/test/java/org/springframework/samples/petclinic/web/VisitControllerTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/temp/left/src/test/java/org/springframework/samples/petclinic/web/VisitControllerTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/temp/base/src/test/java/org/springframework/samples/petclinic/web/VisitControllerTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/temp/base/src/test/java/org/springframework/samples/petclinic/web/VisitControllerTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/temp/right/src/test/java/org/springframework/samples/petclinic/web/VisitControllerTests.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/temp/right/src/test/java/org/springframework/samples/petclinic/web/VisitControllerTests.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> springframework : Folder]
						[NT -> samples : Folder]
							[NT -> petclinic : Folder]
								[NT -> web : Folder]
									[NT -> VisitControllerTests.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package org.springframework.samples.petclinic.web;" compose:Replacement merge: Default]
											[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
											[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
											[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
											[T -> org.springframework.beans.factory.annotation.Autowired{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.annotation.Autowired;" compose:Replacement merge: Default]
											[T -> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest{ImportPackage} : ImportDeclaration "import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;" compose:Replacement merge: Default]
											[T -> org.springframework.boot.test.mock.mockito.MockBean{ImportPackage} : ImportDeclaration "import org.springframework.boot.test.mock.mockito.MockBean;" compose:Replacement merge: Default]
											[T -> org.springframework.samples.petclinic.model.Pet{ImportPackage} : ImportDeclaration "import org.springframework.samples.petclinic.model.Pet;" compose:Replacement merge: Default]
											[T -> org.springframework.samples.petclinic.service.ClinicService{ImportPackage} : ImportDeclaration "import org.springframework.samples.petclinic.service.ClinicService;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.junit4.SpringJUnit4ClassRunner{ImportPackage} : ImportDeclaration "import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.MockMvc{ImportPackage} : ImportDeclaration "import org.springframework.test.web.servlet.MockMvc;" compose:Replacement merge: Default]
											[T -> org.mockito.BDDMockito.given{ImportPackage} : ImportDeclaration "import static org.mockito.BDDMockito.given;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.result.MockMvcResultMatchers.* : ImportDeclaration "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;" compose:Replacement merge: Default]
											[NT -> VisitControllerTests : ClassDeclaration]
												[T -> - : Modifiers "@RunWith(SpringJUnit4ClassRunner.class) @WebMvcTest(VisitController.class) public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> VisitControllerTests : Id "VisitControllerTests" compose:Replacement merge: Default]
												[T -> TEST_PET_ID : FieldDecl "private static final int TEST_PET_ID = 1;" compose:Replacement merge: SemanticConflict]
												[T -> visitController : FieldDecl "@Autowired     private VisitController visitController;" compose:Replacement merge: SemanticConflict]
												[T -> mockMvc : FieldDecl "@Autowired     private MockMvc mockMvc;" compose:Replacement merge: SemanticConflict]
												[T -> clinicService : FieldDecl "@MockBean     private ClinicService clinicService;" compose:Replacement merge: SemanticConflict]
												[T -> init({FormalParametersInternal}) : MethodDecl "@Before     public void init() {         given(this.clinicService.findPetById(TEST_PET_ID)).willReturn(new Pet());     }" compose:Replacement merge: LineBased]
												[T -> testInitNewVisitForm({FormalParametersInternal}) : MethodDecl "@Test     public void testInitNewVisitForm() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits/new", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }" compose:Replacement merge: LineBased]
												[T -> testProcessNewVisitFormSuccess({FormalParametersInternal}) : MethodDecl "@Test     public void testProcessNewVisitFormSuccess() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")             .param("description", "Visit Description")         )             .andExpect(status().is3xxRedirection())             .andExpect(view().name("redirect:/owners/{ownerId}"));     }" compose:Replacement merge: LineBased]
												[T -> testProcessNewVisitFormHasErrors({FormalParametersInternal}) : MethodDecl "@Test     public void testProcessNewVisitFormHasErrors() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")         )             .andExpect(model().attributeHasErrors("visit"))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }" compose:Replacement merge: LineBased]
												[T -> testShowVisits({FormalParametersInternal}) : MethodDecl "@Test     public void testShowVisits() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(model().attributeExists("visits"))             .andExpect(view().name("visitList"));     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> springframework : Folder]
						[NT -> samples : Folder]
							[NT -> petclinic : Folder]
								[NT -> web : Folder]
									[NT -> VisitControllerTests.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package org.springframework.samples.petclinic.web;" compose:Replacement merge: Default]
											[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
											[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
											[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
											[T -> org.springframework.beans.factory.annotation.Autowired{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.annotation.Autowired;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.ActiveProfiles{ImportPackage} : ImportDeclaration "import org.springframework.test.context.ActiveProfiles;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.ContextConfiguration{ImportPackage} : ImportDeclaration "import org.springframework.test.context.ContextConfiguration;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.junit4.SpringJUnit4ClassRunner{ImportPackage} : ImportDeclaration "import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.web.WebAppConfiguration{ImportPackage} : ImportDeclaration "import org.springframework.test.context.web.WebAppConfiguration;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.MockMvc{ImportPackage} : ImportDeclaration "import org.springframework.test.web.servlet.MockMvc;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.setup.MockMvcBuilders{ImportPackage} : ImportDeclaration "import org.springframework.test.web.servlet.setup.MockMvcBuilders;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.result.MockMvcResultMatchers.model{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.result.MockMvcResultMatchers.view{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;" compose:Replacement merge: Default]
											[NT -> VisitControllerTests : ClassDeclaration]
												[T -> - : Modifiers "@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration({"classpath:spring/business-config.xml", "classpath:spring/tools-config.xml", "classpath:spring/mvc-core-config.xml"}) @WebAppConfiguration @ActiveProfiles("spring-data-jpa") public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> VisitControllerTests : Id "VisitControllerTests" compose:Replacement merge: Default]
												[T -> TEST_PET_ID : FieldDecl "private static final int TEST_PET_ID = 1;" compose:Replacement merge: SemanticConflict]
												[T -> visitController : FieldDecl "@Autowired     private VisitController visitController;" compose:Replacement merge: SemanticConflict]
												[T -> mockMvc : FieldDecl "private MockMvc mockMvc;" compose:Replacement merge: SemanticConflict]
												[T -> setup({FormalParametersInternal}) : MethodDecl "@Before     public void setup() {         this.mockMvc = MockMvcBuilders.standaloneSetup(visitController).build();     }" compose:Replacement merge: LineBased]
												[T -> testInitNewVisitForm({FormalParametersInternal}) : MethodDecl "@Test     public void testInitNewVisitForm() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits/new", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }" compose:Replacement merge: LineBased]
												[T -> testProcessNewVisitFormSuccess({FormalParametersInternal}) : MethodDecl "@Test     public void testProcessNewVisitFormSuccess() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")             .param("description", "Visit Description")         )             .andExpect(status().is3xxRedirection())             .andExpect(view().name("redirect:/owners/{ownerId}"));     }" compose:Replacement merge: LineBased]
												[T -> testProcessNewVisitFormHasErrors({FormalParametersInternal}) : MethodDecl "@Test     public void testProcessNewVisitFormHasErrors() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")         )             .andExpect(model().attributeHasErrors("visit"))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }" compose:Replacement merge: LineBased]
												[T -> testShowVisits({FormalParametersInternal}) : MethodDecl "@Test     public void testShowVisits() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(model().attributeExists("visits"))             .andExpect(view().name("visitList"));     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> springframework : Folder]
						[NT -> samples : Folder]
							[NT -> petclinic : Folder]
								[NT -> web : Folder]
									[NT -> VisitControllerTests.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package org.springframework.samples.petclinic.web;" compose:Replacement merge: Default]
											[T -> org.junit.Before{ImportPackage} : ImportDeclaration "import org.junit.Before;" compose:Replacement merge: Default]
											[T -> org.junit.Test{ImportPackage} : ImportDeclaration "import org.junit.Test;" compose:Replacement merge: Default]
											[T -> org.junit.runner.RunWith{ImportPackage} : ImportDeclaration "import org.junit.runner.RunWith;" compose:Replacement merge: Default]
											[T -> org.springframework.beans.factory.annotation.Autowired{ImportPackage} : ImportDeclaration "import org.springframework.beans.factory.annotation.Autowired;" compose:Replacement merge: Default]
											[T -> org.springframework.samples.petclinic.model.Pet{ImportPackage} : ImportDeclaration "import org.springframework.samples.petclinic.model.Pet;" compose:Replacement merge: Default]
											[T -> org.springframework.samples.petclinic.service.ClinicService{ImportPackage} : ImportDeclaration "import org.springframework.samples.petclinic.service.ClinicService;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.ContextConfiguration{ImportPackage} : ImportDeclaration "import org.springframework.test.context.ContextConfiguration;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.junit4.SpringJUnit4ClassRunner{ImportPackage} : ImportDeclaration "import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;" compose:Replacement merge: Default]
											[T -> org.springframework.test.context.web.WebAppConfiguration{ImportPackage} : ImportDeclaration "import org.springframework.test.context.web.WebAppConfiguration;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.MockMvc{ImportPackage} : ImportDeclaration "import org.springframework.test.web.servlet.MockMvc;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.setup.MockMvcBuilders{ImportPackage} : ImportDeclaration "import org.springframework.test.web.servlet.setup.MockMvcBuilders;" compose:Replacement merge: Default]
											[T -> org.mockito.BDDMockito.given{ImportPackage} : ImportDeclaration "import static org.mockito.BDDMockito.given;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post{ImportPackage} : ImportDeclaration "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;" compose:Replacement merge: Default]
											[T -> org.springframework.test.web.servlet.result.MockMvcResultMatchers.* : ImportDeclaration "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;" compose:Replacement merge: Default]
											[NT -> VisitControllerTests : ClassDeclaration]
												[T -> - : Modifiers "@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration({"classpath:spring/mvc-core-config.xml", "classpath:spring/mvc-test-config.xml"}) @WebAppConfiguration public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> VisitControllerTests : Id "VisitControllerTests" compose:Replacement merge: Default]
												[T -> TEST_PET_ID : FieldDecl "private static final int TEST_PET_ID = 1;" compose:Replacement merge: SemanticConflict]
												[T -> visitController : FieldDecl "@Autowired     private VisitController visitController;" compose:Replacement merge: SemanticConflict]
												[T -> clinicService : FieldDecl "@Autowired     private ClinicService clinicService;" compose:Replacement merge: SemanticConflict]
												[T -> mockMvc : FieldDecl "private MockMvc mockMvc;" compose:Replacement merge: SemanticConflict]
												[T -> setup({FormalParametersInternal}) : MethodDecl "@Before     public void setup() {         this.mockMvc = MockMvcBuilders.standaloneSetup(visitController).build();          given(this.clinicService.findPetById(TEST_PET_ID)).willReturn(new Pet());     }" compose:Replacement merge: LineBased]
												[T -> testInitNewVisitForm({FormalParametersInternal}) : MethodDecl "@Test     public void testInitNewVisitForm() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits/new", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }" compose:Replacement merge: LineBased]
												[T -> testProcessNewVisitFormSuccess({FormalParametersInternal}) : MethodDecl "@Test     public void testProcessNewVisitFormSuccess() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")             .param("description", "Visit Description")         )             .andExpect(status().is3xxRedirection())             .andExpect(view().name("redirect:/owners/{ownerId}"));     }" compose:Replacement merge: LineBased]
												[T -> testProcessNewVisitFormHasErrors({FormalParametersInternal}) : MethodDecl "@Test     public void testProcessNewVisitFormHasErrors() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")         )             .andExpect(model().attributeHasErrors("visit"))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }" compose:Replacement merge: LineBased]
												[T -> testShowVisits({FormalParametersInternal}) : MethodDecl "@Test     public void testShowVisits() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(model().attributeExists("visits"))             .andExpect(view().name("visitList"));     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> springframework : Folder]
						[NT -> samples : Folder]
							[NT -> petclinic : Folder]
								[NT -> web : Folder]
									[NT -> VisitControllerTests.java.merge : .java.merge-File]
										[T -> VisitControllerTests.java : .java-Content "package org.springframework.samples.petclinic.web;  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest; import org.springframework.boot.test.mock.mockito.MockBean; import org.springframework.samples.petclinic.model.Pet; import org.springframework.samples.petclinic.service.ClinicService; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.web.servlet.MockMvc;  import static org.mockito.BDDMockito.given; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;  /**  * Test class for {@link VisitController}  *  * @author Colin But  */ @RunWith(SpringJUnit4ClassRunner.class) @WebMvcTest(VisitController.class) public class VisitControllerTests {      private static final int TEST_PET_ID = 1;      @Autowired     private VisitController visitController;      @Autowired     private MockMvc mockMvc;      @MockBean     private ClinicService clinicService;      @Before     public void init() {         given(this.clinicService.findPetById(TEST_PET_ID)).willReturn(new Pet());     }       @Test     public void testInitNewVisitForm() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits/new", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }      @Test     public void testProcessNewVisitFormSuccess() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")             .param("description", "Visit Description")         )             .andExpect(status().is3xxRedirection())             .andExpect(view().name("redirect:/owners/{ownerId}"));     }      @Test     public void testProcessNewVisitFormHasErrors() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")         )             .andExpect(model().attributeHasErrors("visit"))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }      @Test     public void testShowVisits() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(model().attributeExists("visits"))             .andExpect(view().name("visitList"));     }   } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> springframework : Folder]
						[NT -> samples : Folder]
							[NT -> petclinic : Folder]
								[NT -> web : Folder]
									[NT -> VisitControllerTests.java.merge : .java.merge-File]
										[T -> VisitControllerTests.java : .java-Content "package org.springframework.samples.petclinic.web;  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ActiveProfiles; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.web.WebAppConfiguration; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.setup.MockMvcBuilders;  import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;  /**  * Test class for {@link VisitController}  *  * @author Colin But  */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration({"classpath:spring/business-config.xml", "classpath:spring/tools-config.xml", "classpath:spring/mvc-core-config.xml"}) @WebAppConfiguration @ActiveProfiles("spring-data-jpa") public class VisitControllerTests {      private static final int TEST_PET_ID = 1;      @Autowired     private VisitController visitController;      private MockMvc mockMvc;      @Before     public void setup() {         this.mockMvc = MockMvcBuilders.standaloneSetup(visitController).build();     }      @Test     public void testInitNewVisitForm() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits/new", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }      @Test     public void testProcessNewVisitFormSuccess() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")             .param("description", "Visit Description")         )             .andExpect(status().is3xxRedirection())             .andExpect(view().name("redirect:/owners/{ownerId}"));     }      @Test     public void testProcessNewVisitFormHasErrors() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")         )             .andExpect(model().attributeHasErrors("visit"))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }      @Test     public void testShowVisits() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(model().attributeExists("visits"))             .andExpect(view().name("visitList"));     }   } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> org : Folder]
					[NT -> springframework : Folder]
						[NT -> samples : Folder]
							[NT -> petclinic : Folder]
								[NT -> web : Folder]
									[NT -> VisitControllerTests.java.merge : .java.merge-File]
										[T -> VisitControllerTests.java : .java-Content "package org.springframework.samples.petclinic.web;  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.samples.petclinic.model.Pet; import org.springframework.samples.petclinic.service.ClinicService; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.web.WebAppConfiguration; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.setup.MockMvcBuilders;  import static org.mockito.BDDMockito.given; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;  /**  * Test class for {@link VisitController}  *  * @author Colin But  */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration({"classpath:spring/mvc-core-config.xml", "classpath:spring/mvc-test-config.xml"}) @WebAppConfiguration public class VisitControllerTests {      private static final int TEST_PET_ID = 1;      @Autowired     private VisitController visitController;      @Autowired     private ClinicService clinicService;      private MockMvc mockMvc;      @Before     public void setup() {         this.mockMvc = MockMvcBuilders.standaloneSetup(visitController).build();          given(this.clinicService.findPetById(TEST_PET_ID)).willReturn(new Pet());     }      @Test     public void testInitNewVisitForm() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits/new", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }      @Test     public void testProcessNewVisitFormSuccess() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")             .param("description", "Visit Description")         )             .andExpect(status().is3xxRedirection())             .andExpect(view().name("redirect:/owners/{ownerId}"));     }      @Test     public void testProcessNewVisitFormHasErrors() throws Exception {         mockMvc.perform(post("/owners/*/pets/{petId}/visits/new", TEST_PET_ID)             .param("name", "George")         )             .andExpect(model().attributeHasErrors("visit"))             .andExpect(status().isOk())             .andExpect(view().name("pets/createOrUpdateVisitForm"));     }      @Test     public void testShowVisits() throws Exception {         mockMvc.perform(get("/owners/*/pets/{petId}/visits", TEST_PET_ID))             .andExpect(status().isOk())             .andExpect(model().attributeExists("visits"))             .andExpect(view().name("visitList"));     }   } " compose:StringConcatenation merge: LineBased]
