Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/printers/NewLinePrinter.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/printers/NewLinePrinter.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/printers/NewLinePrinter.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/printers/NewLinePrinter.java
[NT -> base : Feature]
	[NT -> com : Folder]
		[NT -> seriouscompany : Folder]
			[NT -> business : Folder]
				[NT -> java : Folder]
					[NT -> fizzbuzz : Folder]
						[NT -> packagenamingpackage : Folder]
							[NT -> printers : Folder]
								[NT -> NewLinePrinter.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.printers;" compose:Replacement merge: Default]
										[T -> com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.stringreturners.NewLineStringReturner{ImportPackage} : ImportDeclaration "import com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.stringreturners.NewLineStringReturner;" compose:Replacement merge: Default]
										[NT -> NewLinePrinter : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> NewLinePrinter : Id "NewLinePrinter" compose:Replacement merge: Default]
											[T -> printNewLine({FormalParametersInternal}) : MethodDecl "public void printNewLine() {   NewLineStringReturner myNewLineStringReturner = new NewLineStringReturner();   String myNewLineString = myNewLineStringReturner.getNewLineString();   System.out.print(myNewLineString);  }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> com : Folder]
		[NT -> seriouscompany : Folder]
			[NT -> business : Folder]
				[NT -> java : Folder]
					[NT -> fizzbuzz : Folder]
						[NT -> packagenamingpackage : Folder]
							[NT -> printers : Folder]
								[NT -> NewLinePrinter.java : Java-File]
									[NT -> - : CompilationUnit]
										[T -> - : PackageDeclaration "package com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.printers;" compose:Replacement merge: Default]
										[T -> com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.stringreturners.NewLineStringReturner{ImportPackage} : ImportDeclaration "import com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.stringreturners.NewLineStringReturner;" compose:Replacement merge: Default]
										[NT -> NewLinePrinter : ClassDeclaration]
											[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
											[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
											[T -> NewLinePrinter : Id "NewLinePrinter" compose:Replacement merge: Default]
											[T -> printNewLine({FormalParametersInternal}) : MethodDecl "public void printNewLine() {   NewLineStringReturner myNewLineStringReturner = new NewLineStringReturner();   String myNewLineString = myNewLineStringReturner.getReturnString();   System.out.print(myNewLineString);  }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> com : Folder]
		[NT -> seriouscompany : Folder]
			[NT -> business : Folder]
				[NT -> java : Folder]
					[NT -> fizzbuzz : Folder]
						[NT -> packagenamingpackage : Folder]
							[NT -> printers : Folder]
								[NT -> NewLinePrinter.java.merge : .java.merge-File]
									[T -> NewLinePrinter.java : .java-Content "package com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.printers;  import com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.stringreturners.NewLineStringReturner;  public class NewLinePrinter {   public void printNewLine() {   NewLineStringReturner myNewLineStringReturner = new NewLineStringReturner();   String myNewLineString = myNewLineStringReturner.getNewLineString();   System.out.print(myNewLineString);  }   } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> com : Folder]
		[NT -> seriouscompany : Folder]
			[NT -> business : Folder]
				[NT -> java : Folder]
					[NT -> fizzbuzz : Folder]
						[NT -> packagenamingpackage : Folder]
							[NT -> printers : Folder]
								[NT -> NewLinePrinter.java.merge : .java.merge-File]
									[T -> NewLinePrinter.java : .java-Content "package com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.printers;  import com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.stringreturners.NewLineStringReturner;  public class NewLinePrinter {   public void printNewLine() {   NewLineStringReturner myNewLineStringReturner = new NewLineStringReturner();   String myNewLineString = myNewLineStringReturner.getReturnString();   System.out.print(myNewLineString);  }   } " compose:StringConcatenation merge: LineBased]
