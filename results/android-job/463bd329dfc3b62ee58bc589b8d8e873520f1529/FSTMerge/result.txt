Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/library/src/main/java/com/evernote/android/job/util/JobApi.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/library/src/main/java/com/evernote/android/job/util/JobApi.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/library/src/main/java/com/evernote/android/job/util/JobApi.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/library/src/main/java/com/evernote/android/job/util/JobApi.java
[NT -> base : Feature]
	[NT -> library : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> evernote : Folder]
							[NT -> android : Folder]
								[NT -> job : Folder]
									[NT -> util : Folder]
										[NT -> JobApi.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.evernote.android.job.util;" compose:Replacement merge: Default]
												[T -> android.app.AlarmManager{ImportPackage} : ImportDeclaration "import android.app.AlarmManager;" compose:Replacement merge: Default]
												[T -> android.app.job.JobScheduler{ImportPackage} : ImportDeclaration "import android.app.job.JobScheduler;" compose:Replacement merge: Default]
												[T -> android.content.Context{ImportPackage} : ImportDeclaration "import android.content.Context;" compose:Replacement merge: Default]
												[T -> android.os.Build{ImportPackage} : ImportDeclaration "import android.os.Build;" compose:Replacement merge: Default]
												[T -> android.support.annotation.NonNull{ImportPackage} : ImportDeclaration "import android.support.annotation.NonNull;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.JobManager{ImportPackage} : ImportDeclaration "import com.evernote.android.job.JobManager;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.JobProxy{ImportPackage} : ImportDeclaration "import com.evernote.android.job.JobProxy;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.gcm.JobProxyGcm{ImportPackage} : ImportDeclaration "import com.evernote.android.job.gcm.JobProxyGcm;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v14.JobProxy14{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v14.JobProxy14;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v19.JobProxy19{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v19.JobProxy19;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v21.JobProxy21{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v21.JobProxy21;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v24.JobProxy24{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v24.JobProxy24;" compose:Replacement merge: Default]
												[T -> com.google.android.gms.gcm.GcmNetworkManager{ImportPackage} : ImportDeclaration "import com.google.android.gms.gcm.GcmNetworkManager;" compose:Replacement merge: Default]
												[NT -> JobApi : EnumDecl]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> JobApi : Id "JobApi" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_24(true, false)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_21(true, true)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_19(true, true)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_14(false, true)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "GCM(true, false)" compose:Replacement merge: Default]
													[NT ->  : EnumBodyInternal]
														[T -> mCachedProxy : FieldDecl "private JobProxy mCachedProxy;" compose:Replacement merge: SemanticConflict]
														[T -> mSupportsExecutionWindow : FieldDecl "private final boolean mSupportsExecutionWindow;" compose:Replacement merge: SemanticConflict]
														[T -> mFlexSupport : FieldDecl "private final boolean mFlexSupport;" compose:Replacement merge: SemanticConflict]
														[T -> JobApi(boolean-boolean-boolean-boolean) : ConstructorDecl "JobApi(boolean supportsExecutionWindow, boolean flexSupport) {         mSupportsExecutionWindow = supportsExecutionWindow;         mFlexSupport = flexSupport;     }" compose:Replacement merge: LineBased]
														[T -> supportsExecutionWindow({FormalParametersInternal}) : MethodDecl "public boolean supportsExecutionWindow() {         return mSupportsExecutionWindow;     }" compose:Replacement merge: LineBased]
														[T -> isFlexSupport({FormalParametersInternal}) : MethodDecl "public boolean isFlexSupport() {         return mFlexSupport;     }" compose:Replacement merge: LineBased]
														[T -> isSupported(Context-Context) : MethodDecl "public boolean isSupported(Context context) {         switch (this) {             case V_24:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N;             case V_21:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;             case V_19:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;             case V_14:                 return true;             case GCM:                 return GcmAvailableHelper.isGcmApiSupported(context);             default:                 throw new IllegalStateException("not implemented");         }     }" compose:Replacement merge: LineBased]
														[T -> createProxy(Context-Context) : MethodDecl "@NonNull     public JobProxy createProxy(Context context) {         switch (this) {             case V_24:                 return new JobProxy24(context);             case V_21:                 return new JobProxy21(context);             case V_19:                 return new JobProxy19(context);             case V_14:                 return new JobProxy14(context);             case GCM:                 return new JobProxyGcm(context);             default:                 throw new IllegalStateException("not implemented");         }     }" compose:Replacement merge: LineBased]
														[T -> getCachedProxy(Context-Context) : MethodDecl "@NonNull     public synchronized JobProxy getCachedProxy(Context context) {         if (mCachedProxy == null) {             mCachedProxy = createProxy(context);         }         return mCachedProxy;     }" compose:Replacement merge: LineBased]
														[T -> getDefault(Context-Context) : MethodDecl "@SuppressWarnings("unused")     @NonNull     @Deprecated     public static JobApi getDefault(Context context) {         return getDefault(context, JobManager.instance().getConfig().isGcmApiEnabled());     }" compose:Replacement merge: LineBased]
														[T -> getDefault(Context-Context-boolean-boolean) : MethodDecl "@NonNull     public static JobApi getDefault(Context context, boolean gcmEnabled) {         if (V_24.isSupported(context)) {             return V_24;         } else if (V_21.isSupported(context)) {             return V_21;         } else if (gcmEnabled && GCM.isSupported(context)) {             return GCM;         } else if (V_19.isSupported(context)) {             return V_19;         } else {             return V_14;         }     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> library : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> evernote : Folder]
							[NT -> android : Folder]
								[NT -> job : Folder]
									[NT -> util : Folder]
										[NT -> JobApi.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package com.evernote.android.job.util;" compose:Replacement merge: Default]
												[T -> android.app.AlarmManager{ImportPackage} : ImportDeclaration "import android.app.AlarmManager;" compose:Replacement merge: Default]
												[T -> android.app.Service{ImportPackage} : ImportDeclaration "import android.app.Service;" compose:Replacement merge: Default]
												[T -> android.app.job.JobScheduler{ImportPackage} : ImportDeclaration "import android.app.job.JobScheduler;" compose:Replacement merge: Default]
												[T -> android.content.Context{ImportPackage} : ImportDeclaration "import android.content.Context;" compose:Replacement merge: Default]
												[T -> android.content.Intent{ImportPackage} : ImportDeclaration "import android.content.Intent;" compose:Replacement merge: Default]
												[T -> android.content.pm.ResolveInfo{ImportPackage} : ImportDeclaration "import android.content.pm.ResolveInfo;" compose:Replacement merge: Default]
												[T -> android.os.Build{ImportPackage} : ImportDeclaration "import android.os.Build;" compose:Replacement merge: Default]
												[T -> android.support.annotation.NonNull{ImportPackage} : ImportDeclaration "import android.support.annotation.NonNull;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.JobManager{ImportPackage} : ImportDeclaration "import com.evernote.android.job.JobManager;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.JobProxy{ImportPackage} : ImportDeclaration "import com.evernote.android.job.JobProxy;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.gcm.JobProxyGcm{ImportPackage} : ImportDeclaration "import com.evernote.android.job.gcm.JobProxyGcm;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v14.JobProxy14{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v14.JobProxy14;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v19.JobProxy19{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v19.JobProxy19;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v21.JobProxy21{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v21.JobProxy21;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v21.PlatformJobService{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v21.PlatformJobService;" compose:Replacement merge: Default]
												[T -> com.evernote.android.job.v24.JobProxy24{ImportPackage} : ImportDeclaration "import com.evernote.android.job.v24.JobProxy24;" compose:Replacement merge: Default]
												[T -> com.google.android.gms.gcm.GcmNetworkManager{ImportPackage} : ImportDeclaration "import com.google.android.gms.gcm.GcmNetworkManager;" compose:Replacement merge: Default]
												[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
												[NT -> JobApi : EnumDecl]
													[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
													[T -> JobApi : Id "JobApi" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_24(true, false)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_21(true, true)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_19(true, true)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "V_14(false, true)" compose:Replacement merge: Default]
													[T -> - : EnumConstant1 "GCM(true, false)" compose:Replacement merge: Default]
													[NT ->  : EnumBodyInternal]
														[T -> mCachedProxy : FieldDecl "private JobProxy mCachedProxy;" compose:Replacement merge: SemanticConflict]
														[T -> mSupportsExecutionWindow : FieldDecl "private final boolean mSupportsExecutionWindow;" compose:Replacement merge: SemanticConflict]
														[T -> mFlexSupport : FieldDecl "private final boolean mFlexSupport;" compose:Replacement merge: SemanticConflict]
														[T -> JobApi(boolean-boolean-boolean-boolean) : ConstructorDecl "JobApi(boolean supportsExecutionWindow, boolean flexSupport) {         mSupportsExecutionWindow = supportsExecutionWindow;         mFlexSupport = flexSupport;     }" compose:Replacement merge: LineBased]
														[T -> supportsExecutionWindow({FormalParametersInternal}) : MethodDecl "public boolean supportsExecutionWindow() {         return mSupportsExecutionWindow;     }" compose:Replacement merge: LineBased]
														[T -> isFlexSupport({FormalParametersInternal}) : MethodDecl "public boolean isFlexSupport() {         return mFlexSupport;     }" compose:Replacement merge: LineBased]
														[T -> isSupported(Context-Context) : MethodDecl "public boolean isSupported(Context context) {         switch (this) {             case V_24:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && isServiceEnabled(context, PlatformJobService.class);             case V_21:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && isServiceEnabled(context, PlatformJobService.class);             case V_19:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;             case V_14:                 return true;             case GCM:                 return GcmAvailableHelper.isGcmApiSupported(context);             default:                 throw new IllegalStateException("not implemented");         }     }" compose:Replacement merge: LineBased]
														[T -> createProxy(Context-Context) : MethodDecl "@NonNull     public JobProxy createProxy(Context context) {         switch (this) {             case V_24:                 return new JobProxy24(context);             case V_21:                 return new JobProxy21(context);             case V_19:                 return new JobProxy19(context);             case V_14:                 return new JobProxy14(context);             case GCM:                 return new JobProxyGcm(context);             default:                 throw new IllegalStateException("not implemented");         }     }" compose:Replacement merge: LineBased]
														[T -> getCachedProxy(Context-Context) : MethodDecl "@NonNull     public synchronized JobProxy getCachedProxy(Context context) {         if (mCachedProxy == null) {             mCachedProxy = createProxy(context);         }         return mCachedProxy;     }" compose:Replacement merge: LineBased]
														[T -> isServiceEnabled(Context-Context-Class<?extendsService>-Class<?extendsService>) : MethodDecl "private boolean isServiceEnabled(@NonNull Context context, @NonNull Class<? extends Service> clazz) {         // on some rooted devices user can disable services         try {             Intent intent = new Intent(context, clazz);             List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentServices(intent, 0);             return resolveInfos != null && !resolveInfos.isEmpty();         } catch (Exception e) {             return false;         }     }" compose:Replacement merge: LineBased]
														[T -> getDefault(Context-Context) : MethodDecl "@SuppressWarnings("unused")     @NonNull     @Deprecated     public static JobApi getDefault(Context context) {         return getDefault(context, JobManager.instance().getConfig().isGcmApiEnabled());     }" compose:Replacement merge: LineBased]
														[T -> getDefault(Context-Context-boolean-boolean) : MethodDecl "@NonNull     public static JobApi getDefault(Context context, boolean gcmEnabled) {         if (V_24.isSupported(context)) {             return V_24;         } else if (V_21.isSupported(context)) {             return V_21;         } else if (gcmEnabled && GCM.isSupported(context)) {             return GCM;         } else if (V_19.isSupported(context)) {             return V_19;         } else {             return V_14;         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> library : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> evernote : Folder]
							[NT -> android : Folder]
								[NT -> job : Folder]
									[NT -> util : Folder]
										[NT -> JobApi.java.merge : .java.merge-File]
											[T -> JobApi.java : .java-Content "/*  * Copyright 2007-present Evernote Corporation.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without modification,  * are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice, this  *    list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ package com.evernote.android.job.util;  import android.app.AlarmManager; import android.app.job.JobScheduler; import android.content.Context; import android.os.Build; import android.support.annotation.NonNull;  import com.evernote.android.job.JobManager; import com.evernote.android.job.JobProxy; import com.evernote.android.job.gcm.JobProxyGcm; import com.evernote.android.job.v14.JobProxy14; import com.evernote.android.job.v19.JobProxy19; import com.evernote.android.job.v21.JobProxy21; import com.evernote.android.job.v24.JobProxy24; import com.google.android.gms.gcm.GcmNetworkManager;  /**  * All available APIs.  *  * @author rwondratschek  */ public enum JobApi {     /**      * Uses the {@link JobScheduler} for scheduling jobs.      */     V_24(true, false),     /**      * Uses the {@link JobScheduler} for scheduling jobs.      */     V_21(true, true),     /**      * Uses the {@link AlarmManager} for scheduling jobs.      */     V_19(true, true),     /**      * Uses the {@link AlarmManager} for scheduling jobs.      */     V_14(false, true),     /**      * Uses the {@link GcmNetworkManager} for scheduling jobs.      */     GCM(true, false);      private JobProxy mCachedProxy;      private final boolean mSupportsExecutionWindow;     private final boolean mFlexSupport;      JobApi(boolean supportsExecutionWindow, boolean flexSupport) {         mSupportsExecutionWindow = supportsExecutionWindow;         mFlexSupport = flexSupport;     }      public boolean supportsExecutionWindow() {         return mSupportsExecutionWindow;     }      public boolean isFlexSupport() {         return mFlexSupport;     }      public boolean isSupported(Context context) {         switch (this) {             case V_24:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N;             case V_21:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;             case V_19:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;             case V_14:                 return true;             case GCM:                 return GcmAvailableHelper.isGcmApiSupported(context);             default:                 throw new IllegalStateException("not implemented");         }     }      @NonNull     public JobProxy createProxy(Context context) {         switch (this) {             case V_24:                 return new JobProxy24(context);             case V_21:                 return new JobProxy21(context);             case V_19:                 return new JobProxy19(context);             case V_14:                 return new JobProxy14(context);             case GCM:                 return new JobProxyGcm(context);             default:                 throw new IllegalStateException("not implemented");         }     }      @NonNull     public synchronized JobProxy getCachedProxy(Context context) {         if (mCachedProxy == null) {             mCachedProxy = createProxy(context);         }         return mCachedProxy;     }      /**      * @deprecated Use {@link #getDefault(Context, boolean)} instead.      */     @SuppressWarnings("unused")     @NonNull     @Deprecated     public static JobApi getDefault(Context context) {         return getDefault(context, JobManager.instance().getConfig().isGcmApiEnabled());     }      @NonNull     public static JobApi getDefault(Context context, boolean gcmEnabled) {         if (V_24.isSupported(context)) {             return V_24;         } else if (V_21.isSupported(context)) {             return V_21;         } else if (gcmEnabled && GCM.isSupported(context)) {             return GCM;         } else if (V_19.isSupported(context)) {             return V_19;         } else {             return V_14;         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> library : Folder]
		[NT -> src : Folder]
			[NT -> main : Folder]
				[NT -> java : Folder]
					[NT -> com : Folder]
						[NT -> evernote : Folder]
							[NT -> android : Folder]
								[NT -> job : Folder]
									[NT -> util : Folder]
										[NT -> JobApi.java.merge : .java.merge-File]
											[T -> JobApi.java : .java-Content "/*  * Copyright 2007-present Evernote Corporation.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without modification,  * are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice, this  *    list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ package com.evernote.android.job.util;  import android.app.AlarmManager; import android.app.Service; import android.app.job.JobScheduler; import android.content.Context; import android.content.Intent; import android.content.pm.ResolveInfo; import android.os.Build; import android.support.annotation.NonNull;  import com.evernote.android.job.JobManager; import com.evernote.android.job.JobProxy; import com.evernote.android.job.gcm.JobProxyGcm; import com.evernote.android.job.v14.JobProxy14; import com.evernote.android.job.v19.JobProxy19; import com.evernote.android.job.v21.JobProxy21; import com.evernote.android.job.v21.PlatformJobService; import com.evernote.android.job.v24.JobProxy24; import com.google.android.gms.gcm.GcmNetworkManager;  import java.util.List;  /**  * All available APIs.  *  * @author rwondratschek  */ public enum JobApi {     /**      * Uses the {@link JobScheduler} for scheduling jobs.      */     V_24(true, false),     /**      * Uses the {@link JobScheduler} for scheduling jobs.      */     V_21(true, true),     /**      * Uses the {@link AlarmManager} for scheduling jobs.      */     V_19(true, true),     /**      * Uses the {@link AlarmManager} for scheduling jobs.      */     V_14(false, true),     /**      * Uses the {@link GcmNetworkManager} for scheduling jobs.      */     GCM(true, false);      private JobProxy mCachedProxy;      private final boolean mSupportsExecutionWindow;     private final boolean mFlexSupport;      JobApi(boolean supportsExecutionWindow, boolean flexSupport) {         mSupportsExecutionWindow = supportsExecutionWindow;         mFlexSupport = flexSupport;     }      public boolean supportsExecutionWindow() {         return mSupportsExecutionWindow;     }      public boolean isFlexSupport() {         return mFlexSupport;     }      public boolean isSupported(Context context) {         switch (this) {             case V_24:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && isServiceEnabled(context, PlatformJobService.class);             case V_21:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && isServiceEnabled(context, PlatformJobService.class);             case V_19:                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;             case V_14:                 return true;             case GCM:                 return GcmAvailableHelper.isGcmApiSupported(context);             default:                 throw new IllegalStateException("not implemented");         }     }      @NonNull     public JobProxy createProxy(Context context) {         switch (this) {             case V_24:                 return new JobProxy24(context);             case V_21:                 return new JobProxy21(context);             case V_19:                 return new JobProxy19(context);             case V_14:                 return new JobProxy14(context);             case GCM:                 return new JobProxyGcm(context);             default:                 throw new IllegalStateException("not implemented");         }     }      @NonNull     public synchronized JobProxy getCachedProxy(Context context) {         if (mCachedProxy == null) {             mCachedProxy = createProxy(context);         }         return mCachedProxy;     }      private boolean isServiceEnabled(@NonNull Context context, @NonNull Class<? extends Service> clazz) {         // on some rooted devices user can disable services         try {             Intent intent = new Intent(context, clazz);             List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentServices(intent, 0);             return resolveInfos != null && !resolveInfos.isEmpty();         } catch (Exception e) {             return false;         }     }      /**      * @deprecated Use {@link #getDefault(Context, boolean)} instead.      */     @SuppressWarnings("unused")     @NonNull     @Deprecated     public static JobApi getDefault(Context context) {         return getDefault(context, JobManager.instance().getConfig().isGcmApiEnabled());     }      @NonNull     public static JobApi getDefault(Context context, boolean gcmEnabled) {         if (V_24.isSupported(context)) {             return V_24;         } else if (V_21.isSupported(context)) {             return V_21;         } else if (gcmEnabled && GCM.isSupported(context)) {             return GCM;         } else if (V_19.isSupported(context)) {             return V_19;         } else {             return V_14;         }     } } " compose:StringConcatenation merge: LineBased]
