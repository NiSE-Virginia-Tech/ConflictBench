Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/test/java/com/lmax/disruptor/RingBufferEventMatcher.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/test/java/com/lmax/disruptor/RingBufferEventMatcher.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/com/lmax/disruptor/RingBufferEventMatcher.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/test/java/com/lmax/disruptor/RingBufferEventMatcher.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/com/lmax/disruptor/RingBufferEventMatcher.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/test/java/com/lmax/disruptor/RingBufferEventMatcher.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> lmax : Folder]
						[NT -> disruptor : Folder]
							[NT -> RingBufferEventMatcher.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.lmax.disruptor;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Description{ImportPackage} : ImportDeclaration "import org.hamcrest.Description;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Factory{ImportPackage} : ImportDeclaration "import org.hamcrest.Factory;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Matcher{ImportPackage} : ImportDeclaration "import org.hamcrest.Matcher;" compose:Replacement merge: Default]
									[T -> org.hamcrest.TypeSafeMatcher{ImportPackage} : ImportDeclaration "import org.hamcrest.TypeSafeMatcher;" compose:Replacement merge: Default]
									[T -> org.hamcrest.CoreMatchers.is{ImportPackage} : ImportDeclaration "import static org.hamcrest.CoreMatchers.is;" compose:Replacement merge: Default]
									[NT -> RingBufferEventMatcher : ClassDeclaration]
										[T -> - : Modifiers "final" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> RingBufferEventMatcher : Id "RingBufferEventMatcher" compose:Replacement merge: Default]
										[T -> - : ExtendsList "extends TypeSafeMatcher<RingBuffer<Object[]>>" compose:Replacement merge: Default]
										[T -> expectedValueMatchers : FieldDecl "private final Matcher<?>[] expectedValueMatchers;" compose:Replacement merge: SemanticConflict]
										[T -> RingBufferEventMatcher(Matcher<?>[]-Matcher<?>[]) : ConstructorDecl "private RingBufferEventMatcher(final Matcher<?>[] expectedValueMatchers)     {         this.expectedValueMatchers = expectedValueMatchers;     }" compose:Replacement merge: LineBased]
										[T -> ringBufferWithEvents(Matcher<?>-Matcher<?>) : MethodDecl "@Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Matcher<?>... valueMatchers)     {         return new RingBufferEventMatcher(valueMatchers);     }" compose:Replacement merge: LineBased]
										[T -> ringBufferWithEvents(Object-Object) : MethodDecl "@Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Object... values)     {         Matcher<?>[] valueMatchers = new Matcher[values.length];         for (int i = 0; i < values.length; i++)         {             final Object value = values[i];             valueMatchers[i] = is(value);         }         return new RingBufferEventMatcher(valueMatchers);     }" compose:Replacement merge: LineBased]
										[T -> matchesSafely(RingBuffer<Object[]>-RingBuffer<Object[]>) : MethodDecl "@Override     public boolean matchesSafely(final RingBuffer<Object[]> ringBuffer)     {         boolean matches = true;         for (int i = 0; i < expectedValueMatchers.length; i++)         {             final Matcher<?> expectedValueMatcher = expectedValueMatchers[i];             matches &= expectedValueMatcher.matches(ringBuffer.get(i)[0]);         }         return matches;     }" compose:Replacement merge: LineBased]
										[T -> describeTo(Description-Description) : MethodDecl "@Override     public void describeTo(final Description description)     {         description.appendText("Expected ring buffer with events matching: ");          for (Matcher<?> expectedValueMatcher : expectedValueMatchers)         {             expectedValueMatcher.describeTo(description);         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> lmax : Folder]
						[NT -> disruptor : Folder]
							[NT -> RingBufferEventMatcher.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.lmax.disruptor;" compose:Replacement merge: Default]
									[T -> org.hamcrest.CoreMatchers.allOf{ImportPackage} : ImportDeclaration "import static org.hamcrest.CoreMatchers.allOf;" compose:Replacement merge: Default]
									[T -> org.hamcrest.CoreMatchers.is{ImportPackage} : ImportDeclaration "import static org.hamcrest.CoreMatchers.is;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Description{ImportPackage} : ImportDeclaration "import org.hamcrest.Description;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Factory{ImportPackage} : ImportDeclaration "import org.hamcrest.Factory;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Matcher{ImportPackage} : ImportDeclaration "import org.hamcrest.Matcher;" compose:Replacement merge: Default]
									[T -> org.hamcrest.TypeSafeMatcher{ImportPackage} : ImportDeclaration "import org.hamcrest.TypeSafeMatcher;" compose:Replacement merge: Default]
									[NT -> RingBufferEventMatcher : ClassDeclaration]
										[T -> - : Modifiers "final" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> RingBufferEventMatcher : Id "RingBufferEventMatcher" compose:Replacement merge: Default]
										[T -> - : ExtendsList "extends TypeSafeMatcher<RingBuffer<Object[]>>" compose:Replacement merge: Default]
										[T -> expectedValueMatchers : FieldDecl "private final Matcher<?>[] expectedValueMatchers;" compose:Replacement merge: SemanticConflict]
										[T -> RingBufferEventMatcher(Matcher<?>[]-Matcher<?>[]) : ConstructorDecl "private RingBufferEventMatcher(final Matcher<?>[] expectedValueMatchers)     {         this.expectedValueMatchers = expectedValueMatchers;     }" compose:Replacement merge: LineBased]
										[T -> ringBufferWithEvents(Matcher<?>-Matcher<?>) : MethodDecl "@Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Matcher<?>... valueMatchers)     {         return new RingBufferEventMatcher(valueMatchers);     }" compose:Replacement merge: LineBased]
										[T -> ringBufferWithEvents(Object-Object) : MethodDecl "@Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Object... values)     {         Matcher<?>[] valueMatchers = new Matcher[values.length];         for (int i = 0; i < values.length; i++)         {             final Object value = values[i];             valueMatchers[i] = is(value);         }         return new RingBufferEventMatcher(valueMatchers);     }" compose:Replacement merge: LineBased]
										[T -> matchesSafely(RingBuffer<Object[]>-RingBuffer<Object[]>) : MethodDecl "@Override     public boolean matchesSafely(final RingBuffer<Object[]> ringBuffer)     {         boolean matches = true;         for (int i = 0; i < expectedValueMatchers.length; i++)         {             final Matcher<?> expectedValueMatcher = expectedValueMatchers[i];             matches &= expectedValueMatcher.matches(ringBuffer.get(i)[0]);         }         return matches;     }" compose:Replacement merge: LineBased]
										[T -> describeTo(Description-Description) : MethodDecl "@Override     public void describeTo(final Description description)     {         description.appendText("Expected ring buffer with events matching: ");         allOf(expectedValueMatchers).describeTo(description);     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> lmax : Folder]
						[NT -> disruptor : Folder]
							[NT -> RingBufferEventMatcher.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package com.lmax.disruptor;" compose:Replacement merge: Default]
									[T -> org.hamcrest.CoreMatchers.is{ImportPackage} : ImportDeclaration "import static org.hamcrest.CoreMatchers.is;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Description{ImportPackage} : ImportDeclaration "import org.hamcrest.Description;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Factory{ImportPackage} : ImportDeclaration "import org.hamcrest.Factory;" compose:Replacement merge: Default]
									[T -> org.hamcrest.Matcher{ImportPackage} : ImportDeclaration "import org.hamcrest.Matcher;" compose:Replacement merge: Default]
									[T -> org.hamcrest.TypeSafeMatcher{ImportPackage} : ImportDeclaration "import org.hamcrest.TypeSafeMatcher;" compose:Replacement merge: Default]
									[NT -> RingBufferEventMatcher : ClassDeclaration]
										[T -> - : Modifiers "final" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> RingBufferEventMatcher : Id "RingBufferEventMatcher" compose:Replacement merge: Default]
										[T -> - : ExtendsList "extends TypeSafeMatcher<RingBuffer<Object[]>>" compose:Replacement merge: Default]
										[T -> expectedValueMatchers : FieldDecl "private final Matcher<?>[] expectedValueMatchers;" compose:Replacement merge: SemanticConflict]
										[T -> RingBufferEventMatcher(Matcher<?>[]-Matcher<?>[]) : ConstructorDecl "private RingBufferEventMatcher(final Matcher<?>[] expectedValueMatchers)     {         this.expectedValueMatchers = expectedValueMatchers;     }" compose:Replacement merge: LineBased]
										[T -> ringBufferWithEvents(Matcher<?>-Matcher<?>) : MethodDecl "@Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Matcher<?>... valueMatchers)     {         return new RingBufferEventMatcher(valueMatchers);     }" compose:Replacement merge: LineBased]
										[T -> ringBufferWithEvents(Object-Object) : MethodDecl "@Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Object... values)     {         Matcher<?>[] valueMatchers = new Matcher[values.length];         for (int i = 0; i < values.length; i++)         {             final Object value = values[i];             valueMatchers[i] = is(value);         }         return new RingBufferEventMatcher(valueMatchers);     }" compose:Replacement merge: LineBased]
										[T -> matchesSafely(RingBuffer<Object[]>-RingBuffer<Object[]>) : MethodDecl "@Override     public boolean matchesSafely(final RingBuffer<Object[]> ringBuffer)     {         boolean matches = true;         for (int i = 0; i < expectedValueMatchers.length; i++)         {             final Matcher<?> expectedValueMatcher = expectedValueMatchers[i];             matches &= expectedValueMatcher.matches(ringBuffer.get(i)[0]);         }         return matches;     }" compose:Replacement merge: LineBased]
										[T -> describeTo(Description-Description) : MethodDecl "@Override     public void describeTo(final Description description)     {         description.appendText("Expected ring buffer with events matching: ");         //allOf(expectedValueMatchers).describeTo(description);     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> lmax : Folder]
						[NT -> disruptor : Folder]
							[NT -> RingBufferEventMatcher.java.merge : .java.merge-File]
								[T -> RingBufferEventMatcher.java : .java-Content "package com.lmax.disruptor;  import org.hamcrest.Description; import org.hamcrest.Factory; import org.hamcrest.Matcher; import org.hamcrest.TypeSafeMatcher;  import static org.hamcrest.CoreMatchers.is;  final class RingBufferEventMatcher extends TypeSafeMatcher<RingBuffer<Object[]>> {     private final Matcher<?>[] expectedValueMatchers;      private RingBufferEventMatcher(final Matcher<?>[] expectedValueMatchers)     {         this.expectedValueMatchers = expectedValueMatchers;     }      @Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Matcher<?>... valueMatchers)     {         return new RingBufferEventMatcher(valueMatchers);     }      @Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Object... values)     {         Matcher<?>[] valueMatchers = new Matcher[values.length];         for (int i = 0; i < values.length; i++)         {             final Object value = values[i];             valueMatchers[i] = is(value);         }         return new RingBufferEventMatcher(valueMatchers);     }      @Override     public boolean matchesSafely(final RingBuffer<Object[]> ringBuffer)     {         boolean matches = true;         for (int i = 0; i < expectedValueMatchers.length; i++)         {             final Matcher<?> expectedValueMatcher = expectedValueMatchers[i];             matches &= expectedValueMatcher.matches(ringBuffer.get(i)[0]);         }         return matches;     }      @Override     public void describeTo(final Description description)     {         description.appendText("Expected ring buffer with events matching: ");          for (Matcher<?> expectedValueMatcher : expectedValueMatchers)         {             expectedValueMatcher.describeTo(description);         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> lmax : Folder]
						[NT -> disruptor : Folder]
							[NT -> RingBufferEventMatcher.java.merge : .java.merge-File]
								[T -> RingBufferEventMatcher.java : .java-Content "package com.lmax.disruptor;  import static org.hamcrest.CoreMatchers.allOf; import static org.hamcrest.CoreMatchers.is;  import org.hamcrest.Description; import org.hamcrest.Factory; import org.hamcrest.Matcher; import org.hamcrest.TypeSafeMatcher;  final class RingBufferEventMatcher extends TypeSafeMatcher<RingBuffer<Object[]>> {     private final Matcher<?>[] expectedValueMatchers;      private RingBufferEventMatcher(final Matcher<?>[] expectedValueMatchers)     {         this.expectedValueMatchers = expectedValueMatchers;     }      @Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Matcher<?>... valueMatchers)     {         return new RingBufferEventMatcher(valueMatchers);     }      @Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Object... values)     {         Matcher<?>[] valueMatchers = new Matcher[values.length];         for (int i = 0; i < values.length; i++)         {             final Object value = values[i];             valueMatchers[i] = is(value);         }         return new RingBufferEventMatcher(valueMatchers);     }      @Override     public boolean matchesSafely(final RingBuffer<Object[]> ringBuffer)     {         boolean matches = true;         for (int i = 0; i < expectedValueMatchers.length; i++)         {             final Matcher<?> expectedValueMatcher = expectedValueMatchers[i];             matches &= expectedValueMatcher.matches(ringBuffer.get(i)[0]);         }         return matches;     }      @Override     public void describeTo(final Description description)     {         description.appendText("Expected ring buffer with events matching: ");         allOf(expectedValueMatchers).describeTo(description);     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> test : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> lmax : Folder]
						[NT -> disruptor : Folder]
							[NT -> RingBufferEventMatcher.java.merge : .java.merge-File]
								[T -> RingBufferEventMatcher.java : .java-Content "package com.lmax.disruptor;  //import static org.hamcrest.CoreMatchers.allOf; import static org.hamcrest.CoreMatchers.is;  import org.hamcrest.Description; import org.hamcrest.Factory; import org.hamcrest.Matcher; import org.hamcrest.TypeSafeMatcher;  final class RingBufferEventMatcher extends TypeSafeMatcher<RingBuffer<Object[]>> {     private final Matcher<?>[] expectedValueMatchers;      private RingBufferEventMatcher(final Matcher<?>[] expectedValueMatchers)     {         this.expectedValueMatchers = expectedValueMatchers;     }      @Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Matcher<?>... valueMatchers)     {         return new RingBufferEventMatcher(valueMatchers);     }      @Factory     public static RingBufferEventMatcher ringBufferWithEvents(final Object... values)     {         Matcher<?>[] valueMatchers = new Matcher[values.length];         for (int i = 0; i < values.length; i++)         {             final Object value = values[i];             valueMatchers[i] = is(value);         }         return new RingBufferEventMatcher(valueMatchers);     }      @Override     public boolean matchesSafely(final RingBuffer<Object[]> ringBuffer)     {         boolean matches = true;         for (int i = 0; i < expectedValueMatchers.length; i++)         {             final Matcher<?> expectedValueMatcher = expectedValueMatchers[i];             matches &= expectedValueMatcher.matches(ringBuffer.get(i)[0]);         }         return matches;     }      @Override     public void describeTo(final Description description)     {         description.appendText("Expected ring buffer with events matching: ");         //allOf(expectedValueMatchers).describeTo(description);     } } " compose:StringConcatenation merge: LineBased]
