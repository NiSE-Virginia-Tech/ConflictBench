Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> run : Folder]
					[NT -> halo : Folder]
						[NT -> app : Folder]
							[NT -> model : Folder]
								[NT -> freemarker : Folder]
									[NT -> tag : Folder]
										[NT -> PostTagDirective.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package run.halo.app.model.freemarker.tag;" compose:Replacement merge: Default]
												[T -> freemarker.core.Environment{ImportPackage} : ImportDeclaration "import freemarker.core.Environment;" compose:Replacement merge: Default]
												[T -> freemarker.template.* : ImportDeclaration "import freemarker.template.*;" compose:Replacement merge: Default]
												[T -> org.springframework.stereotype.Component{ImportPackage} : ImportDeclaration "import org.springframework.stereotype.Component;" compose:Replacement merge: Default]
												[T -> run.halo.app.model.support.HaloConst{ImportPackage} : ImportDeclaration "import run.halo.app.model.support.HaloConst;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostCategoryService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostCategoryService;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostService;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostTagService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostTagService;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
												[NT -> PostTagDirective : ClassDeclaration]
													[T -> - : Modifiers "@Component public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> PostTagDirective : Id "PostTagDirective" compose:Replacement merge: Default]
													[T -> ImplList : ImplementsList "implements TemplateDirectiveModel" compose:Replacement merge: SemanticConflict]
													[T -> postService : FieldDecl "private final PostService postService;" compose:Replacement merge: SemanticConflict]
													[T -> postTagService : FieldDecl "private final PostTagService postTagService;" compose:Replacement merge: SemanticConflict]
													[T -> postCategoryService : FieldDecl "private final PostCategoryService postCategoryService;" compose:Replacement merge: SemanticConflict]
													[T -> PostTagDirective(Configuration-Configuration-PostService-PostService-PostTagService-PostTagService-PostCategoryService-PostCategoryService) : ConstructorDecl "public PostTagDirective(Configuration configuration,                             PostService postService,                             PostTagService postTagService,                             PostCategoryService postCategoryService) {         this.postService = postService;         this.postTagService = postTagService;         this.postCategoryService = postCategoryService;         configuration.setSharedVariable("postTag", this);     }" compose:Replacement merge: LineBased]
													[T -> execute(Environment-Environment-Map-Map-TemplateModel[]-TemplateModel[]-TemplateDirectiveBody-TemplateDirectiveBody) : MethodDecl "@Override     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);         if (params.containsKey(HaloConst.METHOD_KEY)) {             String method = params.get(HaloConst.METHOD_KEY).toString();             switch (method) {                 case "latest":                     int top = Integer.parseInt(params.get("top").toString());                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));                     break;                 case "count":                     env.setVariable("count", builder.build().wrap(postService.count()));                     break;                 case "archiveYear":                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));                     break;                 case "archiveMonth":                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));                     break;                 case "listByCategoryId":                     Integer categoryId = Integer.parseInt(params.get("categoryId").toString());                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));                     break;                 case "listByTagId":                     Integer tagId = Integer.parseInt(params.get("tagId").toString());                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));                     break;                 default:                     break;             }         }         body.render(env.getOut());     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> run : Folder]
					[NT -> halo : Folder]
						[NT -> app : Folder]
							[NT -> model : Folder]
								[NT -> freemarker : Folder]
									[NT -> tag : Folder]
										[NT -> PostTagDirective.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package run.halo.app.model.freemarker.tag;" compose:Replacement merge: Default]
												[T -> freemarker.core.Environment{ImportPackage} : ImportDeclaration "import freemarker.core.Environment;" compose:Replacement merge: Default]
												[T -> freemarker.template.* : ImportDeclaration "import freemarker.template.*;" compose:Replacement merge: Default]
												[T -> org.springframework.stereotype.Component{ImportPackage} : ImportDeclaration "import org.springframework.stereotype.Component;" compose:Replacement merge: Default]
												[T -> run.halo.app.model.support.HaloConst{ImportPackage} : ImportDeclaration "import run.halo.app.model.support.HaloConst;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostCategoryService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostCategoryService;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostService;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostTagService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostTagService;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
												[NT -> PostTagDirective : ClassDeclaration]
													[T -> - : Modifiers "@Component public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> PostTagDirective : Id "PostTagDirective" compose:Replacement merge: Default]
													[T -> ImplList : ImplementsList "implements TemplateDirectiveModel" compose:Replacement merge: SemanticConflict]
													[T -> postService : FieldDecl "private final PostService postService;" compose:Replacement merge: SemanticConflict]
													[T -> postTagService : FieldDecl "private final PostTagService postTagService;" compose:Replacement merge: SemanticConflict]
													[T -> postCategoryService : FieldDecl "private final PostCategoryService postCategoryService;" compose:Replacement merge: SemanticConflict]
													[T -> PostTagDirective(Configuration-Configuration-PostService-PostService-PostTagService-PostTagService-PostCategoryService-PostCategoryService) : ConstructorDecl "public PostTagDirective(Configuration configuration,                             PostService postService,                             PostTagService postTagService,                             PostCategoryService postCategoryService) {         this.postService = postService;         this.postTagService = postTagService;         this.postCategoryService = postCategoryService;         configuration.setSharedVariable("postTag", this);     }" compose:Replacement merge: LineBased]
													[T -> execute(Environment-Environment-Map-Map-TemplateModel[]-TemplateModel[]-TemplateDirectiveBody-TemplateDirectiveBody) : MethodDecl "@Override     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);         if (params.containsKey(HaloConst.METHOD_KEY)) {             String method = params.get(HaloConst.METHOD_KEY).toString();             Integer categoryId = Integer.parseInt(params.get("categoryId").toString());             Integer tagId = Integer.parseInt(params.get("tagId").toString());             int top = Integer.parseInt(params.get("top").toString());             switch (method) {                 case "latest":                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));                     break;                 case "count":                     env.setVariable("count", builder.build().wrap(postService.count()));                     break;                 case "archiveYear":                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));                     break;                 case "archiveMonth":                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));                     break;                 case "listByCategoryId":                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));                     break;                 case "listByTagId":                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));                     break;                 default:                     break;             }         }         body.render(env.getOut());     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> run : Folder]
					[NT -> halo : Folder]
						[NT -> app : Folder]
							[NT -> model : Folder]
								[NT -> freemarker : Folder]
									[NT -> tag : Folder]
										[NT -> PostTagDirective.java : Java-File]
											[NT -> - : CompilationUnit]
												[T -> - : PackageDeclaration "package run.halo.app.model.freemarker.tag;" compose:Replacement merge: Default]
												[T -> freemarker.core.Environment{ImportPackage} : ImportDeclaration "import freemarker.core.Environment;" compose:Replacement merge: Default]
												[T -> freemarker.template.* : ImportDeclaration "import freemarker.template.*;" compose:Replacement merge: Default]
												[T -> org.springframework.stereotype.Component{ImportPackage} : ImportDeclaration "import org.springframework.stereotype.Component;" compose:Replacement merge: Default]
												[T -> run.halo.app.model.support.HaloConst{ImportPackage} : ImportDeclaration "import run.halo.app.model.support.HaloConst;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostCategoryService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostCategoryService;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostService;" compose:Replacement merge: Default]
												[T -> run.halo.app.service.PostTagService{ImportPackage} : ImportDeclaration "import run.halo.app.service.PostTagService;" compose:Replacement merge: Default]
												[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
												[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
												[NT -> PostTagDirective : ClassDeclaration]
													[T -> - : Modifiers "@Component public" compose:Replacement merge: SemanticConflict]
													[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
													[T -> PostTagDirective : Id "PostTagDirective" compose:Replacement merge: Default]
													[T -> ImplList : ImplementsList "implements TemplateDirectiveModel" compose:Replacement merge: SemanticConflict]
													[T -> postService : FieldDecl "private final PostService postService;" compose:Replacement merge: SemanticConflict]
													[T -> postTagService : FieldDecl "private final PostTagService postTagService;" compose:Replacement merge: SemanticConflict]
													[T -> postCategoryService : FieldDecl "private final PostCategoryService postCategoryService;" compose:Replacement merge: SemanticConflict]
													[T -> PostTagDirective(Configuration-Configuration-PostService-PostService-PostTagService-PostTagService-PostCategoryService-PostCategoryService) : ConstructorDecl "public PostTagDirective(Configuration configuration,                             PostService postService,                             PostTagService postTagService,                             PostCategoryService postCategoryService) {         this.postService = postService;         this.postTagService = postTagService;         this.postCategoryService = postCategoryService;         configuration.setSharedVariable("postTag", this);     }" compose:Replacement merge: LineBased]
													[T -> execute(Environment-Environment-Map-Map-TemplateModel[]-TemplateModel[]-TemplateDirectiveBody-TemplateDirectiveBody) : MethodDecl "@Override     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);         if (params.containsKey(HaloConst.METHOD_KEY)) {             String method = params.get(HaloConst.METHOD_KEY).toString();             // TODO NullPointerException             Integer categoryId = Integer.parseInt(params.get("categoryId").toString());             Integer tagId = Integer.parseInt(params.get("tagId").toString());             int top = Integer.parseInt(params.get("top").toString());             switch (method) {                 case "latest":                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));                     break;                 case "count":                     env.setVariable("count", builder.build().wrap(postService.count()));                     break;                 case "archiveYear":                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));                     break;                 case "archiveMonth":                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));                     break;                 case "listByCategoryId":                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));                     break;                 case "listByTagId":                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));                     break;                 default:                     break;             }         }         body.render(env.getOut());     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> run : Folder]
					[NT -> halo : Folder]
						[NT -> app : Folder]
							[NT -> model : Folder]
								[NT -> freemarker : Folder]
									[NT -> tag : Folder]
										[NT -> PostTagDirective.java.merge : .java.merge-File]
											[T -> PostTagDirective.java : .java-Content "package run.halo.app.model.freemarker.tag;  import freemarker.core.Environment; import freemarker.template.*; import org.springframework.stereotype.Component; import run.halo.app.model.support.HaloConst; import run.halo.app.service.PostCategoryService; import run.halo.app.service.PostService; import run.halo.app.service.PostTagService;  import java.io.IOException; import java.util.Map;  /**  * Freemarker custom tag of post.  *  * @author ryanwang  * @date : 2018/4/26  */ @Component public class PostTagDirective implements TemplateDirectiveModel {      private final PostService postService;      private final PostTagService postTagService;      private final PostCategoryService postCategoryService;      public PostTagDirective(Configuration configuration,                             PostService postService,                             PostTagService postTagService,                             PostCategoryService postCategoryService) {         this.postService = postService;         this.postTagService = postTagService;         this.postCategoryService = postCategoryService;         configuration.setSharedVariable("postTag", this);     }      @Override     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);         if (params.containsKey(HaloConst.METHOD_KEY)) {             String method = params.get(HaloConst.METHOD_KEY).toString();             switch (method) {                 case "latest":                     int top = Integer.parseInt(params.get("top").toString());                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));                     break;                 case "count":                     env.setVariable("count", builder.build().wrap(postService.count()));                     break;                 case "archiveYear":                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));                     break;                 case "archiveMonth":                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));                     break;                 case "listByCategoryId":                     Integer categoryId = Integer.parseInt(params.get("categoryId").toString());                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));                     break;                 case "listByTagId":                     Integer tagId = Integer.parseInt(params.get("tagId").toString());                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));                     break;                 default:                     break;             }         }         body.render(env.getOut());     }  } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> run : Folder]
					[NT -> halo : Folder]
						[NT -> app : Folder]
							[NT -> model : Folder]
								[NT -> freemarker : Folder]
									[NT -> tag : Folder]
										[NT -> PostTagDirective.java.merge : .java.merge-File]
											[T -> PostTagDirective.java : .java-Content "package run.halo.app.model.freemarker.tag;  import freemarker.core.Environment; import freemarker.template.*; import org.springframework.stereotype.Component; import run.halo.app.model.support.HaloConst; import run.halo.app.service.PostCategoryService; import run.halo.app.service.PostService; import run.halo.app.service.PostTagService;  import java.io.IOException; import java.util.Map;  /**  * Freemarker custom tag of post.  *  * @author ryanwang  * @date : 2018/4/26  */ @Component public class PostTagDirective implements TemplateDirectiveModel {      private final PostService postService;      private final PostTagService postTagService;      private final PostCategoryService postCategoryService;      public PostTagDirective(Configuration configuration,                             PostService postService,                             PostTagService postTagService,                             PostCategoryService postCategoryService) {         this.postService = postService;         this.postTagService = postTagService;         this.postCategoryService = postCategoryService;         configuration.setSharedVariable("postTag", this);     }      @Override     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);         if (params.containsKey(HaloConst.METHOD_KEY)) {             String method = params.get(HaloConst.METHOD_KEY).toString();             Integer categoryId = Integer.parseInt(params.get("categoryId").toString());             Integer tagId = Integer.parseInt(params.get("tagId").toString());             int top = Integer.parseInt(params.get("top").toString());             switch (method) {                 case "latest":                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));                     break;                 case "count":                     env.setVariable("count", builder.build().wrap(postService.count()));                     break;                 case "archiveYear":                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));                     break;                 case "archiveMonth":                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));                     break;                 case "listByCategoryId":                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));                     break;                 case "listByTagId":                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));                     break;                 default:                     break;             }         }         body.render(env.getOut());     }  } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> run : Folder]
					[NT -> halo : Folder]
						[NT -> app : Folder]
							[NT -> model : Folder]
								[NT -> freemarker : Folder]
									[NT -> tag : Folder]
										[NT -> PostTagDirective.java.merge : .java.merge-File]
											[T -> PostTagDirective.java : .java-Content "package run.halo.app.model.freemarker.tag;  import freemarker.core.Environment; import freemarker.template.*; import org.springframework.stereotype.Component; import run.halo.app.model.support.HaloConst; import run.halo.app.service.PostCategoryService; import run.halo.app.service.PostService; import run.halo.app.service.PostTagService;  import java.io.IOException; import java.util.Map;  /**  * Freemarker custom tag of post.  *  * @author ryanwang  * @date : 2018/4/26  */ @Component public class PostTagDirective implements TemplateDirectiveModel {      private final PostService postService;      private final PostTagService postTagService;      private final PostCategoryService postCategoryService;      public PostTagDirective(Configuration configuration,                             PostService postService,                             PostTagService postTagService,                             PostCategoryService postCategoryService) {         this.postService = postService;         this.postTagService = postTagService;         this.postCategoryService = postCategoryService;         configuration.setSharedVariable("postTag", this);     }      @Override     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);         if (params.containsKey(HaloConst.METHOD_KEY)) {             String method = params.get(HaloConst.METHOD_KEY).toString();             // TODO NullPointerException             Integer categoryId = Integer.parseInt(params.get("categoryId").toString());             Integer tagId = Integer.parseInt(params.get("tagId").toString());             int top = Integer.parseInt(params.get("top").toString());             switch (method) {                 case "latest":                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));                     break;                 case "count":                     env.setVariable("count", builder.build().wrap(postService.count()));                     break;                 case "archiveYear":                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));                     break;                 case "archiveMonth":                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));                     break;                 case "listByCategoryId":                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));                     break;                 case "listByTagId":                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));                     break;                 default:                     break;             }         }         body.render(env.getOut());     }  } " compose:StringConcatenation merge: LineBased]
