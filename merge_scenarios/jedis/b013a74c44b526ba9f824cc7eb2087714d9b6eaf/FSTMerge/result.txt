Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/redis/clients/jedis/ShardedJedis.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/left/src/main/java/redis/clients/jedis/ShardedJedis.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/redis/clients/jedis/ShardedJedis.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/base/src/main/java/redis/clients/jedis/ShardedJedis.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/redis/clients/jedis/ShardedJedis.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/workspace/right/src/main/java/redis/clients/jedis/ShardedJedis.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> redis : Folder]
					[NT -> clients : Folder]
						[NT -> jedis : Folder]
							[NT -> ShardedJedis.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package redis.clients.jedis;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
									[T -> java.util.Set{ImportPackage} : ImportDeclaration "import java.util.Set;" compose:Replacement merge: Default]
									[T -> java.util.regex.Pattern{ImportPackage} : ImportDeclaration "import java.util.regex.Pattern;" compose:Replacement merge: Default]
									[T -> redis.clients.jedis.Client.LIST_POSITION{ImportPackage} : ImportDeclaration "import redis.clients.jedis.Client.LIST_POSITION;" compose:Replacement merge: Default]
									[T -> redis.clients.util.Hashing{ImportPackage} : ImportDeclaration "import redis.clients.util.Hashing;" compose:Replacement merge: Default]
									[T -> redis.clients.util.Sharded{ImportPackage} : ImportDeclaration "import redis.clients.util.Sharded;" compose:Replacement merge: Default]
									[NT -> ShardedJedis : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> ShardedJedis : Id "ShardedJedis" compose:Replacement merge: Default]
										[T -> - : ExtendsList "extends Sharded<Jedis, JedisShardInfo>" compose:Replacement merge: Default]
										[T -> ImplList : ImplementsList "implements         JedisCommands" compose:Replacement merge: SemanticConflict]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards) {         super(shards);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Hashing-Hashing) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Hashing algo) {         super(shards, algo);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Pattern-Pattern) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Pattern keyTagPattern) {         super(shards, keyTagPattern);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Hashing-Hashing-Pattern-Pattern) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Hashing algo,             Pattern keyTagPattern) {         super(shards, algo, keyTagPattern);     }" compose:Replacement merge: LineBased]
										[T -> disconnect({FormalParametersInternal}) : MethodDecl "public void disconnect() throws IOException {         for (JedisShardInfo jedis : getAllShards()) {             jedis.getResource().quit();             jedis.getResource().disconnect();         }     }" compose:Replacement merge: LineBased]
										[T -> set(String-String-String-String) : MethodDecl "public String set(String key, String value) {         Jedis j = getShard(key);         return j.set(key, value);     }" compose:Replacement merge: LineBased]
										[T -> get(String-String) : MethodDecl "public String get(String key) {         Jedis j = getShard(key);         return j.get(key);     }" compose:Replacement merge: LineBased]
										[T -> exists(String-String) : MethodDecl "public Integer exists(String key) {         Jedis j = getShard(key);         return j.exists(key);     }" compose:Replacement merge: LineBased]
										[T -> type(String-String) : MethodDecl "public String type(String key) {         Jedis j = getShard(key);         return j.type(key);     }" compose:Replacement merge: LineBased]
										[T -> expire(String-String-int-int) : MethodDecl "public Integer expire(String key, int seconds) {         Jedis j = getShard(key);         return j.expire(key, seconds);     }" compose:Replacement merge: LineBased]
										[T -> expireAt(String-String-long-long) : MethodDecl "public Integer expireAt(String key, long unixTime) {         Jedis j = getShard(key);         return j.expireAt(key, unixTime);     }" compose:Replacement merge: LineBased]
										[T -> ttl(String-String) : MethodDecl "public Integer ttl(String key) {         Jedis j = getShard(key);         return j.ttl(key);     }" compose:Replacement merge: LineBased]
										[T -> getSet(String-String-String-String) : MethodDecl "public String getSet(String key, String value) {         Jedis j = getShard(key);         return j.getSet(key, value);     }" compose:Replacement merge: LineBased]
										[T -> setnx(String-String-String-String) : MethodDecl "public Integer setnx(String key, String value) {         Jedis j = getShard(key);         return j.setnx(key, value);     }" compose:Replacement merge: LineBased]
										[T -> setex(String-String-int-int-String-String) : MethodDecl "public String setex(String key, int seconds, String value) {         Jedis j = getShard(key);         return j.setex(key, seconds, value);     }" compose:Replacement merge: LineBased]
										[T -> decrBy(String-String-int-int) : MethodDecl "public Integer decrBy(String key, int integer) {         Jedis j = getShard(key);         return j.decrBy(key, integer);     }" compose:Replacement merge: LineBased]
										[T -> decr(String-String) : MethodDecl "public Integer decr(String key) {         Jedis j = getShard(key);         return j.decr(key);     }" compose:Replacement merge: LineBased]
										[T -> incrBy(String-String-int-int) : MethodDecl "public Integer incrBy(String key, int integer) {         Jedis j = getShard(key);         return j.incrBy(key, integer);     }" compose:Replacement merge: LineBased]
										[T -> incr(String-String) : MethodDecl "public Integer incr(String key) {         Jedis j = getShard(key);         return j.incr(key);     }" compose:Replacement merge: LineBased]
										[T -> append(String-String-String-String) : MethodDecl "public Integer append(String key, String value) {         Jedis j = getShard(key);         return j.append(key, value);     }" compose:Replacement merge: LineBased]
										[T -> substr(String-String-int-int-int-int) : MethodDecl "public String substr(String key, int start, int end) {         Jedis j = getShard(key);         return j.substr(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> hset(String-String-String-String-String-String) : MethodDecl "public Integer hset(String key, String field, String value) {         Jedis j = getShard(key);         return j.hset(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hget(String-String-String-String) : MethodDecl "public String hget(String key, String field) {         Jedis j = getShard(key);         return j.hget(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hsetnx(String-String-String-String-String-String) : MethodDecl "public Integer hsetnx(String key, String field, String value) {         Jedis j = getShard(key);         return j.hsetnx(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hmset(String-String-Map<String,String>-Map<String,String>) : MethodDecl "public String hmset(String key, Map<String, String> hash) {         Jedis j = getShard(key);         return j.hmset(key, hash);     }" compose:Replacement merge: LineBased]
										[T -> hmget(String-String-String-String) : MethodDecl "public List<String> hmget(String key, String... fields) {         Jedis j = getShard(key);         return j.hmget(key, fields);     }" compose:Replacement merge: LineBased]
										[T -> hincrBy(String-String-String-String-int-int) : MethodDecl "public Integer hincrBy(String key, String field, int value) {         Jedis j = getShard(key);         return j.hincrBy(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hexists(String-String-String-String) : MethodDecl "public Integer hexists(String key, String field) {         Jedis j = getShard(key);         return j.hexists(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hdel(String-String-String-String) : MethodDecl "public Integer hdel(String key, String field) {         Jedis j = getShard(key);         return j.hdel(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hlen(String-String) : MethodDecl "public Integer hlen(String key) {         Jedis j = getShard(key);         return j.hlen(key);     }" compose:Replacement merge: LineBased]
										[T -> hkeys(String-String) : MethodDecl "public List<String> hkeys(String key) {         Jedis j = getShard(key);         return j.hkeys(key);     }" compose:Replacement merge: LineBased]
										[T -> hvals(String-String) : MethodDecl "public List<String> hvals(String key) {         Jedis j = getShard(key);         return j.hvals(key);     }" compose:Replacement merge: LineBased]
										[T -> hgetAll(String-String) : MethodDecl "public Map<String, String> hgetAll(String key) {         Jedis j = getShard(key);         return j.hgetAll(key);     }" compose:Replacement merge: LineBased]
										[T -> rpush(String-String-String-String) : MethodDecl "public Integer rpush(String key, String string) {         Jedis j = getShard(key);         return j.rpush(key, string);     }" compose:Replacement merge: LineBased]
										[T -> lpush(String-String-String-String) : MethodDecl "public Integer lpush(String key, String string) {         Jedis j = getShard(key);         return j.lpush(key, string);     }" compose:Replacement merge: LineBased]
										[T -> llen(String-String) : MethodDecl "public Integer llen(String key) {         Jedis j = getShard(key);         return j.llen(key);     }" compose:Replacement merge: LineBased]
										[T -> lrange(String-String-int-int-int-int) : MethodDecl "public List<String> lrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.lrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> ltrim(String-String-int-int-int-int) : MethodDecl "public String ltrim(String key, int start, int end) {         Jedis j = getShard(key);         return j.ltrim(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> lindex(String-String-int-int) : MethodDecl "public String lindex(String key, int index) {         Jedis j = getShard(key);         return j.lindex(key, index);     }" compose:Replacement merge: LineBased]
										[T -> lset(String-String-int-int-String-String) : MethodDecl "public String lset(String key, int index, String value) {         Jedis j = getShard(key);         return j.lset(key, index, value);     }" compose:Replacement merge: LineBased]
										[T -> lrem(String-String-int-int-String-String) : MethodDecl "public Integer lrem(String key, int count, String value) {         Jedis j = getShard(key);         return j.lrem(key, count, value);     }" compose:Replacement merge: LineBased]
										[T -> lpop(String-String) : MethodDecl "public String lpop(String key) {         Jedis j = getShard(key);         return j.lpop(key);     }" compose:Replacement merge: LineBased]
										[T -> rpop(String-String) : MethodDecl "public String rpop(String key) {         Jedis j = getShard(key);         return j.rpop(key);     }" compose:Replacement merge: LineBased]
										[T -> sadd(String-String-String-String) : MethodDecl "public Integer sadd(String key, String member) {         Jedis j = getShard(key);         return j.sadd(key, member);     }" compose:Replacement merge: LineBased]
										[T -> smembers(String-String) : MethodDecl "public Set<String> smembers(String key) {         Jedis j = getShard(key);         return j.smembers(key);     }" compose:Replacement merge: LineBased]
										[T -> srem(String-String-String-String) : MethodDecl "public Integer srem(String key, String member) {         Jedis j = getShard(key);         return j.srem(key, member);     }" compose:Replacement merge: LineBased]
										[T -> spop(String-String) : MethodDecl "public String spop(String key) {         Jedis j = getShard(key);         return j.spop(key);     }" compose:Replacement merge: LineBased]
										[T -> scard(String-String) : MethodDecl "public Integer scard(String key) {         Jedis j = getShard(key);         return j.scard(key);     }" compose:Replacement merge: LineBased]
										[T -> sismember(String-String-String-String) : MethodDecl "public Integer sismember(String key, String member) {         Jedis j = getShard(key);         return j.sismember(key, member);     }" compose:Replacement merge: LineBased]
										[T -> srandmember(String-String) : MethodDecl "public String srandmember(String key) {         Jedis j = getShard(key);         return j.srandmember(key);     }" compose:Replacement merge: LineBased]
										[T -> zadd(String-String-double-double-String-String) : MethodDecl "public Integer zadd(String key, double score, String member) {         Jedis j = getShard(key);         return j.zadd(key, score, member);     }" compose:Replacement merge: LineBased]
										[T -> zrange(String-String-int-int-int-int) : MethodDecl "public Set<String> zrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrem(String-String-String-String) : MethodDecl "public Integer zrem(String key, String member) {         Jedis j = getShard(key);         return j.zrem(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zincrby(String-String-double-double-String-String) : MethodDecl "public Double zincrby(String key, double score, String member) {         Jedis j = getShard(key);         return j.zincrby(key, score, member);     }" compose:Replacement merge: LineBased]
										[T -> zrank(String-String-String-String) : MethodDecl "public Integer zrank(String key, String member) {         Jedis j = getShard(key);         return j.zrank(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zrevrank(String-String-String-String) : MethodDecl "public Integer zrevrank(String key, String member) {         Jedis j = getShard(key);         return j.zrevrank(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zrevrange(String-String-int-int-int-int) : MethodDecl "public Set<String> zrevrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrangeWithScores(String-String-int-int-int-int) : MethodDecl "public Set<Tuple> zrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrangeWithScores(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrevrangeWithScores(String-String-int-int-int-int) : MethodDecl "public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrangeWithScores(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zcard(String-String) : MethodDecl "public Integer zcard(String key) {         Jedis j = getShard(key);         return j.zcard(key);     }" compose:Replacement merge: LineBased]
										[T -> zscore(String-String-String-String) : MethodDecl "public Double zscore(String key, String member) {         Jedis j = getShard(key);         return j.zscore(key, member);     }" compose:Replacement merge: LineBased]
										[T -> sort(String-String) : MethodDecl "public List<String> sort(String key) {         Jedis j = getShard(key);         return j.sort(key);     }" compose:Replacement merge: LineBased]
										[T -> sort(String-String-SortingParams-SortingParams) : MethodDecl "public List<String> sort(String key, SortingParams sortingParameters) {         Jedis j = getShard(key);         return j.sort(key, sortingParameters);     }" compose:Replacement merge: LineBased]
										[T -> zcount(String-String-double-double-double-double) : MethodDecl "public Integer zcount(String key, double min, double max) {         Jedis j = getShard(key);         return j.zcount(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScore(String-String-double-double-double-double) : MethodDecl "public Set<String> zrangeByScore(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScore(String-String-double-double-double-double-int-int-int-int) : MethodDecl "public Set<String> zrangeByScore(String key, double min, double max,             int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max, offset, count);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScoreWithScores(String-String-double-double-double-double) : MethodDecl "public Set<Tuple> zrangeByScoreWithScores(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScoreWithScores(String-String-double-double-double-double-int-int-int-int) : MethodDecl "public Set<Tuple> zrangeByScoreWithScores(String key, double min,             double max, int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max, offset, count);     }" compose:Replacement merge: LineBased]
										[T -> zremrangeByRank(String-String-int-int-int-int) : MethodDecl "public Integer zremrangeByRank(String key, int start, int end) {         Jedis j = getShard(key);         return j.zremrangeByRank(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zremrangeByScore(String-String-double-double-double-double) : MethodDecl "public Integer zremrangeByScore(String key, double start, double end) {         Jedis j = getShard(key);         return j.zremrangeByScore(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> linsert(String-String-LIST_POSITION-LIST_POSITION-String-String-String-String) : MethodDecl "public Integer linsert(String key, LIST_POSITION where, String pivot,             String value) {         Jedis j = getShard(key);         return j.linsert(key, where, pivot, value);     }" compose:Replacement merge: LineBased]
										[T -> pipelined(ShardedJedisPipeline-ShardedJedisPipeline) : MethodDecl "public List<Object> pipelined(ShardedJedisPipeline shardedJedisPipeline) {         shardedJedisPipeline.setShardedJedis(this);         shardedJedisPipeline.execute();         return shardedJedisPipeline.getResults();     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> redis : Folder]
					[NT -> clients : Folder]
						[NT -> jedis : Folder]
							[NT -> ShardedJedis.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package redis.clients.jedis;" compose:Replacement merge: Default]
									[T -> java.io.IOException{ImportPackage} : ImportDeclaration "import java.io.IOException;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
									[T -> java.util.Set{ImportPackage} : ImportDeclaration "import java.util.Set;" compose:Replacement merge: Default]
									[T -> java.util.regex.Pattern{ImportPackage} : ImportDeclaration "import java.util.regex.Pattern;" compose:Replacement merge: Default]
									[T -> redis.clients.jedis.Client.LIST_POSITION{ImportPackage} : ImportDeclaration "import redis.clients.jedis.Client.LIST_POSITION;" compose:Replacement merge: Default]
									[T -> redis.clients.util.Hashing{ImportPackage} : ImportDeclaration "import redis.clients.util.Hashing;" compose:Replacement merge: Default]
									[T -> redis.clients.util.Sharded{ImportPackage} : ImportDeclaration "import redis.clients.util.Sharded;" compose:Replacement merge: Default]
									[NT -> ShardedJedis : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> ShardedJedis : Id "ShardedJedis" compose:Replacement merge: Default]
										[T -> - : ExtendsList "extends Sharded<Jedis, JedisShardInfo>" compose:Replacement merge: Default]
										[T -> ImplList : ImplementsList "implements         JedisCommands" compose:Replacement merge: SemanticConflict]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards) {         super(shards);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Hashing-Hashing) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Hashing algo) {         super(shards, algo);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Pattern-Pattern) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Pattern keyTagPattern) {         super(shards, keyTagPattern);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Hashing-Hashing-Pattern-Pattern) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Hashing algo,             Pattern keyTagPattern) {         super(shards, algo, keyTagPattern);     }" compose:Replacement merge: LineBased]
										[T -> disconnect({FormalParametersInternal}) : MethodDecl "public void disconnect() throws IOException {         for (JedisShardInfo jedis : getAllShards()) {             jedis.getResource().disconnect();         }     }" compose:Replacement merge: LineBased]
										[T -> create(JedisShardInfo-JedisShardInfo) : MethodDecl "protected Jedis create(JedisShardInfo shard) {         return new Jedis(shard);     }" compose:Replacement merge: LineBased]
										[T -> set(String-String-String-String) : MethodDecl "public String set(String key, String value) {         Jedis j = getShard(key);         return j.set(key, value);     }" compose:Replacement merge: LineBased]
										[T -> get(String-String) : MethodDecl "public String get(String key) {         Jedis j = getShard(key);         return j.get(key);     }" compose:Replacement merge: LineBased]
										[T -> exists(String-String) : MethodDecl "public Integer exists(String key) {         Jedis j = getShard(key);         return j.exists(key);     }" compose:Replacement merge: LineBased]
										[T -> type(String-String) : MethodDecl "public String type(String key) {         Jedis j = getShard(key);         return j.type(key);     }" compose:Replacement merge: LineBased]
										[T -> expire(String-String-int-int) : MethodDecl "public Integer expire(String key, int seconds) {         Jedis j = getShard(key);         return j.expire(key, seconds);     }" compose:Replacement merge: LineBased]
										[T -> expireAt(String-String-long-long) : MethodDecl "public Integer expireAt(String key, long unixTime) {         Jedis j = getShard(key);         return j.expireAt(key, unixTime);     }" compose:Replacement merge: LineBased]
										[T -> ttl(String-String) : MethodDecl "public Integer ttl(String key) {         Jedis j = getShard(key);         return j.ttl(key);     }" compose:Replacement merge: LineBased]
										[T -> getSet(String-String-String-String) : MethodDecl "public String getSet(String key, String value) {         Jedis j = getShard(key);         return j.getSet(key, value);     }" compose:Replacement merge: LineBased]
										[T -> setnx(String-String-String-String) : MethodDecl "public Integer setnx(String key, String value) {         Jedis j = getShard(key);         return j.setnx(key, value);     }" compose:Replacement merge: LineBased]
										[T -> setex(String-String-int-int-String-String) : MethodDecl "public String setex(String key, int seconds, String value) {         Jedis j = getShard(key);         return j.setex(key, seconds, value);     }" compose:Replacement merge: LineBased]
										[T -> decrBy(String-String-int-int) : MethodDecl "public Integer decrBy(String key, int integer) {         Jedis j = getShard(key);         return j.decrBy(key, integer);     }" compose:Replacement merge: LineBased]
										[T -> decr(String-String) : MethodDecl "public Integer decr(String key) {         Jedis j = getShard(key);         return j.decr(key);     }" compose:Replacement merge: LineBased]
										[T -> incrBy(String-String-int-int) : MethodDecl "public Integer incrBy(String key, int integer) {         Jedis j = getShard(key);         return j.incrBy(key, integer);     }" compose:Replacement merge: LineBased]
										[T -> incr(String-String) : MethodDecl "public Integer incr(String key) {         Jedis j = getShard(key);         return j.incr(key);     }" compose:Replacement merge: LineBased]
										[T -> append(String-String-String-String) : MethodDecl "public Integer append(String key, String value) {         Jedis j = getShard(key);         return j.append(key, value);     }" compose:Replacement merge: LineBased]
										[T -> substr(String-String-int-int-int-int) : MethodDecl "public String substr(String key, int start, int end) {         Jedis j = getShard(key);         return j.substr(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> hset(String-String-String-String-String-String) : MethodDecl "public Integer hset(String key, String field, String value) {         Jedis j = getShard(key);         return j.hset(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hget(String-String-String-String) : MethodDecl "public String hget(String key, String field) {         Jedis j = getShard(key);         return j.hget(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hsetnx(String-String-String-String-String-String) : MethodDecl "public Integer hsetnx(String key, String field, String value) {         Jedis j = getShard(key);         return j.hsetnx(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hmset(String-String-Map<String,String>-Map<String,String>) : MethodDecl "public String hmset(String key, Map<String, String> hash) {         Jedis j = getShard(key);         return j.hmset(key, hash);     }" compose:Replacement merge: LineBased]
										[T -> hmget(String-String-String-String) : MethodDecl "public List<String> hmget(String key, String... fields) {         Jedis j = getShard(key);         return j.hmget(key, fields);     }" compose:Replacement merge: LineBased]
										[T -> hincrBy(String-String-String-String-int-int) : MethodDecl "public Integer hincrBy(String key, String field, int value) {         Jedis j = getShard(key);         return j.hincrBy(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hexists(String-String-String-String) : MethodDecl "public Integer hexists(String key, String field) {         Jedis j = getShard(key);         return j.hexists(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hdel(String-String-String-String) : MethodDecl "public Integer hdel(String key, String field) {         Jedis j = getShard(key);         return j.hdel(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hlen(String-String) : MethodDecl "public Integer hlen(String key) {         Jedis j = getShard(key);         return j.hlen(key);     }" compose:Replacement merge: LineBased]
										[T -> hkeys(String-String) : MethodDecl "public List<String> hkeys(String key) {         Jedis j = getShard(key);         return j.hkeys(key);     }" compose:Replacement merge: LineBased]
										[T -> hvals(String-String) : MethodDecl "public List<String> hvals(String key) {         Jedis j = getShard(key);         return j.hvals(key);     }" compose:Replacement merge: LineBased]
										[T -> hgetAll(String-String) : MethodDecl "public Map<String, String> hgetAll(String key) {         Jedis j = getShard(key);         return j.hgetAll(key);     }" compose:Replacement merge: LineBased]
										[T -> rpush(String-String-String-String) : MethodDecl "public Integer rpush(String key, String string) {         Jedis j = getShard(key);         return j.rpush(key, string);     }" compose:Replacement merge: LineBased]
										[T -> lpush(String-String-String-String) : MethodDecl "public Integer lpush(String key, String string) {         Jedis j = getShard(key);         return j.lpush(key, string);     }" compose:Replacement merge: LineBased]
										[T -> llen(String-String) : MethodDecl "public Integer llen(String key) {         Jedis j = getShard(key);         return j.llen(key);     }" compose:Replacement merge: LineBased]
										[T -> lrange(String-String-int-int-int-int) : MethodDecl "public List<String> lrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.lrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> ltrim(String-String-int-int-int-int) : MethodDecl "public String ltrim(String key, int start, int end) {         Jedis j = getShard(key);         return j.ltrim(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> lindex(String-String-int-int) : MethodDecl "public String lindex(String key, int index) {         Jedis j = getShard(key);         return j.lindex(key, index);     }" compose:Replacement merge: LineBased]
										[T -> lset(String-String-int-int-String-String) : MethodDecl "public String lset(String key, int index, String value) {         Jedis j = getShard(key);         return j.lset(key, index, value);     }" compose:Replacement merge: LineBased]
										[T -> lrem(String-String-int-int-String-String) : MethodDecl "public Integer lrem(String key, int count, String value) {         Jedis j = getShard(key);         return j.lrem(key, count, value);     }" compose:Replacement merge: LineBased]
										[T -> lpop(String-String) : MethodDecl "public String lpop(String key) {         Jedis j = getShard(key);         return j.lpop(key);     }" compose:Replacement merge: LineBased]
										[T -> rpop(String-String) : MethodDecl "public String rpop(String key) {         Jedis j = getShard(key);         return j.rpop(key);     }" compose:Replacement merge: LineBased]
										[T -> sadd(String-String-String-String) : MethodDecl "public Integer sadd(String key, String member) {         Jedis j = getShard(key);         return j.sadd(key, member);     }" compose:Replacement merge: LineBased]
										[T -> smembers(String-String) : MethodDecl "public Set<String> smembers(String key) {         Jedis j = getShard(key);         return j.smembers(key);     }" compose:Replacement merge: LineBased]
										[T -> srem(String-String-String-String) : MethodDecl "public Integer srem(String key, String member) {         Jedis j = getShard(key);         return j.srem(key, member);     }" compose:Replacement merge: LineBased]
										[T -> spop(String-String) : MethodDecl "public String spop(String key) {         Jedis j = getShard(key);         return j.spop(key);     }" compose:Replacement merge: LineBased]
										[T -> scard(String-String) : MethodDecl "public Integer scard(String key) {         Jedis j = getShard(key);         return j.scard(key);     }" compose:Replacement merge: LineBased]
										[T -> sismember(String-String-String-String) : MethodDecl "public Integer sismember(String key, String member) {         Jedis j = getShard(key);         return j.sismember(key, member);     }" compose:Replacement merge: LineBased]
										[T -> srandmember(String-String) : MethodDecl "public String srandmember(String key) {         Jedis j = getShard(key);         return j.srandmember(key);     }" compose:Replacement merge: LineBased]
										[T -> zadd(String-String-double-double-String-String) : MethodDecl "public Integer zadd(String key, double score, String member) {         Jedis j = getShard(key);         return j.zadd(key, score, member);     }" compose:Replacement merge: LineBased]
										[T -> zrange(String-String-int-int-int-int) : MethodDecl "public Set<String> zrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrem(String-String-String-String) : MethodDecl "public Integer zrem(String key, String member) {         Jedis j = getShard(key);         return j.zrem(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zincrby(String-String-double-double-String-String) : MethodDecl "public Double zincrby(String key, double score, String member) {         Jedis j = getShard(key);         return j.zincrby(key, score, member);     }" compose:Replacement merge: LineBased]
										[T -> zrank(String-String-String-String) : MethodDecl "public Integer zrank(String key, String member) {         Jedis j = getShard(key);         return j.zrank(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zrevrank(String-String-String-String) : MethodDecl "public Integer zrevrank(String key, String member) {         Jedis j = getShard(key);         return j.zrevrank(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zrevrange(String-String-int-int-int-int) : MethodDecl "public Set<String> zrevrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrangeWithScores(String-String-int-int-int-int) : MethodDecl "public Set<Tuple> zrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrangeWithScores(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrevrangeWithScores(String-String-int-int-int-int) : MethodDecl "public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrangeWithScores(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zcard(String-String) : MethodDecl "public Integer zcard(String key) {         Jedis j = getShard(key);         return j.zcard(key);     }" compose:Replacement merge: LineBased]
										[T -> zscore(String-String-String-String) : MethodDecl "public Double zscore(String key, String member) {         Jedis j = getShard(key);         return j.zscore(key, member);     }" compose:Replacement merge: LineBased]
										[T -> sort(String-String) : MethodDecl "public List<String> sort(String key) {         Jedis j = getShard(key);         return j.sort(key);     }" compose:Replacement merge: LineBased]
										[T -> sort(String-String-SortingParams-SortingParams) : MethodDecl "public List<String> sort(String key, SortingParams sortingParameters) {         Jedis j = getShard(key);         return j.sort(key, sortingParameters);     }" compose:Replacement merge: LineBased]
										[T -> zcount(String-String-double-double-double-double) : MethodDecl "public Integer zcount(String key, double min, double max) {         Jedis j = getShard(key);         return j.zcount(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScore(String-String-double-double-double-double) : MethodDecl "public Set<String> zrangeByScore(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScore(String-String-double-double-double-double-int-int-int-int) : MethodDecl "public Set<String> zrangeByScore(String key, double min, double max,             int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max, offset, count);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScoreWithScores(String-String-double-double-double-double) : MethodDecl "public Set<Tuple> zrangeByScoreWithScores(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScoreWithScores(String-String-double-double-double-double-int-int-int-int) : MethodDecl "public Set<Tuple> zrangeByScoreWithScores(String key, double min,             double max, int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max, offset, count);     }" compose:Replacement merge: LineBased]
										[T -> zremrangeByRank(String-String-int-int-int-int) : MethodDecl "public Integer zremrangeByRank(String key, int start, int end) {         Jedis j = getShard(key);         return j.zremrangeByRank(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zremrangeByScore(String-String-double-double-double-double) : MethodDecl "public Integer zremrangeByScore(String key, double start, double end) {         Jedis j = getShard(key);         return j.zremrangeByScore(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> linsert(String-String-LIST_POSITION-LIST_POSITION-String-String-String-String) : MethodDecl "public Integer linsert(String key, LIST_POSITION where, String pivot,             String value) {         Jedis j = getShard(key);         return j.linsert(key, where, pivot, value);     }" compose:Replacement merge: LineBased]
										[T -> pipelined(ShardedJedisPipeline-ShardedJedisPipeline) : MethodDecl "public List<Object> pipelined(ShardedJedisPipeline shardedJedisPipeline) {         shardedJedisPipeline.setShardedJedis(this);         shardedJedisPipeline.execute();         return shardedJedisPipeline.getResults();     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> redis : Folder]
					[NT -> clients : Folder]
						[NT -> jedis : Folder]
							[NT -> ShardedJedis.java : Java-File]
								[NT -> - : CompilationUnit]
									[T -> - : PackageDeclaration "package redis.clients.jedis;" compose:Replacement merge: Default]
									[T -> java.util.Collection{ImportPackage} : ImportDeclaration "import java.util.Collection;" compose:Replacement merge: Default]
									[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
									[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
									[T -> java.util.Set{ImportPackage} : ImportDeclaration "import java.util.Set;" compose:Replacement merge: Default]
									[T -> java.util.regex.Pattern{ImportPackage} : ImportDeclaration "import java.util.regex.Pattern;" compose:Replacement merge: Default]
									[T -> redis.clients.jedis.BinaryClient.LIST_POSITION{ImportPackage} : ImportDeclaration "import redis.clients.jedis.BinaryClient.LIST_POSITION;" compose:Replacement merge: Default]
									[T -> redis.clients.util.Hashing{ImportPackage} : ImportDeclaration "import redis.clients.util.Hashing;" compose:Replacement merge: Default]
									[NT -> ShardedJedis : ClassDeclaration]
										[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
										[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
										[T -> ShardedJedis : Id "ShardedJedis" compose:Replacement merge: Default]
										[T -> - : ExtendsList "extends BinaryShardedJedis" compose:Replacement merge: Default]
										[T -> ImplList : ImplementsList "implements JedisCommands" compose:Replacement merge: SemanticConflict]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards) {         super(shards);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Hashing-Hashing) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Hashing algo) {         super(shards, algo);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Pattern-Pattern) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Pattern keyTagPattern) {         super(shards, keyTagPattern);     }" compose:Replacement merge: LineBased]
										[T -> ShardedJedis(List<JedisShardInfo>-List<JedisShardInfo>-Hashing-Hashing-Pattern-Pattern) : ConstructorDecl "public ShardedJedis(List<JedisShardInfo> shards, Hashing algo, Pattern keyTagPattern) {         super(shards, algo, keyTagPattern);     }" compose:Replacement merge: LineBased]
										[T -> set(String-String-String-String) : MethodDecl "public String set(String key, String value) {         Jedis j = getShard(key);         return j.set(key, value);     }" compose:Replacement merge: LineBased]
										[T -> get(String-String) : MethodDecl "public String get(String key) {         Jedis j = getShard(key);         return j.get(key);     }" compose:Replacement merge: LineBased]
										[T -> exists(String-String) : MethodDecl "public Integer exists(String key) {         Jedis j = getShard(key);         return j.exists(key);     }" compose:Replacement merge: LineBased]
										[T -> type(String-String) : MethodDecl "public String type(String key) {         Jedis j = getShard(key);         return j.type(key);     }" compose:Replacement merge: LineBased]
										[T -> expire(String-String-int-int) : MethodDecl "public Integer expire(String key, int seconds) {         Jedis j = getShard(key);         return j.expire(key, seconds);     }" compose:Replacement merge: LineBased]
										[T -> expireAt(String-String-long-long) : MethodDecl "public Integer expireAt(String key, long unixTime) {         Jedis j = getShard(key);         return j.expireAt(key, unixTime);     }" compose:Replacement merge: LineBased]
										[T -> ttl(String-String) : MethodDecl "public Integer ttl(String key) {         Jedis j = getShard(key);         return j.ttl(key);     }" compose:Replacement merge: LineBased]
										[T -> getSet(String-String-String-String) : MethodDecl "public String getSet(String key, String value) {         Jedis j = getShard(key);         return j.getSet(key, value);     }" compose:Replacement merge: LineBased]
										[T -> setnx(String-String-String-String) : MethodDecl "public Integer setnx(String key, String value) {         Jedis j = getShard(key);         return j.setnx(key, value);     }" compose:Replacement merge: LineBased]
										[T -> setex(String-String-int-int-String-String) : MethodDecl "public String setex(String key, int seconds, String value) {         Jedis j = getShard(key);         return j.setex(key, seconds, value);     }" compose:Replacement merge: LineBased]
										[T -> decrBy(String-String-int-int) : MethodDecl "public Integer decrBy(String key, int integer) {         Jedis j = getShard(key);         return j.decrBy(key, integer);     }" compose:Replacement merge: LineBased]
										[T -> decr(String-String) : MethodDecl "public Integer decr(String key) {         Jedis j = getShard(key);         return j.decr(key);     }" compose:Replacement merge: LineBased]
										[T -> incrBy(String-String-int-int) : MethodDecl "public Integer incrBy(String key, int integer) {         Jedis j = getShard(key);         return j.incrBy(key, integer);     }" compose:Replacement merge: LineBased]
										[T -> incr(String-String) : MethodDecl "public Integer incr(String key) {         Jedis j = getShard(key);         return j.incr(key);     }" compose:Replacement merge: LineBased]
										[T -> append(String-String-String-String) : MethodDecl "public Integer append(String key, String value) {         Jedis j = getShard(key);         return j.append(key, value);     }" compose:Replacement merge: LineBased]
										[T -> substr(String-String-int-int-int-int) : MethodDecl "public String substr(String key, int start, int end) {         Jedis j = getShard(key);         return j.substr(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> hset(String-String-String-String-String-String) : MethodDecl "public Integer hset(String key, String field, String value) {         Jedis j = getShard(key);         return j.hset(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hget(String-String-String-String) : MethodDecl "public String hget(String key, String field) {         Jedis j = getShard(key);         return j.hget(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hsetnx(String-String-String-String-String-String) : MethodDecl "public Integer hsetnx(String key, String field, String value) {         Jedis j = getShard(key);         return j.hsetnx(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hmset(String-String-Map<String,String>-Map<String,String>) : MethodDecl "public String hmset(String key, Map<String, String> hash) {         Jedis j = getShard(key);         return j.hmset(key, hash);     }" compose:Replacement merge: LineBased]
										[T -> hmget(String-String-String-String) : MethodDecl "public List<String> hmget(String key, String... fields) {         Jedis j = getShard(key);         return j.hmget(key, fields);     }" compose:Replacement merge: LineBased]
										[T -> hincrBy(String-String-String-String-int-int) : MethodDecl "public Integer hincrBy(String key, String field, int value) {         Jedis j = getShard(key);         return j.hincrBy(key, field, value);     }" compose:Replacement merge: LineBased]
										[T -> hexists(String-String-String-String) : MethodDecl "public Integer hexists(String key, String field) {         Jedis j = getShard(key);         return j.hexists(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hdel(String-String-String-String) : MethodDecl "public Integer hdel(String key, String field) {         Jedis j = getShard(key);         return j.hdel(key, field);     }" compose:Replacement merge: LineBased]
										[T -> hlen(String-String) : MethodDecl "public Integer hlen(String key) {         Jedis j = getShard(key);         return j.hlen(key);     }" compose:Replacement merge: LineBased]
										[T -> hkeys(String-String) : MethodDecl "public Set<String> hkeys(String key) {         Jedis j = getShard(key);         return j.hkeys(key);     }" compose:Replacement merge: LineBased]
										[T -> hvals(String-String) : MethodDecl "public Collection<String> hvals(String key) {         Jedis j = getShard(key);         return j.hvals(key);     }" compose:Replacement merge: LineBased]
										[T -> hgetAll(String-String) : MethodDecl "public Map<String, String> hgetAll(String key) {         Jedis j = getShard(key);         return j.hgetAll(key);     }" compose:Replacement merge: LineBased]
										[T -> rpush(String-String-String-String) : MethodDecl "public Integer rpush(String key, String string) {         Jedis j = getShard(key);         return j.rpush(key, string);     }" compose:Replacement merge: LineBased]
										[T -> lpush(String-String-String-String) : MethodDecl "public Integer lpush(String key, String string) {         Jedis j = getShard(key);         return j.lpush(key, string);     }" compose:Replacement merge: LineBased]
										[T -> llen(String-String) : MethodDecl "public Integer llen(String key) {         Jedis j = getShard(key);         return j.llen(key);     }" compose:Replacement merge: LineBased]
										[T -> lrange(String-String-int-int-int-int) : MethodDecl "public List<String> lrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.lrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> ltrim(String-String-int-int-int-int) : MethodDecl "public String ltrim(String key, int start, int end) {         Jedis j = getShard(key);         return j.ltrim(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> lindex(String-String-int-int) : MethodDecl "public String lindex(String key, int index) {         Jedis j = getShard(key);         return j.lindex(key, index);     }" compose:Replacement merge: LineBased]
										[T -> lset(String-String-int-int-String-String) : MethodDecl "public String lset(String key, int index, String value) {         Jedis j = getShard(key);         return j.lset(key, index, value);     }" compose:Replacement merge: LineBased]
										[T -> lrem(String-String-int-int-String-String) : MethodDecl "public Integer lrem(String key, int count, String value) {         Jedis j = getShard(key);         return j.lrem(key, count, value);     }" compose:Replacement merge: LineBased]
										[T -> lpop(String-String) : MethodDecl "public String lpop(String key) {         Jedis j = getShard(key);         return j.lpop(key);     }" compose:Replacement merge: LineBased]
										[T -> rpop(String-String) : MethodDecl "public String rpop(String key) {         Jedis j = getShard(key);         return j.rpop(key);     }" compose:Replacement merge: LineBased]
										[T -> sadd(String-String-String-String) : MethodDecl "public Integer sadd(String key, String member) {         Jedis j = getShard(key);         return j.sadd(key, member);     }" compose:Replacement merge: LineBased]
										[T -> smembers(String-String) : MethodDecl "public Set<String> smembers(String key) {         Jedis j = getShard(key);         return j.smembers(key);     }" compose:Replacement merge: LineBased]
										[T -> srem(String-String-String-String) : MethodDecl "public Integer srem(String key, String member) {         Jedis j = getShard(key);         return j.srem(key, member);     }" compose:Replacement merge: LineBased]
										[T -> spop(String-String) : MethodDecl "public String spop(String key) {         Jedis j = getShard(key);         return j.spop(key);     }" compose:Replacement merge: LineBased]
										[T -> scard(String-String) : MethodDecl "public Integer scard(String key) {         Jedis j = getShard(key);         return j.scard(key);     }" compose:Replacement merge: LineBased]
										[T -> sismember(String-String-String-String) : MethodDecl "public Integer sismember(String key, String member) {         Jedis j = getShard(key);         return j.sismember(key, member);     }" compose:Replacement merge: LineBased]
										[T -> srandmember(String-String) : MethodDecl "public String srandmember(String key) {         Jedis j = getShard(key);         return j.srandmember(key);     }" compose:Replacement merge: LineBased]
										[T -> zadd(String-String-double-double-String-String) : MethodDecl "public Integer zadd(String key, double score, String member) {         Jedis j = getShard(key);         return j.zadd(key, score, member);     }" compose:Replacement merge: LineBased]
										[T -> zrange(String-String-int-int-int-int) : MethodDecl "public Set<String> zrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrem(String-String-String-String) : MethodDecl "public Integer zrem(String key, String member) {         Jedis j = getShard(key);         return j.zrem(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zincrby(String-String-double-double-String-String) : MethodDecl "public Double zincrby(String key, double score, String member) {         Jedis j = getShard(key);         return j.zincrby(key, score, member);     }" compose:Replacement merge: LineBased]
										[T -> zrank(String-String-String-String) : MethodDecl "public Integer zrank(String key, String member) {         Jedis j = getShard(key);         return j.zrank(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zrevrank(String-String-String-String) : MethodDecl "public Integer zrevrank(String key, String member) {         Jedis j = getShard(key);         return j.zrevrank(key, member);     }" compose:Replacement merge: LineBased]
										[T -> zrevrange(String-String-int-int-int-int) : MethodDecl "public Set<String> zrevrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrange(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrangeWithScores(String-String-int-int-int-int) : MethodDecl "public Set<Tuple> zrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrangeWithScores(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zrevrangeWithScores(String-String-int-int-int-int) : MethodDecl "public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrangeWithScores(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zcard(String-String) : MethodDecl "public Integer zcard(String key) {         Jedis j = getShard(key);         return j.zcard(key);     }" compose:Replacement merge: LineBased]
										[T -> zscore(String-String-String-String) : MethodDecl "public Double zscore(String key, String member) {         Jedis j = getShard(key);         return j.zscore(key, member);     }" compose:Replacement merge: LineBased]
										[T -> sort(String-String) : MethodDecl "public List<String> sort(String key) {         Jedis j = getShard(key);         return j.sort(key);     }" compose:Replacement merge: LineBased]
										[T -> sort(String-String-SortingParams-SortingParams) : MethodDecl "public List<String> sort(String key, SortingParams sortingParameters) {         Jedis j = getShard(key);         return j.sort(key, sortingParameters);     }" compose:Replacement merge: LineBased]
										[T -> zcount(String-String-double-double-double-double) : MethodDecl "public Integer zcount(String key, double min, double max) {         Jedis j = getShard(key);         return j.zcount(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScore(String-String-double-double-double-double) : MethodDecl "public Set<String> zrangeByScore(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScore(String-String-double-double-double-double-int-int-int-int) : MethodDecl "public Set<String> zrangeByScore(String key, double min, double max,             int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max, offset, count);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScoreWithScores(String-String-double-double-double-double) : MethodDecl "public Set<Tuple> zrangeByScoreWithScores(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max);     }" compose:Replacement merge: LineBased]
										[T -> zrangeByScoreWithScores(String-String-double-double-double-double-int-int-int-int) : MethodDecl "public Set<Tuple> zrangeByScoreWithScores(String key, double min,             double max, int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max, offset, count);     }" compose:Replacement merge: LineBased]
										[T -> zremrangeByRank(String-String-int-int-int-int) : MethodDecl "public Integer zremrangeByRank(String key, int start, int end) {         Jedis j = getShard(key);         return j.zremrangeByRank(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> zremrangeByScore(String-String-double-double-double-double) : MethodDecl "public Integer zremrangeByScore(String key, double start, double end) {         Jedis j = getShard(key);         return j.zremrangeByScore(key, start, end);     }" compose:Replacement merge: LineBased]
										[T -> linsert(String-String-LIST_POSITION-LIST_POSITION-String-String-String-String) : MethodDecl "public Integer linsert(String key, LIST_POSITION where, String pivot,             String value) {         Jedis j = getShard(key);         return j.linsert(key, where, pivot, value);     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> redis : Folder]
					[NT -> clients : Folder]
						[NT -> jedis : Folder]
							[NT -> ShardedJedis.java.merge : .java.merge-File]
								[T -> ShardedJedis.java : .java-Content "package redis.clients.jedis;  import java.io.IOException; import java.util.List; import java.util.Map; import java.util.Set; import java.util.regex.Pattern;  import redis.clients.jedis.Client.LIST_POSITION; import redis.clients.util.Hashing; import redis.clients.util.Sharded;  public class ShardedJedis extends Sharded<Jedis, JedisShardInfo> implements         JedisCommands {     public ShardedJedis(List<JedisShardInfo> shards) {         super(shards);     }      public ShardedJedis(List<JedisShardInfo> shards, Hashing algo) {         super(shards, algo);     }      public ShardedJedis(List<JedisShardInfo> shards, Pattern keyTagPattern) {         super(shards, keyTagPattern);     }      public ShardedJedis(List<JedisShardInfo> shards, Hashing algo,             Pattern keyTagPattern) {         super(shards, algo, keyTagPattern);     }      public void disconnect() throws IOException {         for (JedisShardInfo jedis : getAllShards()) {             jedis.getResource().quit();             jedis.getResource().disconnect();         }     }      public String set(String key, String value) {         Jedis j = getShard(key);         return j.set(key, value);     }      public String get(String key) {         Jedis j = getShard(key);         return j.get(key);     }      public Integer exists(String key) {         Jedis j = getShard(key);         return j.exists(key);     }      public String type(String key) {         Jedis j = getShard(key);         return j.type(key);     }      public Integer expire(String key, int seconds) {         Jedis j = getShard(key);         return j.expire(key, seconds);     }      public Integer expireAt(String key, long unixTime) {         Jedis j = getShard(key);         return j.expireAt(key, unixTime);     }      public Integer ttl(String key) {         Jedis j = getShard(key);         return j.ttl(key);     }      public String getSet(String key, String value) {         Jedis j = getShard(key);         return j.getSet(key, value);     }      public Integer setnx(String key, String value) {         Jedis j = getShard(key);         return j.setnx(key, value);     }      public String setex(String key, int seconds, String value) {         Jedis j = getShard(key);         return j.setex(key, seconds, value);     }      public Integer decrBy(String key, int integer) {         Jedis j = getShard(key);         return j.decrBy(key, integer);     }      public Integer decr(String key) {         Jedis j = getShard(key);         return j.decr(key);     }      public Integer incrBy(String key, int integer) {         Jedis j = getShard(key);         return j.incrBy(key, integer);     }      public Integer incr(String key) {         Jedis j = getShard(key);         return j.incr(key);     }      public Integer append(String key, String value) {         Jedis j = getShard(key);         return j.append(key, value);     }      public String substr(String key, int start, int end) {         Jedis j = getShard(key);         return j.substr(key, start, end);     }      public Integer hset(String key, String field, String value) {         Jedis j = getShard(key);         return j.hset(key, field, value);     }      public String hget(String key, String field) {         Jedis j = getShard(key);         return j.hget(key, field);     }      public Integer hsetnx(String key, String field, String value) {         Jedis j = getShard(key);         return j.hsetnx(key, field, value);     }      public String hmset(String key, Map<String, String> hash) {         Jedis j = getShard(key);         return j.hmset(key, hash);     }      public List<String> hmget(String key, String... fields) {         Jedis j = getShard(key);         return j.hmget(key, fields);     }      public Integer hincrBy(String key, String field, int value) {         Jedis j = getShard(key);         return j.hincrBy(key, field, value);     }      public Integer hexists(String key, String field) {         Jedis j = getShard(key);         return j.hexists(key, field);     }      public Integer hdel(String key, String field) {         Jedis j = getShard(key);         return j.hdel(key, field);     }      public Integer hlen(String key) {         Jedis j = getShard(key);         return j.hlen(key);     }      public List<String> hkeys(String key) {         Jedis j = getShard(key);         return j.hkeys(key);     }      public List<String> hvals(String key) {         Jedis j = getShard(key);         return j.hvals(key);     }      public Map<String, String> hgetAll(String key) {         Jedis j = getShard(key);         return j.hgetAll(key);     }      public Integer rpush(String key, String string) {         Jedis j = getShard(key);         return j.rpush(key, string);     }      public Integer lpush(String key, String string) {         Jedis j = getShard(key);         return j.lpush(key, string);     }      public Integer llen(String key) {         Jedis j = getShard(key);         return j.llen(key);     }      public List<String> lrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.lrange(key, start, end);     }      public String ltrim(String key, int start, int end) {         Jedis j = getShard(key);         return j.ltrim(key, start, end);     }      public String lindex(String key, int index) {         Jedis j = getShard(key);         return j.lindex(key, index);     }      public String lset(String key, int index, String value) {         Jedis j = getShard(key);         return j.lset(key, index, value);     }      public Integer lrem(String key, int count, String value) {         Jedis j = getShard(key);         return j.lrem(key, count, value);     }      public String lpop(String key) {         Jedis j = getShard(key);         return j.lpop(key);     }      public String rpop(String key) {         Jedis j = getShard(key);         return j.rpop(key);     }      public Integer sadd(String key, String member) {         Jedis j = getShard(key);         return j.sadd(key, member);     }      public Set<String> smembers(String key) {         Jedis j = getShard(key);         return j.smembers(key);     }      public Integer srem(String key, String member) {         Jedis j = getShard(key);         return j.srem(key, member);     }      public String spop(String key) {         Jedis j = getShard(key);         return j.spop(key);     }      public Integer scard(String key) {         Jedis j = getShard(key);         return j.scard(key);     }      public Integer sismember(String key, String member) {         Jedis j = getShard(key);         return j.sismember(key, member);     }      public String srandmember(String key) {         Jedis j = getShard(key);         return j.srandmember(key);     }      public Integer zadd(String key, double score, String member) {         Jedis j = getShard(key);         return j.zadd(key, score, member);     }      public Set<String> zrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrange(key, start, end);     }      public Integer zrem(String key, String member) {         Jedis j = getShard(key);         return j.zrem(key, member);     }      public Double zincrby(String key, double score, String member) {         Jedis j = getShard(key);         return j.zincrby(key, score, member);     }      public Integer zrank(String key, String member) {         Jedis j = getShard(key);         return j.zrank(key, member);     }      public Integer zrevrank(String key, String member) {         Jedis j = getShard(key);         return j.zrevrank(key, member);     }      public Set<String> zrevrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrange(key, start, end);     }      public Set<Tuple> zrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrangeWithScores(key, start, end);     }      public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrangeWithScores(key, start, end);     }      public Integer zcard(String key) {         Jedis j = getShard(key);         return j.zcard(key);     }      public Double zscore(String key, String member) {         Jedis j = getShard(key);         return j.zscore(key, member);     }      public List<String> sort(String key) {         Jedis j = getShard(key);         return j.sort(key);     }      public List<String> sort(String key, SortingParams sortingParameters) {         Jedis j = getShard(key);         return j.sort(key, sortingParameters);     }      public Integer zcount(String key, double min, double max) {         Jedis j = getShard(key);         return j.zcount(key, min, max);     }      public Set<String> zrangeByScore(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max);     }      public Set<String> zrangeByScore(String key, double min, double max,             int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max, offset, count);     }      public Set<Tuple> zrangeByScoreWithScores(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max);     }      public Set<Tuple> zrangeByScoreWithScores(String key, double min,             double max, int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max, offset, count);     }      public Integer zremrangeByRank(String key, int start, int end) {         Jedis j = getShard(key);         return j.zremrangeByRank(key, start, end);     }      public Integer zremrangeByScore(String key, double start, double end) {         Jedis j = getShard(key);         return j.zremrangeByScore(key, start, end);     }      public Integer linsert(String key, LIST_POSITION where, String pivot,             String value) {         Jedis j = getShard(key);         return j.linsert(key, where, pivot, value);     }      public List<Object> pipelined(ShardedJedisPipeline shardedJedisPipeline) {         shardedJedisPipeline.setShardedJedis(this);         shardedJedisPipeline.execute();         return shardedJedisPipeline.getResults();     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> redis : Folder]
					[NT -> clients : Folder]
						[NT -> jedis : Folder]
							[NT -> ShardedJedis.java.merge : .java.merge-File]
								[T -> ShardedJedis.java : .java-Content "package redis.clients.jedis;  import java.io.IOException; import java.util.List; import java.util.Map; import java.util.Set; import java.util.regex.Pattern;  import redis.clients.jedis.Client.LIST_POSITION; import redis.clients.util.Hashing; import redis.clients.util.Sharded;  public class ShardedJedis extends Sharded<Jedis, JedisShardInfo> implements         JedisCommands {     public ShardedJedis(List<JedisShardInfo> shards) {         super(shards);     }      public ShardedJedis(List<JedisShardInfo> shards, Hashing algo) {         super(shards, algo);     }      public ShardedJedis(List<JedisShardInfo> shards, Pattern keyTagPattern) {         super(shards, keyTagPattern);     }      public ShardedJedis(List<JedisShardInfo> shards, Hashing algo,             Pattern keyTagPattern) {         super(shards, algo, keyTagPattern);     }      public void disconnect() throws IOException {         for (JedisShardInfo jedis : getAllShards()) {             jedis.getResource().disconnect();         }     }      protected Jedis create(JedisShardInfo shard) {         return new Jedis(shard);     }      public String set(String key, String value) {         Jedis j = getShard(key);         return j.set(key, value);     }      public String get(String key) {         Jedis j = getShard(key);         return j.get(key);     }      public Integer exists(String key) {         Jedis j = getShard(key);         return j.exists(key);     }      public String type(String key) {         Jedis j = getShard(key);         return j.type(key);     }      public Integer expire(String key, int seconds) {         Jedis j = getShard(key);         return j.expire(key, seconds);     }      public Integer expireAt(String key, long unixTime) {         Jedis j = getShard(key);         return j.expireAt(key, unixTime);     }      public Integer ttl(String key) {         Jedis j = getShard(key);         return j.ttl(key);     }      public String getSet(String key, String value) {         Jedis j = getShard(key);         return j.getSet(key, value);     }      public Integer setnx(String key, String value) {         Jedis j = getShard(key);         return j.setnx(key, value);     }      public String setex(String key, int seconds, String value) {         Jedis j = getShard(key);         return j.setex(key, seconds, value);     }      public Integer decrBy(String key, int integer) {         Jedis j = getShard(key);         return j.decrBy(key, integer);     }      public Integer decr(String key) {         Jedis j = getShard(key);         return j.decr(key);     }      public Integer incrBy(String key, int integer) {         Jedis j = getShard(key);         return j.incrBy(key, integer);     }      public Integer incr(String key) {         Jedis j = getShard(key);         return j.incr(key);     }      public Integer append(String key, String value) {         Jedis j = getShard(key);         return j.append(key, value);     }      public String substr(String key, int start, int end) {         Jedis j = getShard(key);         return j.substr(key, start, end);     }      public Integer hset(String key, String field, String value) {         Jedis j = getShard(key);         return j.hset(key, field, value);     }      public String hget(String key, String field) {         Jedis j = getShard(key);         return j.hget(key, field);     }      public Integer hsetnx(String key, String field, String value) {         Jedis j = getShard(key);         return j.hsetnx(key, field, value);     }      public String hmset(String key, Map<String, String> hash) {         Jedis j = getShard(key);         return j.hmset(key, hash);     }      public List<String> hmget(String key, String... fields) {         Jedis j = getShard(key);         return j.hmget(key, fields);     }      public Integer hincrBy(String key, String field, int value) {         Jedis j = getShard(key);         return j.hincrBy(key, field, value);     }      public Integer hexists(String key, String field) {         Jedis j = getShard(key);         return j.hexists(key, field);     }      public Integer hdel(String key, String field) {         Jedis j = getShard(key);         return j.hdel(key, field);     }      public Integer hlen(String key) {         Jedis j = getShard(key);         return j.hlen(key);     }      public List<String> hkeys(String key) {         Jedis j = getShard(key);         return j.hkeys(key);     }      public List<String> hvals(String key) {         Jedis j = getShard(key);         return j.hvals(key);     }      public Map<String, String> hgetAll(String key) {         Jedis j = getShard(key);         return j.hgetAll(key);     }      public Integer rpush(String key, String string) {         Jedis j = getShard(key);         return j.rpush(key, string);     }      public Integer lpush(String key, String string) {         Jedis j = getShard(key);         return j.lpush(key, string);     }      public Integer llen(String key) {         Jedis j = getShard(key);         return j.llen(key);     }      public List<String> lrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.lrange(key, start, end);     }      public String ltrim(String key, int start, int end) {         Jedis j = getShard(key);         return j.ltrim(key, start, end);     }      public String lindex(String key, int index) {         Jedis j = getShard(key);         return j.lindex(key, index);     }      public String lset(String key, int index, String value) {         Jedis j = getShard(key);         return j.lset(key, index, value);     }      public Integer lrem(String key, int count, String value) {         Jedis j = getShard(key);         return j.lrem(key, count, value);     }      public String lpop(String key) {         Jedis j = getShard(key);         return j.lpop(key);     }      public String rpop(String key) {         Jedis j = getShard(key);         return j.rpop(key);     }      public Integer sadd(String key, String member) {         Jedis j = getShard(key);         return j.sadd(key, member);     }      public Set<String> smembers(String key) {         Jedis j = getShard(key);         return j.smembers(key);     }      public Integer srem(String key, String member) {         Jedis j = getShard(key);         return j.srem(key, member);     }      public String spop(String key) {         Jedis j = getShard(key);         return j.spop(key);     }      public Integer scard(String key) {         Jedis j = getShard(key);         return j.scard(key);     }      public Integer sismember(String key, String member) {         Jedis j = getShard(key);         return j.sismember(key, member);     }      public String srandmember(String key) {         Jedis j = getShard(key);         return j.srandmember(key);     }      public Integer zadd(String key, double score, String member) {         Jedis j = getShard(key);         return j.zadd(key, score, member);     }      public Set<String> zrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrange(key, start, end);     }      public Integer zrem(String key, String member) {         Jedis j = getShard(key);         return j.zrem(key, member);     }      public Double zincrby(String key, double score, String member) {         Jedis j = getShard(key);         return j.zincrby(key, score, member);     }      public Integer zrank(String key, String member) {         Jedis j = getShard(key);         return j.zrank(key, member);     }      public Integer zrevrank(String key, String member) {         Jedis j = getShard(key);         return j.zrevrank(key, member);     }      public Set<String> zrevrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrange(key, start, end);     }      public Set<Tuple> zrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrangeWithScores(key, start, end);     }      public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrangeWithScores(key, start, end);     }      public Integer zcard(String key) {         Jedis j = getShard(key);         return j.zcard(key);     }      public Double zscore(String key, String member) {         Jedis j = getShard(key);         return j.zscore(key, member);     }      public List<String> sort(String key) {         Jedis j = getShard(key);         return j.sort(key);     }      public List<String> sort(String key, SortingParams sortingParameters) {         Jedis j = getShard(key);         return j.sort(key, sortingParameters);     }      public Integer zcount(String key, double min, double max) {         Jedis j = getShard(key);         return j.zcount(key, min, max);     }      public Set<String> zrangeByScore(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max);     }      public Set<String> zrangeByScore(String key, double min, double max,             int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max, offset, count);     }      public Set<Tuple> zrangeByScoreWithScores(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max);     }      public Set<Tuple> zrangeByScoreWithScores(String key, double min,             double max, int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max, offset, count);     }      public Integer zremrangeByRank(String key, int start, int end) {         Jedis j = getShard(key);         return j.zremrangeByRank(key, start, end);     }      public Integer zremrangeByScore(String key, double start, double end) {         Jedis j = getShard(key);         return j.zremrangeByScore(key, start, end);     }      public Integer linsert(String key, LIST_POSITION where, String pivot,             String value) {         Jedis j = getShard(key);         return j.linsert(key, where, pivot, value);     }      public List<Object> pipelined(ShardedJedisPipeline shardedJedisPipeline) {         shardedJedisPipeline.setShardedJedis(this);         shardedJedisPipeline.execute();         return shardedJedisPipeline.getResults();     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> redis : Folder]
					[NT -> clients : Folder]
						[NT -> jedis : Folder]
							[NT -> ShardedJedis.java.merge : .java.merge-File]
								[T -> ShardedJedis.java : .java-Content "package redis.clients.jedis;  import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; import java.util.regex.Pattern;  import redis.clients.jedis.BinaryClient.LIST_POSITION; import redis.clients.util.Hashing;  public class ShardedJedis extends BinaryShardedJedis implements JedisCommands {     public ShardedJedis(List<JedisShardInfo> shards) {         super(shards);     }      public ShardedJedis(List<JedisShardInfo> shards, Hashing algo) {         super(shards, algo);     }      public ShardedJedis(List<JedisShardInfo> shards, Pattern keyTagPattern) {         super(shards, keyTagPattern);     }      public ShardedJedis(List<JedisShardInfo> shards, Hashing algo, Pattern keyTagPattern) {         super(shards, algo, keyTagPattern);     }      public String set(String key, String value) {         Jedis j = getShard(key);         return j.set(key, value);     }      public String get(String key) {         Jedis j = getShard(key);         return j.get(key);     }      public Integer exists(String key) {         Jedis j = getShard(key);         return j.exists(key);     }      public String type(String key) {         Jedis j = getShard(key);         return j.type(key);     }      public Integer expire(String key, int seconds) {         Jedis j = getShard(key);         return j.expire(key, seconds);     }      public Integer expireAt(String key, long unixTime) {         Jedis j = getShard(key);         return j.expireAt(key, unixTime);     }      public Integer ttl(String key) {         Jedis j = getShard(key);         return j.ttl(key);     }      public String getSet(String key, String value) {         Jedis j = getShard(key);         return j.getSet(key, value);     }      public Integer setnx(String key, String value) {         Jedis j = getShard(key);         return j.setnx(key, value);     }      public String setex(String key, int seconds, String value) {         Jedis j = getShard(key);         return j.setex(key, seconds, value);     }      public Integer decrBy(String key, int integer) {         Jedis j = getShard(key);         return j.decrBy(key, integer);     }      public Integer decr(String key) {         Jedis j = getShard(key);         return j.decr(key);     }      public Integer incrBy(String key, int integer) {         Jedis j = getShard(key);         return j.incrBy(key, integer);     }      public Integer incr(String key) {         Jedis j = getShard(key);         return j.incr(key);     }      public Integer append(String key, String value) {         Jedis j = getShard(key);         return j.append(key, value);     }      public String substr(String key, int start, int end) {         Jedis j = getShard(key);         return j.substr(key, start, end);     }      public Integer hset(String key, String field, String value) {         Jedis j = getShard(key);         return j.hset(key, field, value);     }      public String hget(String key, String field) {         Jedis j = getShard(key);         return j.hget(key, field);     }      public Integer hsetnx(String key, String field, String value) {         Jedis j = getShard(key);         return j.hsetnx(key, field, value);     }      public String hmset(String key, Map<String, String> hash) {         Jedis j = getShard(key);         return j.hmset(key, hash);     }      public List<String> hmget(String key, String... fields) {         Jedis j = getShard(key);         return j.hmget(key, fields);     }      public Integer hincrBy(String key, String field, int value) {         Jedis j = getShard(key);         return j.hincrBy(key, field, value);     }      public Integer hexists(String key, String field) {         Jedis j = getShard(key);         return j.hexists(key, field);     }      public Integer hdel(String key, String field) {         Jedis j = getShard(key);         return j.hdel(key, field);     }      public Integer hlen(String key) {         Jedis j = getShard(key);         return j.hlen(key);     }      public Set<String> hkeys(String key) {         Jedis j = getShard(key);         return j.hkeys(key);     }      public Collection<String> hvals(String key) {         Jedis j = getShard(key);         return j.hvals(key);     }      public Map<String, String> hgetAll(String key) {         Jedis j = getShard(key);         return j.hgetAll(key);     }      public Integer rpush(String key, String string) {         Jedis j = getShard(key);         return j.rpush(key, string);     }      public Integer lpush(String key, String string) {         Jedis j = getShard(key);         return j.lpush(key, string);     }      public Integer llen(String key) {         Jedis j = getShard(key);         return j.llen(key);     }      public List<String> lrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.lrange(key, start, end);     }      public String ltrim(String key, int start, int end) {         Jedis j = getShard(key);         return j.ltrim(key, start, end);     }      public String lindex(String key, int index) {         Jedis j = getShard(key);         return j.lindex(key, index);     }      public String lset(String key, int index, String value) {         Jedis j = getShard(key);         return j.lset(key, index, value);     }      public Integer lrem(String key, int count, String value) {         Jedis j = getShard(key);         return j.lrem(key, count, value);     }      public String lpop(String key) {         Jedis j = getShard(key);         return j.lpop(key);     }      public String rpop(String key) {         Jedis j = getShard(key);         return j.rpop(key);     }      public Integer sadd(String key, String member) {         Jedis j = getShard(key);         return j.sadd(key, member);     }      public Set<String> smembers(String key) {         Jedis j = getShard(key);         return j.smembers(key);     }      public Integer srem(String key, String member) {         Jedis j = getShard(key);         return j.srem(key, member);     }      public String spop(String key) {         Jedis j = getShard(key);         return j.spop(key);     }      public Integer scard(String key) {         Jedis j = getShard(key);         return j.scard(key);     }      public Integer sismember(String key, String member) {         Jedis j = getShard(key);         return j.sismember(key, member);     }      public String srandmember(String key) {         Jedis j = getShard(key);         return j.srandmember(key);     }      public Integer zadd(String key, double score, String member) {         Jedis j = getShard(key);         return j.zadd(key, score, member);     }      public Set<String> zrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrange(key, start, end);     }      public Integer zrem(String key, String member) {         Jedis j = getShard(key);         return j.zrem(key, member);     }      public Double zincrby(String key, double score, String member) {         Jedis j = getShard(key);         return j.zincrby(key, score, member);     }      public Integer zrank(String key, String member) {         Jedis j = getShard(key);         return j.zrank(key, member);     }      public Integer zrevrank(String key, String member) {         Jedis j = getShard(key);         return j.zrevrank(key, member);     }      public Set<String> zrevrange(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrange(key, start, end);     }      public Set<Tuple> zrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrangeWithScores(key, start, end);     }      public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {         Jedis j = getShard(key);         return j.zrevrangeWithScores(key, start, end);     }      public Integer zcard(String key) {         Jedis j = getShard(key);         return j.zcard(key);     }      public Double zscore(String key, String member) {         Jedis j = getShard(key);         return j.zscore(key, member);     }      public List<String> sort(String key) {         Jedis j = getShard(key);         return j.sort(key);     }      public List<String> sort(String key, SortingParams sortingParameters) {         Jedis j = getShard(key);         return j.sort(key, sortingParameters);     }      public Integer zcount(String key, double min, double max) {         Jedis j = getShard(key);         return j.zcount(key, min, max);     }      public Set<String> zrangeByScore(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max);     }      public Set<String> zrangeByScore(String key, double min, double max,             int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScore(key, min, max, offset, count);     }      public Set<Tuple> zrangeByScoreWithScores(String key, double min, double max) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max);     }      public Set<Tuple> zrangeByScoreWithScores(String key, double min,             double max, int offset, int count) {         Jedis j = getShard(key);         return j.zrangeByScoreWithScores(key, min, max, offset, count);     }      public Integer zremrangeByRank(String key, int start, int end) {         Jedis j = getShard(key);         return j.zremrangeByRank(key, start, end);     }      public Integer zremrangeByScore(String key, double start, double end) {         Jedis j = getShard(key);         return j.zremrangeByScore(key, start, end);     }      public Integer linsert(String key, LIST_POSITION where, String pivot,             String value) {         Jedis j = getShard(key);         return j.linsert(key, where, pivot, value);     } } " compose:StringConcatenation merge: LineBased]
